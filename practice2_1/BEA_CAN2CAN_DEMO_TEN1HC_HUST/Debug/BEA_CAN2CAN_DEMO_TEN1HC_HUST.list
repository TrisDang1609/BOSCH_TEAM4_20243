
BEA_CAN2CAN_DEMO_TEN1HC_HUST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad8  08006ad8  000080a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad8  08006ad8  00007ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae0  08006ae0  000080a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae0  08006ae0  00007ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae4  08006ae4  00007ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006ae8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080a8  2**0
                  CONTENTS
 10 .bss          00001378  200000a8  200000a8  000080a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001420  20001420  000080a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdac  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021dd  00000000  00000000  00013e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  00016068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000775  00000000  00000000  00016a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fc76  00000000  00000000  000171ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d244  00000000  00000000  00036e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb04c  00000000  00000000  00044067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff0b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b94  00000000  00000000  000ff0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009f  00000000  00000000  00101c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bf8 	.word	0x08005bf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08005bf8 	.word	0x08005bf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <DCM_ProcessRequest>:
 * @brief Process incoming diagnostic request
 * @param request_data: Pointer to request data
 * @param length: Length of request data
 */
void DCM_ProcessRequest(uint8_t* request_data, uint16_t length)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	807b      	strh	r3, [r7, #2]
    if (length == 0) {
 80005a8:	887b      	ldrh	r3, [r7, #2]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d031      	beq.n	8000612 <DCM_ProcessRequest+0x76>
        return; // Invalid request
    }
    
    // Manage security timeout (5 seconds)
    DCM_ManageSecurityTimeout();
 80005ae:	f000 f8c5 	bl	800073c <DCM_ManageSecurityTimeout>
    
    // Check if this is a CAN-TP frame (First Frame, Consecutive Frame, Flow Control)
    uint8_t pci_type = (request_data[0] >> 4) & 0x0F;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	091b      	lsrs	r3, r3, #4
 80005b8:	73fb      	strb	r3, [r7, #15]
    
    if (pci_type == 0x0) {
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d113      	bne.n	80005e8 <DCM_ProcessRequest+0x4c>
        // Single Frame - normal processing
        uint8_t sf_length = request_data[0] & 0x0F;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f003 030f 	and.w	r3, r3, #15
 80005c8:	73bb      	strb	r3, [r7, #14]
        if (sf_length > 0 && sf_length <= 7) {
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d021      	beq.n	8000614 <DCM_ProcessRequest+0x78>
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	d81e      	bhi.n	8000614 <DCM_ProcessRequest+0x78>
            DCM_ProcessDiagnosticRequest(&request_data[1], sf_length);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3301      	adds	r3, #1
 80005da:	7bba      	ldrb	r2, [r7, #14]
 80005dc:	b292      	uxth	r2, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f81a 	bl	800061a <DCM_ProcessDiagnosticRequest>
 80005e6:	e015      	b.n	8000614 <DCM_ProcessRequest+0x78>
        }
    } else if (pci_type == 0x1) {
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d103      	bne.n	80005f6 <DCM_ProcessRequest+0x5a>
        // First Frame - start multiframe reception
        CANTP_HandleFirstFrame(request_data);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f8d0 	bl	8000794 <CANTP_HandleFirstFrame>
 80005f4:	e00e      	b.n	8000614 <DCM_ProcessRequest+0x78>
    } else if (pci_type == 0x2) {
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d103      	bne.n	8000604 <DCM_ProcessRequest+0x68>
        // Consecutive Frame - continue multiframe reception
        CANTP_HandleConsecutiveFrame(request_data);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f91f 	bl	8000840 <CANTP_HandleConsecutiveFrame>
 8000602:	e007      	b.n	8000614 <DCM_ProcessRequest+0x78>
    } else if (pci_type == 0x3) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d104      	bne.n	8000614 <DCM_ProcessRequest+0x78>
        // Flow Control - handle flow control
        CANTP_HandleFlowControl(request_data);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f978 	bl	8000900 <CANTP_HandleFlowControl>
 8000610:	e000      	b.n	8000614 <DCM_ProcessRequest+0x78>
        return; // Invalid request
 8000612:	bf00      	nop
    }
}
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <DCM_ProcessDiagnosticRequest>:
 * @brief Process diagnostic request after CAN-TP processing
 * @param request_data: Pointer to request data
 * @param length: Length of request data
 */
void DCM_ProcessDiagnosticRequest(uint8_t* request_data, uint16_t length)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	807b      	strh	r3, [r7, #2]
    // Route request based on Service ID
    switch (request_data[0]) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b2e      	cmp	r3, #46	@ 0x2e
 800062c:	d012      	beq.n	8000654 <DCM_ProcessDiagnosticRequest+0x3a>
 800062e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000630:	dc16      	bgt.n	8000660 <DCM_ProcessDiagnosticRequest+0x46>
 8000632:	2b22      	cmp	r3, #34	@ 0x22
 8000634:	d002      	beq.n	800063c <DCM_ProcessDiagnosticRequest+0x22>
 8000636:	2b27      	cmp	r3, #39	@ 0x27
 8000638:	d006      	beq.n	8000648 <DCM_ProcessDiagnosticRequest+0x2e>
            DCM_WDBI_ProcessRequest(request_data, length);
            break;
            
        default:
            // Service not supported - keep silent as per requirement
            break;
 800063a:	e011      	b.n	8000660 <DCM_ProcessDiagnosticRequest+0x46>
            DCM_RDBI_ProcessRequest(request_data, length);
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f99c 	bl	800097e <DCM_RDBI_ProcessRequest>
            break;
 8000646:	e00c      	b.n	8000662 <DCM_ProcessDiagnosticRequest+0x48>
            DCM_SECA_ProcessRequest(request_data, length);
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	4619      	mov	r1, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 f9e7 	bl	8000a20 <DCM_SECA_ProcessRequest>
            break;
 8000652:	e006      	b.n	8000662 <DCM_ProcessDiagnosticRequest+0x48>
            DCM_WDBI_ProcessRequest(request_data, length);
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	4619      	mov	r1, r3
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 fb1b 	bl	8000c94 <DCM_WDBI_ProcessRequest>
            break;
 800065e:	e000      	b.n	8000662 <DCM_ProcessDiagnosticRequest+0x48>
            break;
 8000660:	bf00      	nop
    }
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <DCM_SendResponse>:
 * @brief Send positive response via CAN
 * @param response_data: Pointer to response data
 * @param length: Length of response data
 */
void DCM_SendResponse(uint8_t* response_data, uint16_t length)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
    // Clear CAN2 TX buffer
    for (int i = 0; i < 8; i++) {
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	e007      	b.n	800068e <DCM_SendResponse+0x22>
        CAN2_DATA_TX[i] = 0x55; // Padding with 0x55
 800067e:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <DCM_SendResponse+0x90>)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	2255      	movs	r2, #85	@ 0x55
 8000686:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b07      	cmp	r3, #7
 8000692:	ddf4      	ble.n	800067e <DCM_SendResponse+0x12>
    }
    
    // Copy response data (max 8 bytes for single frame)
    for (int i = 0; i < length && i < 8; i++) {
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	e00b      	b.n	80006b2 <DCM_SendResponse+0x46>
        CAN2_DATA_TX[i] = response_data[i];
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	7819      	ldrb	r1, [r3, #0]
 80006a2:	4a16      	ldr	r2, [pc, #88]	@ (80006fc <DCM_SendResponse+0x90>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	4413      	add	r3, r2
 80006a8:	460a      	mov	r2, r1
 80006aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length && i < 8; i++) {
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	da02      	bge.n	80006c0 <DCM_SendResponse+0x54>
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	ddec      	ble.n	800069a <DCM_SendResponse+0x2e>
    }
    
    // Configure CAN header for response
    CAN2_pHeader.StdId = DCM_RESPONSE_CAN_ID;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <DCM_SendResponse+0x94>)
 80006c2:	f240 72a2 	movw	r2, #1954	@ 0x7a2
 80006c6:	601a      	str	r2, [r3, #0]
    CAN2_pHeader.ExtId = 0x00;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <DCM_SendResponse+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
    CAN2_pHeader.RTR = CAN_RTR_DATA;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <DCM_SendResponse+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
    CAN2_pHeader.IDE = CAN_ID_STD;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <DCM_SendResponse+0x94>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
    CAN2_pHeader.DLC = 8; // Always 8 bytes as per requirement
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <DCM_SendResponse+0x94>)
 80006dc:	2208      	movs	r2, #8
 80006de:	611a      	str	r2, [r3, #16]
    CAN2_pHeader.TransmitGlobalTime = DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <DCM_SendResponse+0x94>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	751a      	strb	r2, [r3, #20]
    
    // Send response
    HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox);
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <DCM_SendResponse+0x98>)
 80006e8:	4a04      	ldr	r2, [pc, #16]	@ (80006fc <DCM_SendResponse+0x90>)
 80006ea:	4905      	ldr	r1, [pc, #20]	@ (8000700 <DCM_SendResponse+0x94>)
 80006ec:	4806      	ldr	r0, [pc, #24]	@ (8000708 <DCM_SendResponse+0x9c>)
 80006ee:	f002 f8f1 	bl	80028d4 <HAL_CAN_AddTxMessage>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20001284 	.word	0x20001284
 8000700:	2000020c 	.word	0x2000020c
 8000704:	20000268 	.word	0x20000268
 8000708:	20000144 	.word	0x20000144

0800070c <DCM_SendNegativeResponse>:
 * @brief Send negative response via CAN
 * @param service_id: Original service ID
 * @param nrc: Negative Response Code
 */
void DCM_SendNegativeResponse(uint8_t service_id, uint8_t nrc)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
    uint8_t response_data[3];
    
    response_data[0] = DCM_NRC_SID;    // 0x7F
 800071c:	237f      	movs	r3, #127	@ 0x7f
 800071e:	733b      	strb	r3, [r7, #12]
    response_data[1] = service_id;     // Original SID
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	737b      	strb	r3, [r7, #13]
    response_data[2] = nrc;            // NRC
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	73bb      	strb	r3, [r7, #14]
    
    DCM_SendResponse(response_data, 3);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2103      	movs	r1, #3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff9c 	bl	800066c <DCM_SendResponse>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <DCM_ManageSecurityTimeout>:

/**
 * @brief Manage security timeout (5 seconds)
 */
void DCM_ManageSecurityTimeout(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    if (DCM_SecurityLevel1_Unlocked) {
 8000740:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <DCM_ManageSecurityTimeout+0x34>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d011      	beq.n	800076c <DCM_ManageSecurityTimeout+0x30>
        // Check if 5 seconds have passed since unlock
        if ((HAL_GetTick() - DCM_SecurityUnlockTimestamp) > 5000) {
 8000748:	f001 fe74 	bl	8002434 <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <DCM_ManageSecurityTimeout+0x38>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000758:	4293      	cmp	r3, r2
 800075a:	d907      	bls.n	800076c <DCM_ManageSecurityTimeout+0x30>
            DCM_SecurityLevel1_Unlocked = 0;
 800075c:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <DCM_ManageSecurityTimeout+0x34>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
            // Turn off LED (PB0)
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2101      	movs	r1, #1
 8000766:	4804      	ldr	r0, [pc, #16]	@ (8000778 <DCM_ManageSecurityTimeout+0x3c>)
 8000768:	f003 f858 	bl	800381c <HAL_GPIO_WritePin>
        }
    }
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000c4 	.word	0x200000c4
 8000774:	200000c8 	.word	0x200000c8
 8000778:	40020400 	.word	0x40020400

0800077c <DCM_IsSecurityLevel1Unlocked>:
/**
 * @brief Check if Security Level 1 is unlocked
 * @return 1 if unlocked, 0 if locked
 */
uint8_t DCM_IsSecurityLevel1Unlocked(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
    return DCM_SecurityLevel1_Unlocked;
 8000780:	4b03      	ldr	r3, [pc, #12]	@ (8000790 <DCM_IsSecurityLevel1Unlocked+0x14>)
 8000782:	781b      	ldrb	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	200000c4 	.word	0x200000c4

08000794 <CANTP_HandleFirstFrame>:
/**
 * @brief Handle First Frame reception
 * @param frame_data: CAN frame data
 */
void CANTP_HandleFirstFrame(uint8_t* frame_data)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
    // First Frame format: [1F:FF_DL] [Data_bytes_1_to_6]
    uint16_t total_length = ((frame_data[0] & 0x0F) << 8) | frame_data[1];
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3301      	adds	r3, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	817b      	strh	r3, [r7, #10]
    
    if (total_length > sizeof(CANTP_RxBuffer)) {
 80007ba:	897b      	ldrh	r3, [r7, #10]
 80007bc:	2b40      	cmp	r3, #64	@ 0x40
 80007be:	d903      	bls.n	80007c8 <CANTP_HandleFirstFrame+0x34>
        // Buffer overflow - send FC with overflow flag
        CANTP_SendFlowControl(0x32); // FC_OVFLW
 80007c0:	2032      	movs	r0, #50	@ 0x32
 80007c2:	f000 f8bd 	bl	8000940 <CANTP_SendFlowControl>
        return;
 80007c6:	e02e      	b.n	8000826 <CANTP_HandleFirstFrame+0x92>
    }
    
    // Store message info
    CANTP_RxLength = total_length;
 80007c8:	4a18      	ldr	r2, [pc, #96]	@ (800082c <CANTP_HandleFirstFrame+0x98>)
 80007ca:	897b      	ldrh	r3, [r7, #10]
 80007cc:	8013      	strh	r3, [r2, #0]
    CANTP_RxIndex = 0;
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <CANTP_HandleFirstFrame+0x9c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	801a      	strh	r2, [r3, #0]
    CANTP_RxSequenceNumber = 1;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <CANTP_HandleFirstFrame+0xa0>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
    CANTP_RxState = CANTP_RECEIVING_FF;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <CANTP_HandleFirstFrame+0xa4>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
    
    // Copy first 6 data bytes
    for (int i = 0; i < 6 && CANTP_RxIndex < total_length; i++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e011      	b.n	800080a <CANTP_HandleFirstFrame+0x76>
        CANTP_RxBuffer[CANTP_RxIndex++] = frame_data[2 + i];
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3302      	adds	r3, #2
 80007ea:	461a      	mov	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	441a      	add	r2, r3
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <CANTP_HandleFirstFrame+0x9c>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	1c59      	adds	r1, r3, #1
 80007f6:	b288      	uxth	r0, r1
 80007f8:	490d      	ldr	r1, [pc, #52]	@ (8000830 <CANTP_HandleFirstFrame+0x9c>)
 80007fa:	8008      	strh	r0, [r1, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <CANTP_HandleFirstFrame+0xa8>)
 8000802:	545a      	strb	r2, [r3, r1]
    for (int i = 0; i < 6 && CANTP_RxIndex < total_length; i++) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b05      	cmp	r3, #5
 800080e:	dc04      	bgt.n	800081a <CANTP_HandleFirstFrame+0x86>
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <CANTP_HandleFirstFrame+0x9c>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	897a      	ldrh	r2, [r7, #10]
 8000816:	429a      	cmp	r2, r3
 8000818:	d8e5      	bhi.n	80007e6 <CANTP_HandleFirstFrame+0x52>
    }
    
    // Send Flow Control - Continue to Send
    CANTP_SendFlowControl(0x30); // FC_CTS (Continue to Send)
 800081a:	2030      	movs	r0, #48	@ 0x30
 800081c:	f000 f890 	bl	8000940 <CANTP_SendFlowControl>
    
    CANTP_RxState = CANTP_RECEIVING_CF;
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <CANTP_HandleFirstFrame+0xa4>)
 8000822:	2202      	movs	r2, #2
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000114 	.word	0x20000114
 8000830:	20000116 	.word	0x20000116
 8000834:	20000118 	.word	0x20000118
 8000838:	200000d2 	.word	0x200000d2
 800083c:	200000d4 	.word	0x200000d4

08000840 <CANTP_HandleConsecutiveFrame>:
/**
 * @brief Handle Consecutive Frame reception
 * @param frame_data: CAN frame data
 */
void CANTP_HandleConsecutiveFrame(uint8_t* frame_data)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    if (CANTP_RxState != CANTP_RECEIVING_CF) {
 8000848:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <CANTP_HandleConsecutiveFrame+0xac>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d148      	bne.n	80008e2 <CANTP_HandleConsecutiveFrame+0xa2>
        return; // Not expecting consecutive frame
    }
    
    uint8_t sequence_number = frame_data[0] & 0x0F;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	72fb      	strb	r3, [r7, #11]
    
    // Check sequence number
    if (sequence_number != CANTP_RxSequenceNumber) {
 800085a:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <CANTP_HandleConsecutiveFrame+0xb0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	7afa      	ldrb	r2, [r7, #11]
 8000860:	429a      	cmp	r2, r3
 8000862:	d003      	beq.n	800086c <CANTP_HandleConsecutiveFrame+0x2c>
        // Wrong sequence - abort
        CANTP_RxState = CANTP_IDLE;
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <CANTP_HandleConsecutiveFrame+0xac>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
        return;
 800086a:	e03b      	b.n	80008e4 <CANTP_HandleConsecutiveFrame+0xa4>
    }
    
    // Copy data bytes (up to 7 bytes)
    for (int i = 0; i < 7 && CANTP_RxIndex < CANTP_RxLength; i++) {
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e011      	b.n	8000896 <CANTP_HandleConsecutiveFrame+0x56>
        CANTP_RxBuffer[CANTP_RxIndex++] = frame_data[1 + i];
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	461a      	mov	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	441a      	add	r2, r3
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <CANTP_HandleConsecutiveFrame+0xb4>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b288      	uxth	r0, r1
 8000884:	491b      	ldr	r1, [pc, #108]	@ (80008f4 <CANTP_HandleConsecutiveFrame+0xb4>)
 8000886:	8008      	strh	r0, [r1, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	7812      	ldrb	r2, [r2, #0]
 800088c:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <CANTP_HandleConsecutiveFrame+0xb8>)
 800088e:	545a      	strb	r2, [r3, r1]
    for (int i = 0; i < 7 && CANTP_RxIndex < CANTP_RxLength; i++) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3301      	adds	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b06      	cmp	r3, #6
 800089a:	dc05      	bgt.n	80008a8 <CANTP_HandleConsecutiveFrame+0x68>
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <CANTP_HandleConsecutiveFrame+0xb4>)
 800089e:	881a      	ldrh	r2, [r3, #0]
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <CANTP_HandleConsecutiveFrame+0xbc>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d3e4      	bcc.n	8000872 <CANTP_HandleConsecutiveFrame+0x32>
    }
    
    // Update sequence number (1-15, then wrap to 0)
    CANTP_RxSequenceNumber++;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <CANTP_HandleConsecutiveFrame+0xb0>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <CANTP_HandleConsecutiveFrame+0xb0>)
 80008b2:	701a      	strb	r2, [r3, #0]
    if (CANTP_RxSequenceNumber > 15) {
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <CANTP_HandleConsecutiveFrame+0xb0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d902      	bls.n	80008c2 <CANTP_HandleConsecutiveFrame+0x82>
        CANTP_RxSequenceNumber = 0;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <CANTP_HandleConsecutiveFrame+0xb0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
    }
    
    // Check if message is complete
    if (CANTP_RxIndex >= CANTP_RxLength) {
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <CANTP_HandleConsecutiveFrame+0xb4>)
 80008c4:	881a      	ldrh	r2, [r3, #0]
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <CANTP_HandleConsecutiveFrame+0xbc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d30a      	bcc.n	80008e4 <CANTP_HandleConsecutiveFrame+0xa4>
        // Message complete - process it
        DCM_ProcessDiagnosticRequest(CANTP_RxBuffer, CANTP_RxLength);
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <CANTP_HandleConsecutiveFrame+0xbc>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	4619      	mov	r1, r3
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <CANTP_HandleConsecutiveFrame+0xb8>)
 80008d6:	f7ff fea0 	bl	800061a <DCM_ProcessDiagnosticRequest>
        CANTP_RxState = CANTP_IDLE;
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <CANTP_HandleConsecutiveFrame+0xac>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e000      	b.n	80008e4 <CANTP_HandleConsecutiveFrame+0xa4>
        return; // Not expecting consecutive frame
 80008e2:	bf00      	nop
    }
}
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000d2 	.word	0x200000d2
 80008f0:	20000118 	.word	0x20000118
 80008f4:	20000116 	.word	0x20000116
 80008f8:	200000d4 	.word	0x200000d4
 80008fc:	20000114 	.word	0x20000114

08000900 <CANTP_HandleFlowControl>:
/**
 * @brief Handle Flow Control frame
 * @param frame_data: CAN frame data
 */
void CANTP_HandleFlowControl(uint8_t* frame_data)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    uint8_t fc_flag = frame_data[0] & 0x0F;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f003 030f 	and.w	r3, r3, #15
 8000910:	73fb      	strb	r3, [r7, #15]
    
    switch (fc_flag) {
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d006      	beq.n	8000926 <CANTP_HandleFlowControl+0x26>
 8000918:	2b02      	cmp	r3, #2
 800091a:	dc06      	bgt.n	800092a <CANTP_HandleFlowControl+0x2a>
 800091c:	2b00      	cmp	r3, #0
 800091e:	d006      	beq.n	800092e <CANTP_HandleFlowControl+0x2e>
 8000920:	2b01      	cmp	r3, #1
 8000922:	d006      	beq.n	8000932 <CANTP_HandleFlowControl+0x32>
            // Abort transmission
            break;
            
        default:
            // Invalid FC flag
            break;
 8000924:	e001      	b.n	800092a <CANTP_HandleFlowControl+0x2a>
            break;
 8000926:	bf00      	nop
 8000928:	e004      	b.n	8000934 <CANTP_HandleFlowControl+0x34>
            break;
 800092a:	bf00      	nop
 800092c:	e002      	b.n	8000934 <CANTP_HandleFlowControl+0x34>
            break;
 800092e:	bf00      	nop
 8000930:	e000      	b.n	8000934 <CANTP_HandleFlowControl+0x34>
            break;
 8000932:	bf00      	nop
    }
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <CANTP_SendFlowControl>:
/**
 * @brief Send Flow Control frame
 * @param fc_flag: Flow Control flag (0x30=CTS, 0x31=WT, 0x32=OVFLW)
 */
void CANTP_SendFlowControl(uint8_t fc_flag)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
    uint8_t fc_frame[8];
    
    // Flow Control format: [3X:BS:STmin] [00 00 00 00 00]
    fc_frame[0] = fc_flag;  // 30=CTS, 31=WT, 32=OVFLW
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	723b      	strb	r3, [r7, #8]
    fc_frame[1] = 0x00;     // Block Size = 0 (no blocking)
 800094e:	2300      	movs	r3, #0
 8000950:	727b      	strb	r3, [r7, #9]
    fc_frame[2] = 0x00;     // STmin = 0 (no separation time)
 8000952:	2300      	movs	r3, #0
 8000954:	72bb      	strb	r3, [r7, #10]
    fc_frame[3] = 0x55;     // Padding
 8000956:	2355      	movs	r3, #85	@ 0x55
 8000958:	72fb      	strb	r3, [r7, #11]
    fc_frame[4] = 0x55;
 800095a:	2355      	movs	r3, #85	@ 0x55
 800095c:	733b      	strb	r3, [r7, #12]
    fc_frame[5] = 0x55;
 800095e:	2355      	movs	r3, #85	@ 0x55
 8000960:	737b      	strb	r3, [r7, #13]
    fc_frame[6] = 0x55;
 8000962:	2355      	movs	r3, #85	@ 0x55
 8000964:	73bb      	strb	r3, [r7, #14]
    fc_frame[7] = 0x55;
 8000966:	2355      	movs	r3, #85	@ 0x55
 8000968:	73fb      	strb	r3, [r7, #15]
    
    DCM_SendResponse(fc_frame, 8);
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2108      	movs	r1, #8
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe7b 	bl	800066c <DCM_SendResponse>
}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <DCM_RDBI_ProcessRequest>:
 * @brief Process ReadDataByIdentifier (0x22) service request
 * @param request_data: Pointer to request data
 * @param length: Length of request data
 */
void DCM_RDBI_ProcessRequest(uint8_t* request_data, uint16_t length)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	460b      	mov	r3, r1
 8000988:	807b      	strh	r3, [r7, #2]
    // Check minimum length (SID + DID_High + DID_Low = 3 bytes)
    if (length != 3) {
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d004      	beq.n	800099a <DCM_RDBI_ProcessRequest+0x1c>
        DCM_SendNegativeResponse(DCM_SID_READ_DATA_BY_ID, DCM_NRC_INVALID_LENGTH);
 8000990:	2113      	movs	r1, #19
 8000992:	2022      	movs	r0, #34	@ 0x22
 8000994:	f7ff feba 	bl	800070c <DCM_SendNegativeResponse>
        return;
 8000998:	e01b      	b.n	80009d2 <DCM_RDBI_ProcessRequest+0x54>
    }
    
    // Extract Data Identifier from request
    uint16_t data_identifier = (request_data[1] << 8) | request_data[2];
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3301      	adds	r3, #1
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	021b      	lsls	r3, r3, #8
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3302      	adds	r3, #2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	81fb      	strh	r3, [r7, #14]
    
    // Process based on Data Identifier
    switch (data_identifier) {
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	f240 1223 	movw	r2, #291	@ 0x123
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d104      	bne.n	80009c8 <DCM_RDBI_ProcessRequest+0x4a>
        case DCM_DID_CANID_VALUE:
            DCM_RDBI_ReadCANIDValue(data_identifier);
 80009be:	89fb      	ldrh	r3, [r7, #14]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f809 	bl	80009d8 <DCM_RDBI_ReadCANIDValue>
            break;
 80009c6:	e004      	b.n	80009d2 <DCM_RDBI_ProcessRequest+0x54>
            
        default:
            // DID not supported
            DCM_SendNegativeResponse(DCM_SID_READ_DATA_BY_ID, DCM_NRC_REQUEST_OUT_OF_RANGE);
 80009c8:	2131      	movs	r1, #49	@ 0x31
 80009ca:	2022      	movs	r0, #34	@ 0x22
 80009cc:	f7ff fe9e 	bl	800070c <DCM_SendNegativeResponse>
            break;
 80009d0:	bf00      	nop
    }
}
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <DCM_RDBI_ReadCANIDValue>:
/**
 * @brief Read CAN ID Value from tester (DID: 0x0123)
 * @param data_identifier: Data Identifier
 */
void DCM_RDBI_ReadCANIDValue(uint16_t data_identifier)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]
    uint8_t response_data[5];
    
    // Prepare positive response
    response_data[0] = DCM_SID_READ_DATA_BY_ID_RESP; // 0x62
 80009e2:	2362      	movs	r3, #98	@ 0x62
 80009e4:	723b      	strb	r3, [r7, #8]
    response_data[1] = (data_identifier >> 8) & 0xFF; // DID High Byte
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	727b      	strb	r3, [r7, #9]
    response_data[2] = data_identifier & 0xFF;         // DID Low Byte
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	72bb      	strb	r3, [r7, #10]
    
    // Get CAN ID value from last received CAN message from tester (CAN1)
    // According to requirement: "Read CANID Value From Tester"
    response_data[3] = (CAN1_pHeaderRx.StdId >> 8) & 0xFF;  // CAN ID High Byte
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <DCM_RDBI_ReadCANIDValue+0x44>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	0a1b      	lsrs	r3, r3, #8
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	72fb      	strb	r3, [r7, #11]
    response_data[4] = CAN1_pHeaderRx.StdId & 0xFF;          // CAN ID Low Byte
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <DCM_RDBI_ReadCANIDValue+0x44>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	733b      	strb	r3, [r7, #12]
    
    // Send positive response
    DCM_SendResponse(response_data, 5);
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe2c 	bl	800066c <DCM_SendResponse>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001c8 	.word	0x200001c8

08000a20 <DCM_SECA_ProcessRequest>:
 * @brief Process SecurityAccess (0x27) service request
 * @param request_data: Pointer to request data
 * @param length: Length of request data
 */
void DCM_SECA_ProcessRequest(uint8_t* request_data, uint16_t length)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
    // Check minimum length (SID + Level = 2 bytes for seed request)
    if (length < 2) {
 8000a2c:	887b      	ldrh	r3, [r7, #2]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d804      	bhi.n	8000a3c <DCM_SECA_ProcessRequest+0x1c>
        DCM_SendNegativeResponse(DCM_SID_SECURITY_ACCESS, DCM_NRC_INVALID_LENGTH);
 8000a32:	2113      	movs	r1, #19
 8000a34:	2027      	movs	r0, #39	@ 0x27
 8000a36:	f7ff fe69 	bl	800070c <DCM_SendNegativeResponse>
        return;
 8000a3a:	e027      	b.n	8000a8c <DCM_SECA_ProcessRequest+0x6c>
    }
    
    uint8_t security_level = request_data[1];
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	785b      	ldrb	r3, [r3, #1]
 8000a40:	73fb      	strb	r3, [r7, #15]
    
    // Handle based on security level
    if (security_level == DCM_SECA_LEVEL1_SEED) {
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10c      	bne.n	8000a62 <DCM_SECA_ProcessRequest+0x42>
        // Request seed for level 1
        if (length != 2) {
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d004      	beq.n	8000a58 <DCM_SECA_ProcessRequest+0x38>
            DCM_SendNegativeResponse(DCM_SID_SECURITY_ACCESS, DCM_NRC_INVALID_LENGTH);
 8000a4e:	2113      	movs	r1, #19
 8000a50:	2027      	movs	r0, #39	@ 0x27
 8000a52:	f7ff fe5b 	bl	800070c <DCM_SendNegativeResponse>
            return;
 8000a56:	e019      	b.n	8000a8c <DCM_SECA_ProcessRequest+0x6c>
        }
        DCM_SECA_RequestSeed(security_level);
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f81a 	bl	8000a94 <DCM_SECA_RequestSeed>
 8000a60:	e014      	b.n	8000a8c <DCM_SECA_ProcessRequest+0x6c>
    }
    else if (security_level == DCM_SECA_LEVEL1_KEY) {
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d10d      	bne.n	8000a84 <DCM_SECA_ProcessRequest+0x64>
        // Send key for level 1
        if (length != 8) { // SID + Level + 6 key bytes
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	d004      	beq.n	8000a78 <DCM_SECA_ProcessRequest+0x58>
            DCM_SendNegativeResponse(DCM_SID_SECURITY_ACCESS, DCM_NRC_INVALID_LENGTH);
 8000a6e:	2113      	movs	r1, #19
 8000a70:	2027      	movs	r0, #39	@ 0x27
 8000a72:	f7ff fe4b 	bl	800070c <DCM_SendNegativeResponse>
            return;
 8000a76:	e009      	b.n	8000a8c <DCM_SECA_ProcessRequest+0x6c>
        }
        DCM_SECA_SendKey(request_data, length);
 8000a78:	887b      	ldrh	r3, [r7, #2]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 f833 	bl	8000ae8 <DCM_SECA_SendKey>
 8000a82:	e003      	b.n	8000a8c <DCM_SECA_ProcessRequest+0x6c>
    }
    else {
        // Invalid security level
        DCM_SendNegativeResponse(DCM_SID_SECURITY_ACCESS, DCM_NRC_REQUEST_OUT_OF_RANGE);
 8000a84:	2131      	movs	r1, #49	@ 0x31
 8000a86:	2027      	movs	r0, #39	@ 0x27
 8000a88:	f7ff fe40 	bl	800070c <DCM_SendNegativeResponse>
    }
}
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <DCM_SECA_RequestSeed>:
/**
 * @brief Handle request seed (sub-function 0x01)
 * @param security_level: Security level (0x01)
 */
void DCM_SECA_RequestSeed(uint8_t security_level)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
    uint8_t response_data[8];
    
    // Generate new seed
    DCM_SECA_GenerateSeed();
 8000a9e:	f000 f86b 	bl	8000b78 <DCM_SECA_GenerateSeed>
    
    // Prepare positive response - Single Frame (8 bytes total)
    response_data[0] = DCM_SID_SECURITY_ACCESS_RESP; // 0x67
 8000aa2:	2367      	movs	r3, #103	@ 0x67
 8000aa4:	723b      	strb	r3, [r7, #8]
    response_data[1] = security_level;               // 0x01
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	727b      	strb	r3, [r7, #9]
    response_data[2] = DCM_CurrentSeed[0];           // SEED 0
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <DCM_SECA_RequestSeed+0x50>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	72bb      	strb	r3, [r7, #10]
    response_data[3] = DCM_CurrentSeed[1];           // SEED 1
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <DCM_SECA_RequestSeed+0x50>)
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	72fb      	strb	r3, [r7, #11]
    response_data[4] = DCM_CurrentSeed[2];           // SEED 2
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <DCM_SECA_RequestSeed+0x50>)
 8000ab8:	789b      	ldrb	r3, [r3, #2]
 8000aba:	733b      	strb	r3, [r7, #12]
    response_data[5] = DCM_CurrentSeed[3];           // SEED 3
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <DCM_SECA_RequestSeed+0x50>)
 8000abe:	78db      	ldrb	r3, [r3, #3]
 8000ac0:	737b      	strb	r3, [r7, #13]
    response_data[6] = DCM_CurrentSeed[4];           // SEED 4
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <DCM_SECA_RequestSeed+0x50>)
 8000ac4:	791b      	ldrb	r3, [r3, #4]
 8000ac6:	73bb      	strb	r3, [r7, #14]
    response_data[7] = DCM_CurrentSeed[5];           // SEED 5
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <DCM_SECA_RequestSeed+0x50>)
 8000aca:	795b      	ldrb	r3, [r3, #5]
 8000acc:	73fb      	strb	r3, [r7, #15]
    
    // Send positive response (exactly 8 bytes, no multiframe needed)
    DCM_SendResponse(response_data, 8);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fdc9 	bl	800066c <DCM_SendResponse>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000cc 	.word	0x200000cc

08000ae8 <DCM_SECA_SendKey>:
 * @brief Handle send key (sub-function 0x02)
 * @param request_data: Pointer to request data
 * @param length: Length of request data
 */
void DCM_SECA_SendKey(uint8_t* request_data, uint16_t length)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	807b      	strh	r3, [r7, #2]
    uint8_t received_key[6];
    uint8_t response_data[2];
    
    // Extract key from request
    received_key[0] = request_data[2]; // KEY 0
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	743b      	strb	r3, [r7, #16]
    received_key[1] = request_data[3]; // KEY 1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	78db      	ldrb	r3, [r3, #3]
 8000afe:	747b      	strb	r3, [r7, #17]
    received_key[2] = request_data[4]; // KEY 2
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	74bb      	strb	r3, [r7, #18]
    received_key[3] = request_data[5]; // KEY 3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	795b      	ldrb	r3, [r3, #5]
 8000b0a:	74fb      	strb	r3, [r7, #19]
    received_key[4] = request_data[6]; // KEY 4
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	799b      	ldrb	r3, [r3, #6]
 8000b10:	753b      	strb	r3, [r7, #20]
    received_key[5] = request_data[7]; // KEY 5
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	79db      	ldrb	r3, [r3, #7]
 8000b16:	757b      	strb	r3, [r7, #21]
    
    // Validate key
    if (DCM_SECA_ValidateKey(received_key)) {
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f84b 	bl	8000bb8 <DCM_SECA_ValidateKey>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d018      	beq.n	8000b5a <DCM_SECA_SendKey+0x72>
        // Key is valid - unlock security
        DCM_SecurityLevel1_Unlocked = 1;
 8000b28:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <DCM_SECA_SendKey+0x84>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
        DCM_SecurityUnlockTimestamp = HAL_GetTick();
 8000b2e:	f001 fc81 	bl	8002434 <HAL_GetTick>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <DCM_SECA_SendKey+0x88>)
 8000b36:	6013      	str	r3, [r2, #0]
        
        // Turn on LED (PB0) to indicate security unlock
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <DCM_SECA_SendKey+0x8c>)
 8000b3e:	f002 fe6d 	bl	800381c <HAL_GPIO_WritePin>
        
        // Send positive response
        response_data[0] = DCM_SID_SECURITY_ACCESS_RESP; // 0x67
 8000b42:	2367      	movs	r3, #103	@ 0x67
 8000b44:	733b      	strb	r3, [r7, #12]
        response_data[1] = request_data[1];              // Echo level (0x02)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	785b      	ldrb	r3, [r3, #1]
 8000b4a:	737b      	strb	r3, [r7, #13]
        
        DCM_SendResponse(response_data, 2);
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fd8a 	bl	800066c <DCM_SendResponse>
        DCM_SendNegativeResponse(DCM_SID_SECURITY_ACCESS, DCM_NRC_INVALID_KEY);
        
        // TODO: Implement 10s delay before processing next seed request
        // For now, we'll just send the NRC
    }
}
 8000b58:	e003      	b.n	8000b62 <DCM_SECA_SendKey+0x7a>
        DCM_SendNegativeResponse(DCM_SID_SECURITY_ACCESS, DCM_NRC_INVALID_KEY);
 8000b5a:	2135      	movs	r1, #53	@ 0x35
 8000b5c:	2027      	movs	r0, #39	@ 0x27
 8000b5e:	f7ff fdd5 	bl	800070c <DCM_SendNegativeResponse>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000c4 	.word	0x200000c4
 8000b70:	200000c8 	.word	0x200000c8
 8000b74:	40020400 	.word	0x40020400

08000b78 <DCM_SECA_GenerateSeed>:
/**
 * @brief Generate seed for security access
 * Uses predefined test values for consistent testing
 */
void DCM_SECA_GenerateSeed(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
    // Use predefined seed values for testing
    // SEED: [0xA3, 0x5C, 0x91, 0x2F, 0x84, 0x67]
    for (int i = 0; i < 6; i++) {
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	e00b      	b.n	8000b9c <DCM_SECA_GenerateSeed+0x24>
        DCM_CurrentSeed[i] = TEST_SEED_VALUES[i];
 8000b84:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <DCM_SECA_GenerateSeed+0x38>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	7819      	ldrb	r1, [r3, #0]
 8000b8c:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <DCM_SECA_GenerateSeed+0x3c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	460a      	mov	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	ddf0      	ble.n	8000b84 <DCM_SECA_GenerateSeed+0xc>
    DCM_CurrentSeed[2] = (seed_value1 >> 8) & 0xFF;
    DCM_CurrentSeed[3] = seed_value1 & 0xFF;
    DCM_CurrentSeed[4] = (seed_value2 >> 8) & 0xFF;
    DCM_CurrentSeed[5] = seed_value2 & 0xFF;
    */
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000044 	.word	0x20000044
 8000bb4:	200000cc 	.word	0x200000cc

08000bb8 <DCM_SECA_ValidateKey>:
 * @brief Validate received key against expected key
 * @param received_key: Pointer to received key (6 bytes)
 * @return 1 if valid, 0 if invalid
 */
uint8_t DCM_SECA_ValidateKey(uint8_t* received_key)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    uint8_t expected_key[6];
    
    // Calculate expected key using algorithm
    DCM_SECA_CalculateKey(DCM_CurrentSeed, expected_key);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480f      	ldr	r0, [pc, #60]	@ (8000c04 <DCM_SECA_ValidateKey+0x4c>)
 8000bc8:	f000 f81e 	bl	8000c08 <DCM_SECA_CalculateKey>
    
    // Compare received key with expected key
    for (int i = 0; i < 6; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00f      	b.n	8000bf2 <DCM_SECA_ValidateKey+0x3a>
        if (received_key[i] != expected_key[i]) {
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	f107 010c 	add.w	r1, r7, #12
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	440b      	add	r3, r1
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d001      	beq.n	8000bec <DCM_SECA_ValidateKey+0x34>
            return 0; // Invalid key
 8000be8:	2300      	movs	r3, #0
 8000bea:	e006      	b.n	8000bfa <DCM_SECA_ValidateKey+0x42>
    for (int i = 0; i < 6; i++) {
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	ddec      	ble.n	8000bd2 <DCM_SECA_ValidateKey+0x1a>
        }
    }
    
    return 1; // Valid key
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000cc 	.word	0x200000cc

08000c08 <DCM_SECA_CalculateKey>:
 * KEY-3 = SEED-3 + SEED-0
 * KEY-4 = SEED-4 AND 0xF0
 * KEY-5 = SEED-5 AND 0x0F
 */
void DCM_SECA_CalculateKey(uint8_t* seed, uint8_t* key)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
    key[0] = seed[0] ^ seed[1];         // KEY-0 = SEED-0 XOR SEED-1
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4053      	eors	r3, r2
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	701a      	strb	r2, [r3, #0]
    key[1] = seed[1] + seed[2];         // KEY-1 = SEED-1 + SEED-2
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3301      	adds	r3, #1
 8000c28:	7819      	ldrb	r1, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	440a      	add	r2, r1
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	701a      	strb	r2, [r3, #0]
    key[2] = seed[2] ^ seed[3];         // KEY-2 = SEED-2 XOR SEED-3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	7819      	ldrb	r1, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3303      	adds	r3, #3
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	404a      	eors	r2, r1
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	701a      	strb	r2, [r3, #0]
    key[3] = seed[3] + seed[0];         // KEY-3 = SEED-3 + SEED-0
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3303      	adds	r3, #3
 8000c54:	7819      	ldrb	r1, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	440a      	add	r2, r1
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	701a      	strb	r2, [r3, #0]
    key[4] = seed[4] & 0xF0;            // KEY-4 = SEED-4 AND 0xF0
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3304      	adds	r3, #4
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	f022 020f 	bic.w	r2, r2, #15
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	701a      	strb	r2, [r3, #0]
    key[5] = seed[5] & 0x0F;            // KEY-5 = SEED-5 AND 0x0F
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3305      	adds	r3, #5
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	3305      	adds	r3, #5
 8000c80:	f002 020f 	and.w	r2, r2, #15
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	701a      	strb	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DCM_WDBI_ProcessRequest>:
 * @brief Process WriteDataByIdentifier (0x2E) service request
 * @param request_data: Pointer to request data
 * @param length: Length of request data
 */
void DCM_WDBI_ProcessRequest(uint8_t* request_data, uint16_t length)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
    // Check minimum length (SID + DID_High + DID_Low + 2 data bytes = 5 bytes minimum)
    if (length < 5) {
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d804      	bhi.n	8000cb0 <DCM_WDBI_ProcessRequest+0x1c>
        DCM_SendNegativeResponse(DCM_SID_WRITE_DATA_BY_ID, DCM_NRC_INVALID_LENGTH);
 8000ca6:	2113      	movs	r1, #19
 8000ca8:	202e      	movs	r0, #46	@ 0x2e
 8000caa:	f7ff fd2f 	bl	800070c <DCM_SendNegativeResponse>
        return;
 8000cae:	e030      	b.n	8000d12 <DCM_WDBI_ProcessRequest+0x7e>
    }
    
    // Check if security access is required and granted
    if (!DCM_IsSecurityLevel1Unlocked()) {
 8000cb0:	f7ff fd64 	bl	800077c <DCM_IsSecurityLevel1Unlocked>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d104      	bne.n	8000cc4 <DCM_WDBI_ProcessRequest+0x30>
        DCM_SendNegativeResponse(DCM_SID_WRITE_DATA_BY_ID, DCM_NRC_SECURITY_ACCESS_DENIED);
 8000cba:	2133      	movs	r1, #51	@ 0x33
 8000cbc:	202e      	movs	r0, #46	@ 0x2e
 8000cbe:	f7ff fd25 	bl	800070c <DCM_SendNegativeResponse>
        return;
 8000cc2:	e026      	b.n	8000d12 <DCM_WDBI_ProcessRequest+0x7e>
    }
    
    // Extract Data Identifier from request
    uint16_t data_identifier = (request_data[1] << 8) | request_data[2];
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	81fb      	strh	r3, [r7, #14]
    
    // Process based on Data Identifier
    switch (data_identifier) {
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	f240 1223 	movw	r2, #291	@ 0x123
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d10f      	bne.n	8000d08 <DCM_WDBI_ProcessRequest+0x74>
        case DCM_DID_CANID_VALUE:
            if (length == 5) { // SID + DID + 2 CAN ID bytes
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d107      	bne.n	8000cfe <DCM_WDBI_ProcessRequest+0x6a>
                DCM_WDBI_WriteCANIDValue(data_identifier, &request_data[3]);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	1cda      	adds	r2, r3, #3
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f80e 	bl	8000d18 <DCM_WDBI_WriteCANIDValue>
            } else {
                DCM_SendNegativeResponse(DCM_SID_WRITE_DATA_BY_ID, DCM_NRC_INVALID_LENGTH);
            }
            break;
 8000cfc:	e009      	b.n	8000d12 <DCM_WDBI_ProcessRequest+0x7e>
                DCM_SendNegativeResponse(DCM_SID_WRITE_DATA_BY_ID, DCM_NRC_INVALID_LENGTH);
 8000cfe:	2113      	movs	r1, #19
 8000d00:	202e      	movs	r0, #46	@ 0x2e
 8000d02:	f7ff fd03 	bl	800070c <DCM_SendNegativeResponse>
            break;
 8000d06:	e004      	b.n	8000d12 <DCM_WDBI_ProcessRequest+0x7e>
            
        default:
            // DID not supported
            DCM_SendNegativeResponse(DCM_SID_WRITE_DATA_BY_ID, DCM_NRC_REQUEST_OUT_OF_RANGE);
 8000d08:	2131      	movs	r1, #49	@ 0x31
 8000d0a:	202e      	movs	r0, #46	@ 0x2e
 8000d0c:	f7ff fcfe 	bl	800070c <DCM_SendNegativeResponse>
            break;
 8000d10:	bf00      	nop
    }
}
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <DCM_WDBI_WriteCANIDValue>:
 * @brief Write CAN ID Value from tester (DID: 0x0123)
 * @param data_identifier: Data Identifier
 * @param write_data: Pointer to write data (2 bytes for CAN ID)
 */
void DCM_WDBI_WriteCANIDValue(uint16_t data_identifier, uint8_t* write_data)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	80fb      	strh	r3, [r7, #6]
    uint8_t response_data[1];
    
    // Extract new CAN ID from write data
    uint16_t new_can_id = (write_data[0] << 8) | write_data[1];
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	81fb      	strh	r3, [r7, #14]
    
    // Store new CAN ID (will be applied after ignition cycle)
    DCM_StoredCANID = new_can_id;
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <DCM_WDBI_WriteCANIDValue+0x44>)
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	8013      	strh	r3, [r2, #0]
    
    // Prepare positive response (only SID, no additional data)
    response_data[0] = DCM_SID_WRITE_DATA_BY_ID_RESP; // 0x6E
 8000d42:	236e      	movs	r3, #110	@ 0x6e
 8000d44:	733b      	strb	r3, [r7, #12]
    
    // Send positive response
    DCM_SendResponse(response_data, 1);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fc8d 	bl	800066c <DCM_SendResponse>
    
    // Note: The new CAN ID will be applied after ignition cycle (User Button press)
    // This is handled in the main loop when BtnU is pressed
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000000 	.word	0x20000000

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f001 fb00 	bl	8002368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f8ea 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f000 f9e8 	bl	8001140 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d70:	f000 f950 	bl	8001014 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d74:	f000 f984 	bl	8001080 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000d78:	f000 f9b8 	bl	80010ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 8000d7c:	f000 fa70 	bl	8001260 <MX_CAN1_Setup>
  MX_CAN2_Setup();
 8000d80:	f000 faa2 	bl	80012c8 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000d84:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef8 <main+0x198>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef8 <main+0x198>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	60da      	str	r2, [r3, #12]
  
  // Start UART receive interrupt
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	4959      	ldr	r1, [pc, #356]	@ (8000efc <main+0x19c>)
 8000d98:	4857      	ldr	r0, [pc, #348]	@ (8000ef8 <main+0x198>)
 8000d9a:	f003 faf4 	bl	8004386 <HAL_UART_Receive_IT>
  
  // Initialize CAN headers for testing
  CAN1_pHeader.StdId = 0x123;  // Test CAN ID
 8000d9e:	4b58      	ldr	r3, [pc, #352]	@ (8000f00 <main+0x1a0>)
 8000da0:	f240 1223 	movw	r2, #291	@ 0x123
 8000da4:	601a      	str	r2, [r3, #0]
  CAN1_pHeader.DLC = 8;
 8000da6:	4b56      	ldr	r3, [pc, #344]	@ (8000f00 <main+0x1a0>)
 8000da8:	2208      	movs	r2, #8
 8000daa:	611a      	str	r2, [r3, #16]
  CAN1_DATA_TX[0] = 0x01; CAN1_DATA_TX[1] = 0x02; CAN1_DATA_TX[2] = 0x03; CAN1_DATA_TX[3] = 0x04;
 8000dac:	4b55      	ldr	r3, [pc, #340]	@ (8000f04 <main+0x1a4>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	4b54      	ldr	r3, [pc, #336]	@ (8000f04 <main+0x1a4>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	705a      	strb	r2, [r3, #1]
 8000db8:	4b52      	ldr	r3, [pc, #328]	@ (8000f04 <main+0x1a4>)
 8000dba:	2203      	movs	r2, #3
 8000dbc:	709a      	strb	r2, [r3, #2]
 8000dbe:	4b51      	ldr	r3, [pc, #324]	@ (8000f04 <main+0x1a4>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	70da      	strb	r2, [r3, #3]
  CAN1_DATA_TX[4] = 0x05; CAN1_DATA_TX[5] = 0x06; CAN1_DATA_TX[6] = 0x07; CAN1_DATA_TX[7] = 0x08;
 8000dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f04 <main+0x1a4>)
 8000dc6:	2205      	movs	r2, #5
 8000dc8:	711a      	strb	r2, [r3, #4]
 8000dca:	4b4e      	ldr	r3, [pc, #312]	@ (8000f04 <main+0x1a4>)
 8000dcc:	2206      	movs	r2, #6
 8000dce:	715a      	strb	r2, [r3, #5]
 8000dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000f04 <main+0x1a4>)
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	719a      	strb	r2, [r3, #6]
 8000dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8000f04 <main+0x1a4>)
 8000dd8:	2208      	movs	r2, #8
 8000dda:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Send startup message
  USART3_SendString((uint8_t *)"STM32 CAN Diagnostic Demo Started\n");
 8000ddc:	484a      	ldr	r0, [pc, #296]	@ (8000f08 <main+0x1a8>)
 8000dde:	f000 faa1 	bl	8001324 <USART3_SendString>
  USART3_SendString((uint8_t *)"=================================\n");
 8000de2:	484a      	ldr	r0, [pc, #296]	@ (8000f0c <main+0x1ac>)
 8000de4:	f000 fa9e 	bl	8001324 <USART3_SendString>
  
  // Print initial menu
  PrintManualTestMenu();
 8000de8:	f000 fbe0 	bl	80015ac <PrintManualTestMenu>
  
  // Example Function to print can message via uart
  PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
 8000dec:	4b44      	ldr	r3, [pc, #272]	@ (8000f00 <main+0x1a0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4944      	ldr	r1, [pc, #272]	@ (8000f04 <main+0x1a4>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 faaf 	bl	8001358 <PrintCANLog>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // Update timestamp
    TimeStamp = HAL_GetTick();
 8000dfa:	f001 fb1b 	bl	8002434 <HAL_GetTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a43      	ldr	r2, [pc, #268]	@ (8000f10 <main+0x1b0>)
 8000e02:	6013      	str	r3, [r2, #0]
    
    // Manage DCM security timeout
    DCM_ManageSecurityTimeout();
 8000e04:	f7ff fc9a 	bl	800073c <DCM_ManageSecurityTimeout>

    // Process manual commands received via UART
    if (REQ_1BYTE_DATA != 0) {
 8000e08:	4b3c      	ldr	r3, [pc, #240]	@ (8000efc <main+0x19c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d007      	beq.n	8000e20 <main+0xc0>
        ProcessManualCommand(REQ_1BYTE_DATA);
 8000e10:	4b3a      	ldr	r3, [pc, #232]	@ (8000efc <main+0x19c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fc29 	bl	800166c <ProcessManualCommand>
        REQ_1BYTE_DATA = 0; // Clear command
 8000e1a:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <main+0x19c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
    }

    if(!BtnU) /*IG OFF->ON stimulation*/
 8000e20:	2102      	movs	r1, #2
 8000e22:	483c      	ldr	r0, [pc, #240]	@ (8000f14 <main+0x1b4>)
 8000e24:	f002 fce2 	bl	80037ec <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d125      	bne.n	8000e7a <main+0x11a>
    {
      delay(20);
 8000e2e:	2014      	movs	r0, #20
 8000e30:	f000 fb44 	bl	80014bc <delay>
      USART3_SendString((uint8_t *)"IG OFF ");
 8000e34:	4838      	ldr	r0, [pc, #224]	@ (8000f18 <main+0x1b8>)
 8000e36:	f000 fa75 	bl	8001324 <USART3_SendString>
      while(!BtnU);
 8000e3a:	bf00      	nop
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4835      	ldr	r0, [pc, #212]	@ (8000f14 <main+0x1b4>)
 8000e40:	f002 fcd4 	bl	80037ec <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f8      	beq.n	8000e3c <main+0xdc>
      
      // Apply new CAN ID if it was written via WriteDataByIdentifier
      extern uint16_t DCM_StoredCANID;
      if (DCM_StoredCANID != DCM_REQUEST_CAN_ID) {
 8000e4a:	4b34      	ldr	r3, [pc, #208]	@ (8000f1c <main+0x1bc>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	f240 7212 	movw	r2, #1810	@ 0x712
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <main+0x106>
          // Update CAN filter to new CAN ID
          CAN1_sFilterConfig.FilterIdHigh = DCM_StoredCANID << 5;
 8000e56:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <main+0x1bc>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	015b      	lsls	r3, r3, #5
 8000e5c:	4a30      	ldr	r2, [pc, #192]	@ (8000f20 <main+0x1c0>)
 8000e5e:	6013      	str	r3, [r2, #0]
          USART3_SendString((uint8_t *)"New CAN ID Applied ");
 8000e60:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x1c4>)
 8000e62:	f000 fa5f 	bl	8001324 <USART3_SendString>
      }
      
      MX_CAN1_Setup();
 8000e66:	f000 f9fb 	bl	8001260 <MX_CAN1_Setup>
      MX_CAN2_Setup();
 8000e6a:	f000 fa2d 	bl	80012c8 <MX_CAN2_Setup>
      USART3_SendString((uint8_t *)"-> IG ON \n");
 8000e6e:	482e      	ldr	r0, [pc, #184]	@ (8000f28 <main+0x1c8>)
 8000e70:	f000 fa58 	bl	8001324 <USART3_SendString>
      delay(20);
 8000e74:	2014      	movs	r0, #20
 8000e76:	f000 fb21 	bl	80014bc <delay>
    }
    
    // Send periodic heartbeat message every 10 seconds (only in auto mode)
    static uint32_t lastHeartbeat = 0;
    if (AUTO_TEST_ENABLED && (HAL_GetTick() - lastHeartbeat > 10000)) {
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f2c <main+0x1cc>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d01e      	beq.n	8000ec0 <main+0x160>
 8000e82:	f001 fad7 	bl	8002434 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <main+0x1d0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d914      	bls.n	8000ec0 <main+0x160>
        lastHeartbeat = HAL_GetTick();
 8000e96:	f001 facd 	bl	8002434 <HAL_GetTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a24      	ldr	r2, [pc, #144]	@ (8000f30 <main+0x1d0>)
 8000e9e:	6013      	str	r3, [r2, #0]
        USART3_SendString((uint8_t *)"Heartbeat: Auto mode running\n");
 8000ea0:	4824      	ldr	r0, [pc, #144]	@ (8000f34 <main+0x1d4>)
 8000ea2:	f000 fa3f 	bl	8001324 <USART3_SendString>
        
        // Update test data and send
        CAN1_DATA_TX[0]++;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <main+0x1a4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <main+0x1a4>)
 8000eb0:	701a      	strb	r2, [r3, #0]
        if (CAN1_DATA_TX[0] > 0xFF) CAN1_DATA_TX[0] = 0;
        PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <main+0x1a0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4912      	ldr	r1, [pc, #72]	@ (8000f04 <main+0x1a4>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fa4c 	bl	8001358 <PrintCANLog>
    }
    
    // Auto test practice messages every 15 seconds (only if enabled)
    static uint32_t lastPracticeTest = 0;
    if (AUTO_TEST_ENABLED && (HAL_GetTick() - lastPracticeTest > 15000)) {
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <main+0x1cc>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d013      	beq.n	8000ef0 <main+0x190>
 8000ec8:	f001 fab4 	bl	8002434 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <main+0x1d8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d909      	bls.n	8000ef0 <main+0x190>
        lastPracticeTest = HAL_GetTick();
 8000edc:	f001 faaa 	bl	8002434 <HAL_GetTick>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a15      	ldr	r2, [pc, #84]	@ (8000f38 <main+0x1d8>)
 8000ee4:	6013      	str	r3, [r2, #0]
        USART3_SendString((uint8_t *)"\n>>> AUTO TEST SEQUENCE <<<\n");
 8000ee6:	4815      	ldr	r0, [pc, #84]	@ (8000f3c <main+0x1dc>)
 8000ee8:	f000 fa1c 	bl	8001324 <USART3_SendString>
        TestPracticeMessages();
 8000eec:	f000 faf4 	bl	80014d8 <TestPracticeMessages>
    }
    
    delay(50); // Small delay to prevent CPU overload
 8000ef0:	2032      	movs	r0, #50	@ 0x32
 8000ef2:	f000 fae3 	bl	80014bc <delay>
  {
 8000ef6:	e780      	b.n	8000dfa <main+0x9a>
 8000ef8:	2000016c 	.word	0x2000016c
 8000efc:	20001270 	.word	0x20001270
 8000f00:	200001b0 	.word	0x200001b0
 8000f04:	20001274 	.word	0x20001274
 8000f08:	08005c10 	.word	0x08005c10
 8000f0c:	08005c34 	.word	0x08005c34
 8000f10:	20001294 	.word	0x20001294
 8000f14:	40020000 	.word	0x40020000
 8000f18:	08005c58 	.word	0x08005c58
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	200001e4 	.word	0x200001e4
 8000f24:	08005c60 	.word	0x08005c60
 8000f28:	08005c74 	.word	0x08005c74
 8000f2c:	20001298 	.word	0x20001298
 8000f30:	200012c4 	.word	0x200012c4
 8000f34:	08005c80 	.word	0x08005c80
 8000f38:	200012c8 	.word	0x200012c8
 8000f3c:	08005ca0 	.word	0x08005ca0

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	@ 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	@ 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f004 f9d4 	bl	80052fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a27      	ldr	r2, [pc, #156]	@ (800100c <SystemClock_Config+0xcc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f74:	4b25      	ldr	r3, [pc, #148]	@ (800100c <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <SystemClock_Config+0xd0>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fb4:	23a8      	movs	r3, #168	@ 0xa8
 8000fb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fc67 	bl	8003898 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd0:	f000 ff9e 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fe4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 fec8 	bl	8003d88 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ffe:	f000 ff87 	bl	8001f10 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	@ 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_CAN1_Init+0x64>)
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <MX_CAN1_Init+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <MX_CAN1_Init+0x64>)
 8001020:	2215      	movs	r2, #21
 8001022:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_CAN1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <MX_CAN1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_CAN1_Init+0x64>)
 8001032:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8001036:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_CAN1_Init+0x64>)
 800103a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800103e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <MX_CAN1_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_CAN1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_CAN1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_CAN1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_CAN1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_CAN1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_CAN1_Init+0x64>)
 8001066:	f001 fa15 	bl	8002494 <HAL_CAN_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001070:	f000 ff4e 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000011c 	.word	0x2000011c
 800107c:	40006400 	.word	0x40006400

08001080 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_CAN2_Init+0x64>)
 8001086:	4a18      	ldr	r2, [pc, #96]	@ (80010e8 <MX_CAN2_Init+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <MX_CAN2_Init+0x64>)
 800108c:	2215      	movs	r2, #21
 800108e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_CAN2_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <MX_CAN2_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_CAN2_Init+0x64>)
 800109e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80010a2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_CAN2_Init+0x64>)
 80010a6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80010aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <MX_CAN2_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_CAN2_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <MX_CAN2_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_CAN2_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <MX_CAN2_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_CAN2_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_CAN2_Init+0x64>)
 80010d2:	f001 f9df 	bl	8002494 <HAL_CAN_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80010dc:	f000 ff18 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000144 	.word	0x20000144
 80010e8:	40006800 	.word	0x40006800

080010ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	@ (800113c <MX_USART3_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_USART3_UART_Init+0x4c>)
 8001124:	f003 f850 	bl	80041c8 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 feef 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000016c 	.word	0x2000016c
 800113c:	40004800 	.word	0x40004800

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <MX_GPIO_Init+0x110>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a3c      	ldr	r2, [pc, #240]	@ (8001250 <MX_GPIO_Init+0x110>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b3a      	ldr	r3, [pc, #232]	@ (8001250 <MX_GPIO_Init+0x110>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b36      	ldr	r3, [pc, #216]	@ (8001250 <MX_GPIO_Init+0x110>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a35      	ldr	r2, [pc, #212]	@ (8001250 <MX_GPIO_Init+0x110>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b33      	ldr	r3, [pc, #204]	@ (8001250 <MX_GPIO_Init+0x110>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b2f      	ldr	r3, [pc, #188]	@ (8001250 <MX_GPIO_Init+0x110>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a2e      	ldr	r2, [pc, #184]	@ (8001250 <MX_GPIO_Init+0x110>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <MX_GPIO_Init+0x110>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <MX_GPIO_Init+0x110>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <MX_GPIO_Init+0x110>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <MX_GPIO_Init+0x110>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80011c6:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 80011ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	481e      	ldr	r0, [pc, #120]	@ (8001254 <MX_GPIO_Init+0x114>)
 80011dc:	f002 f96a 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4818      	ldr	r0, [pc, #96]	@ (8001258 <MX_GPIO_Init+0x118>)
 80011f6:	f002 f95d 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011fa:	2302      	movs	r3, #2
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4812      	ldr	r0, [pc, #72]	@ (8001258 <MX_GPIO_Init+0x118>)
 800120e:	f002 f951 	bl	80034b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001212:	2301      	movs	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	@ (800125c <MX_GPIO_Init+0x11c>)
 800122a:	f002 f943 	bl	80034b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	480a      	ldr	r0, [pc, #40]	@ (800125c <MX_GPIO_Init+0x11c>)
 8001234:	f002 faf2 	bl	800381c <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2101      	movs	r1, #1
 800123c:	2006      	movs	r0, #6
 800123e:	f002 f870 	bl	8003322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001242:	2006      	movs	r0, #6
 8001244:	f002 f889 	bl	800335a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40020800 	.word	0x40020800
 8001258:	40020000 	.word	0x40020000
 800125c:	40020400 	.word	0x40020400

08001260 <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	// Configure CAN1 filter for diagnostic request (0x712)
	CAN1_sFilterConfig.FilterIdHigh = DCM_REQUEST_CAN_ID << 5;    // 0x712 << 5
 8001264:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 8001266:	f24e 2240 	movw	r2, #57920	@ 0xe240
 800126a:	601a      	str	r2, [r3, #0]
	CAN1_sFilterConfig.FilterIdLow = 0x0000;
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
	CAN1_sFilterConfig.FilterMaskIdHigh = 0xFFFF;                 // Accept only exact ID
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 8001274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001278:	609a      	str	r2, [r3, #8]
	CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
	CAN1_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
	CAN1_sFilterConfig.FilterBank = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
	CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
	CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 8001294:	2201      	movs	r2, #1
 8001296:	61da      	str	r2, [r3, #28]
	CAN1_sFilterConfig.FilterActivation = ENABLE;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 800129a:	2201      	movs	r2, #1
 800129c:	621a      	str	r2, [r3, #32]
	CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 80012a0:	220e      	movs	r2, #14
 80012a2:	625a      	str	r2, [r3, #36]	@ 0x24
	
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 80012a4:	4906      	ldr	r1, [pc, #24]	@ (80012c0 <MX_CAN1_Setup+0x60>)
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_CAN1_Setup+0x64>)
 80012a8:	f001 f9f0 	bl	800268c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_CAN1_Setup+0x64>)
 80012ae:	f001 facd 	bl	800284c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012b2:	2102      	movs	r1, #2
 80012b4:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_CAN1_Setup+0x64>)
 80012b6:	f001 fcfa 	bl	8002cae <HAL_CAN_ActivateNotification>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001e4 	.word	0x200001e4
 80012c4:	2000011c 	.word	0x2000011c

080012c8 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	// Configure CAN2 filter (for response transmission)
	CAN2_sFilterConfig.FilterIdHigh = 0x0000;
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
	CAN2_sFilterConfig.FilterIdLow = 0x0000;
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
	CAN2_sFilterConfig.FilterMaskIdHigh = 0x0000;
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
	CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
	CAN2_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
	CAN2_sFilterConfig.FilterBank = 14;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012ec:	220e      	movs	r2, #14
 80012ee:	615a      	str	r2, [r3, #20]
	CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
	CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	61da      	str	r2, [r3, #28]
	CAN2_sFilterConfig.FilterActivation = ENABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <MX_CAN2_Setup+0x54>)
 80012fe:	2201      	movs	r2, #1
 8001300:	621a      	str	r2, [r3, #32]
	
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8001302:	4906      	ldr	r1, [pc, #24]	@ (800131c <MX_CAN2_Setup+0x54>)
 8001304:	4806      	ldr	r0, [pc, #24]	@ (8001320 <MX_CAN2_Setup+0x58>)
 8001306:	f001 f9c1 	bl	800268c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_CAN2_Setup+0x58>)
 800130c:	f001 fa9e 	bl	800284c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001310:	2102      	movs	r1, #2
 8001312:	4803      	ldr	r0, [pc, #12]	@ (8001320 <MX_CAN2_Setup+0x58>)
 8001314:	f001 fccb 	bl	8002cae <HAL_CAN_ActivateNotification>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000240 	.word	0x20000240
 8001320:	20000144 	.word	0x20000144

08001324 <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 800132c:	e009      	b.n	8001342 <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	2201      	movs	r2, #1
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4807      	ldr	r0, [pc, #28]	@ (8001354 <USART3_SendString+0x30>)
 8001338:	f002 ff93 	bl	8004262 <HAL_UART_Transmit>
      ch++;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3301      	adds	r3, #1
 8001340:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f1      	bne.n	800132e <USART3_SendString+0xa>
   }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000016c 	.word	0x2000016c

08001358 <PrintCANLog>:
void PrintCANLog(uint16_t CANID, uint8_t * CAN_Frame)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	80fb      	strh	r3, [r7, #6]
	uint16_t loopIndx = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	83fb      	strh	r3, [r7, #30]
	char bufID[6] = "     ";  // Increased size to handle up to 4 hex digits + null terminator
 8001368:	4a3a      	ldr	r2, [pc, #232]	@ (8001454 <PrintCANLog+0xfc>)
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001372:	6018      	str	r0, [r3, #0]
 8001374:	3304      	adds	r3, #4
 8001376:	8019      	strh	r1, [r3, #0]
	char bufDat[4] = "   ";   // Increased size to handle 2 hex digits + null terminator
 8001378:	4b37      	ldr	r3, [pc, #220]	@ (8001458 <PrintCANLog+0x100>)
 800137a:	617b      	str	r3, [r7, #20]
	char bufTime [8]="        ";
 800137c:	4a37      	ldr	r2, [pc, #220]	@ (800145c <PrintCANLog+0x104>)
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001386:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(bufTime,"%d",TimeStamp);
 800138a:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <PrintCANLog+0x108>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4934      	ldr	r1, [pc, #208]	@ (8001464 <PrintCANLog+0x10c>)
 8001394:	4618      	mov	r0, r3
 8001396:	f003 ff8f 	bl	80052b8 <siprintf>
	USART3_SendString((uint8_t*)bufTime);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffc0 	bl	8001324 <USART3_SendString>
	USART3_SendString((uint8_t*)" ");
 80013a4:	4830      	ldr	r0, [pc, #192]	@ (8001468 <PrintCANLog+0x110>)
 80013a6:	f7ff ffbd 	bl	8001324 <USART3_SendString>

	sprintf(bufID,"%X",CANID);
 80013aa:	88fa      	ldrh	r2, [r7, #6]
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	492e      	ldr	r1, [pc, #184]	@ (800146c <PrintCANLog+0x114>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 ff80 	bl	80052b8 <siprintf>
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	83fb      	strh	r3, [r7, #30]
 80013bc:	e00a      	b.n	80013d4 <PrintCANLog+0x7c>
	{
		bufsend[loopIndx]  = bufID[loopIndx];
 80013be:	8bfa      	ldrh	r2, [r7, #30]
 80013c0:	8bfb      	ldrh	r3, [r7, #30]
 80013c2:	3220      	adds	r2, #32
 80013c4:	443a      	add	r2, r7
 80013c6:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80013ca:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <PrintCANLog+0x118>)
 80013cc:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 80013ce:	8bfb      	ldrh	r3, [r7, #30]
 80013d0:	3301      	adds	r3, #1
 80013d2:	83fb      	strh	r3, [r7, #30]
 80013d4:	8bfb      	ldrh	r3, [r7, #30]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d9f1      	bls.n	80013be <PrintCANLog+0x66>
	}
	bufsend[3] = ':';
 80013da:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <PrintCANLog+0x118>)
 80013dc:	223a      	movs	r2, #58	@ 0x3a
 80013de:	70da      	strb	r2, [r3, #3]
	bufsend[4] = ' ';
 80013e0:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <PrintCANLog+0x118>)
 80013e2:	2220      	movs	r2, #32
 80013e4:	711a      	strb	r2, [r3, #4]


	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 80013e6:	2300      	movs	r3, #0
 80013e8:	83fb      	strh	r3, [r7, #30]
 80013ea:	e025      	b.n	8001438 <PrintCANLog+0xe0>
	{
		sprintf(bufDat,"%02X",CAN_Frame[loopIndx]);
 80013ec:	8bfb      	ldrh	r3, [r7, #30]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	491e      	ldr	r1, [pc, #120]	@ (8001474 <PrintCANLog+0x11c>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 ff5b 	bl	80052b8 <siprintf>
		bufsend[loopIndx*3 + 5] = bufDat[0];
 8001402:	8bfa      	ldrh	r2, [r7, #30]
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	3305      	adds	r3, #5
 800140c:	7d39      	ldrb	r1, [r7, #20]
 800140e:	4a18      	ldr	r2, [pc, #96]	@ (8001470 <PrintCANLog+0x118>)
 8001410:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 6] = bufDat[1];
 8001412:	8bfa      	ldrh	r2, [r7, #30]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	3306      	adds	r3, #6
 800141c:	7d79      	ldrb	r1, [r7, #21]
 800141e:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <PrintCANLog+0x118>)
 8001420:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 7] = ' ';
 8001422:	8bfa      	ldrh	r2, [r7, #30]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	3307      	adds	r3, #7
 800142c:	4a10      	ldr	r2, [pc, #64]	@ (8001470 <PrintCANLog+0x118>)
 800142e:	2120      	movs	r1, #32
 8001430:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8001432:	8bfb      	ldrh	r3, [r7, #30]
 8001434:	3301      	adds	r3, #1
 8001436:	83fb      	strh	r3, [r7, #30]
 8001438:	8bfb      	ldrh	r3, [r7, #30]
 800143a:	2b07      	cmp	r3, #7
 800143c:	d9d6      	bls.n	80013ec <PrintCANLog+0x94>
	}
	bufsend[29] = '\n';
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <PrintCANLog+0x118>)
 8001440:	220a      	movs	r2, #10
 8001442:	775a      	strb	r2, [r3, #29]
	USART3_SendString((unsigned char*)bufsend);
 8001444:	480a      	ldr	r0, [pc, #40]	@ (8001470 <PrintCANLog+0x118>)
 8001446:	f7ff ff6d 	bl	8001324 <USART3_SendString>
}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	08005cd4 	.word	0x08005cd4
 8001458:	00202020 	.word	0x00202020
 800145c:	08005cdc 	.word	0x08005cdc
 8001460:	20001294 	.word	0x20001294
 8001464:	08005cc0 	.word	0x08005cc0
 8001468:	08005cc4 	.word	0x08005cc4
 800146c:	08005cc8 	.word	0x08005cc8
 8001470:	20000004 	.word	0x20000004
 8001474:	08005ccc 	.word	0x08005ccc

08001478 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_UART_RxCpltCallback+0x34>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_UART_RxCpltCallback+0x38>)
 8001488:	7819      	ldrb	r1, [r3, #0]
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_UART_RxCpltCallback+0x3c>)
 800148c:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 800148e:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <HAL_UART_RxCpltCallback+0x34>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_UART_RxCpltCallback+0x34>)
 8001498:	801a      	strh	r2, [r3, #0]
	
	// Restart UART receive interrupt for next byte
	HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 800149a:	2201      	movs	r2, #1
 800149c:	4904      	ldr	r1, [pc, #16]	@ (80014b0 <HAL_UART_RxCpltCallback+0x38>)
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <HAL_UART_RxCpltCallback+0x40>)
 80014a0:	f002 ff71 	bl	8004386 <HAL_UART_Receive_IT>
	
	//REQ_BUFFER[7] = NumBytesReq;
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000026c 	.word	0x2000026c
 80014b0:	20001270 	.word	0x20001270
 80014b4:	20000270 	.word	0x20000270
 80014b8:	2000016c 	.word	0x2000016c

080014bc <delay>:
void delay(uint16_t delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 ffbf 	bl	800244c <HAL_Delay>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <TestPracticeMessages>:

/**
 * @brief Test all practice messages with predefined values
 */
void TestPracticeMessages()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    USART3_SendString((uint8_t *)"\n=== Testing Practice Messages ===\n");
 80014dc:	4817      	ldr	r0, [pc, #92]	@ (800153c <TestPracticeMessages+0x64>)
 80014de:	f7ff ff21 	bl	8001324 <USART3_SendString>
    
    // Practice 1: ReadDataByIdentifier
    SendTestMessage(TEST_RDBI_MSG, DCM_REQUEST_CAN_ID, "Practice 1: Read DID 0x0123");
 80014e2:	4a17      	ldr	r2, [pc, #92]	@ (8001540 <TestPracticeMessages+0x68>)
 80014e4:	f240 7112 	movw	r1, #1810	@ 0x712
 80014e8:	4816      	ldr	r0, [pc, #88]	@ (8001544 <TestPracticeMessages+0x6c>)
 80014ea:	f000 f83b 	bl	8001564 <SendTestMessage>
    delay(1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014f2:	f7ff ffe3 	bl	80014bc <delay>
    
    // Practice 2: SecurityAccess - Request SEED
    SendTestMessage(TEST_SECA_SEED_REQ, DCM_REQUEST_CAN_ID, "Practice 2: Request SEED Level 1");
 80014f6:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <TestPracticeMessages+0x70>)
 80014f8:	f240 7112 	movw	r1, #1810	@ 0x712
 80014fc:	4813      	ldr	r0, [pc, #76]	@ (800154c <TestPracticeMessages+0x74>)
 80014fe:	f000 f831 	bl	8001564 <SendTestMessage>
    delay(1000);
 8001502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001506:	f7ff ffd9 	bl	80014bc <delay>
    
    // Practice 2: SecurityAccess - Send KEY  
    SendTestMessage(TEST_SECA_KEY_SEND, DCM_REQUEST_CAN_ID, "Practice 2: Send KEY Level 2");
 800150a:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <TestPracticeMessages+0x78>)
 800150c:	f240 7112 	movw	r1, #1810	@ 0x712
 8001510:	4810      	ldr	r0, [pc, #64]	@ (8001554 <TestPracticeMessages+0x7c>)
 8001512:	f000 f827 	bl	8001564 <SendTestMessage>
    delay(1000);
 8001516:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800151a:	f7ff ffcf 	bl	80014bc <delay>
    
    // Practice 3: WriteDataByIdentifier (requires security unlock)
    SendTestMessage(TEST_WDBI_MSG, DCM_REQUEST_CAN_ID, "Practice 3: Write DID 0x0123 = 0x0456");
 800151e:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <TestPracticeMessages+0x80>)
 8001520:	f240 7112 	movw	r1, #1810	@ 0x712
 8001524:	480d      	ldr	r0, [pc, #52]	@ (800155c <TestPracticeMessages+0x84>)
 8001526:	f000 f81d 	bl	8001564 <SendTestMessage>
    delay(1000);
 800152a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800152e:	f7ff ffc5 	bl	80014bc <delay>
    
    USART3_SendString((uint8_t *)"=== Test Complete ===\n\n");
 8001532:	480b      	ldr	r0, [pc, #44]	@ (8001560 <TestPracticeMessages+0x88>)
 8001534:	f7ff fef6 	bl	8001324 <USART3_SendString>
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08005ce4 	.word	0x08005ce4
 8001540:	08005d08 	.word	0x08005d08
 8001544:	20000024 	.word	0x20000024
 8001548:	08005d24 	.word	0x08005d24
 800154c:	2000002c 	.word	0x2000002c
 8001550:	08005d48 	.word	0x08005d48
 8001554:	20000034 	.word	0x20000034
 8001558:	08005d68 	.word	0x08005d68
 800155c:	2000003c 	.word	0x2000003c
 8001560:	08005d90 	.word	0x08005d90

08001564 <SendTestMessage>:

/**
 * @brief Send a test message via CAN and log to UART
 */
void SendTestMessage(uint8_t* message, uint16_t canid, char* description)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	460b      	mov	r3, r1
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	817b      	strh	r3, [r7, #10]
    USART3_SendString((uint8_t *)description);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fed6 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"\n");
 8001578:	480b      	ldr	r0, [pc, #44]	@ (80015a8 <SendTestMessage+0x44>)
 800157a:	f7ff fed3 	bl	8001324 <USART3_SendString>
    
    // Print the message being sent
    PrintCANLog(canid, message);
 800157e:	897b      	ldrh	r3, [r7, #10]
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fee8 	bl	8001358 <PrintCANLog>
    
    // Actually process the message locally for testing
    DCM_ProcessRequest(message, message[0] + 1); // Length is first byte + 1
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	4619      	mov	r1, r3
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff f802 	bl	800059c <DCM_ProcessRequest>
    
    USART3_SendString((uint8_t *)"\n");
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <SendTestMessage+0x44>)
 800159a:	f7ff fec3 	bl	8001324 <USART3_SendString>
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	08005da8 	.word	0x08005da8

080015ac <PrintManualTestMenu>:

/**
 * @brief Print manual test menu to UART
 */
void PrintManualTestMenu()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    USART3_SendString((uint8_t *)"\n=========== MANUAL TEST MENU ===========\n");
 80015b0:	481c      	ldr	r0, [pc, #112]	@ (8001624 <PrintManualTestMenu+0x78>)
 80015b2:	f7ff feb7 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Mode: ");
 80015b6:	481c      	ldr	r0, [pc, #112]	@ (8001628 <PrintManualTestMenu+0x7c>)
 80015b8:	f7ff feb4 	bl	8001324 <USART3_SendString>
    if (MANUAL_TEST_MODE) {
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <PrintManualTestMenu+0x80>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <PrintManualTestMenu+0x20>
        USART3_SendString((uint8_t *)"MANUAL\n");
 80015c4:	481a      	ldr	r0, [pc, #104]	@ (8001630 <PrintManualTestMenu+0x84>)
 80015c6:	f7ff fead 	bl	8001324 <USART3_SendString>
 80015ca:	e002      	b.n	80015d2 <PrintManualTestMenu+0x26>
    } else {
        USART3_SendString((uint8_t *)"AUTO\n");
 80015cc:	4819      	ldr	r0, [pc, #100]	@ (8001634 <PrintManualTestMenu+0x88>)
 80015ce:	f7ff fea9 	bl	8001324 <USART3_SendString>
    }
    USART3_SendString((uint8_t *)"----------------------------------------\n");
 80015d2:	4819      	ldr	r0, [pc, #100]	@ (8001638 <PrintManualTestMenu+0x8c>)
 80015d4:	f7ff fea6 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Commands:\n");
 80015d8:	4818      	ldr	r0, [pc, #96]	@ (800163c <PrintManualTestMenu+0x90>)
 80015da:	f7ff fea3 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  1 - Test Practice 1 (ReadDataByIdentifier)\n");
 80015de:	4818      	ldr	r0, [pc, #96]	@ (8001640 <PrintManualTestMenu+0x94>)
 80015e0:	f7ff fea0 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  2 - Test Practice 2a (SecurityAccess SEED)\n");
 80015e4:	4817      	ldr	r0, [pc, #92]	@ (8001644 <PrintManualTestMenu+0x98>)
 80015e6:	f7ff fe9d 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  3 - Test Practice 2b (SecurityAccess KEY)\n");
 80015ea:	4817      	ldr	r0, [pc, #92]	@ (8001648 <PrintManualTestMenu+0x9c>)
 80015ec:	f7ff fe9a 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  4 - Test Practice 3 (WriteDataByIdentifier)\n");
 80015f0:	4816      	ldr	r0, [pc, #88]	@ (800164c <PrintManualTestMenu+0xa0>)
 80015f2:	f7ff fe97 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  A - Run All Practices (Auto sequence)\n");
 80015f6:	4816      	ldr	r0, [pc, #88]	@ (8001650 <PrintManualTestMenu+0xa4>)
 80015f8:	f7ff fe94 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  X - Enter HEX Input Mode (like Hercules)\n");
 80015fc:	4815      	ldr	r0, [pc, #84]	@ (8001654 <PrintManualTestMenu+0xa8>)
 80015fe:	f7ff fe91 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  M - Toggle Manual/Auto Mode\n");
 8001602:	4815      	ldr	r0, [pc, #84]	@ (8001658 <PrintManualTestMenu+0xac>)
 8001604:	f7ff fe8e 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  H - Show this Help menu\n");
 8001608:	4814      	ldr	r0, [pc, #80]	@ (800165c <PrintManualTestMenu+0xb0>)
 800160a:	f7ff fe8b 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  S - Show Security Status\n");
 800160e:	4814      	ldr	r0, [pc, #80]	@ (8001660 <PrintManualTestMenu+0xb4>)
 8001610:	f7ff fe88 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"========================================\n");
 8001614:	4813      	ldr	r0, [pc, #76]	@ (8001664 <PrintManualTestMenu+0xb8>)
 8001616:	f7ff fe85 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Enter command: ");
 800161a:	4813      	ldr	r0, [pc, #76]	@ (8001668 <PrintManualTestMenu+0xbc>)
 800161c:	f7ff fe82 	bl	8001324 <USART3_SendString>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	08005dac 	.word	0x08005dac
 8001628:	08005dd8 	.word	0x08005dd8
 800162c:	2000004a 	.word	0x2000004a
 8001630:	08005de0 	.word	0x08005de0
 8001634:	08005de8 	.word	0x08005de8
 8001638:	08005df0 	.word	0x08005df0
 800163c:	08005e1c 	.word	0x08005e1c
 8001640:	08005e28 	.word	0x08005e28
 8001644:	08005e58 	.word	0x08005e58
 8001648:	08005e88 	.word	0x08005e88
 800164c:	08005eb8 	.word	0x08005eb8
 8001650:	08005ee8 	.word	0x08005ee8
 8001654:	08005f14 	.word	0x08005f14
 8001658:	08005f40 	.word	0x08005f40
 800165c:	08005f60 	.word	0x08005f60
 8001660:	08005f7c 	.word	0x08005f7c
 8001664:	08005f98 	.word	0x08005f98
 8001668:	08005fc4 	.word	0x08005fc4

0800166c <ProcessManualCommand>:

/**
 * @brief Process manual command received via UART
 */
void ProcessManualCommand(uint8_t command)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
    // If in HEX input mode, process as hex input
    if (HEX_INPUT_MODE) {
 8001676:	4ba1      	ldr	r3, [pc, #644]	@ (80018fc <ProcessManualCommand+0x290>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <ProcessManualCommand+0x1c>
        ProcessHexInput(command);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fafb 	bl	8001c7c <ProcessHexInput>
        return;
 8001686:	e135      	b.n	80018f4 <ProcessManualCommand+0x288>
    }
    
    // Normal command processing
    switch (command) {
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	3b0a      	subs	r3, #10
 800168c:	2b6e      	cmp	r3, #110	@ 0x6e
 800168e:	f200 8129 	bhi.w	80018e4 <ProcessManualCommand+0x278>
 8001692:	a201      	add	r2, pc, #4	@ (adr r2, 8001698 <ProcessManualCommand+0x2c>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	080018f3 	.word	0x080018f3
 800169c:	080018e5 	.word	0x080018e5
 80016a0:	080018e5 	.word	0x080018e5
 80016a4:	080018f3 	.word	0x080018f3
 80016a8:	080018e5 	.word	0x080018e5
 80016ac:	080018e5 	.word	0x080018e5
 80016b0:	080018e5 	.word	0x080018e5
 80016b4:	080018e5 	.word	0x080018e5
 80016b8:	080018e5 	.word	0x080018e5
 80016bc:	080018e5 	.word	0x080018e5
 80016c0:	080018e5 	.word	0x080018e5
 80016c4:	080018e5 	.word	0x080018e5
 80016c8:	080018e5 	.word	0x080018e5
 80016cc:	080018e5 	.word	0x080018e5
 80016d0:	080018e5 	.word	0x080018e5
 80016d4:	080018e5 	.word	0x080018e5
 80016d8:	080018e5 	.word	0x080018e5
 80016dc:	080018e5 	.word	0x080018e5
 80016e0:	080018e5 	.word	0x080018e5
 80016e4:	080018e5 	.word	0x080018e5
 80016e8:	080018e5 	.word	0x080018e5
 80016ec:	080018e5 	.word	0x080018e5
 80016f0:	080018e5 	.word	0x080018e5
 80016f4:	080018e5 	.word	0x080018e5
 80016f8:	080018e5 	.word	0x080018e5
 80016fc:	080018e5 	.word	0x080018e5
 8001700:	080018e5 	.word	0x080018e5
 8001704:	080018e5 	.word	0x080018e5
 8001708:	080018e5 	.word	0x080018e5
 800170c:	080018e5 	.word	0x080018e5
 8001710:	080018e5 	.word	0x080018e5
 8001714:	080018e5 	.word	0x080018e5
 8001718:	080018e5 	.word	0x080018e5
 800171c:	080018e5 	.word	0x080018e5
 8001720:	080018e5 	.word	0x080018e5
 8001724:	080018e5 	.word	0x080018e5
 8001728:	080018e5 	.word	0x080018e5
 800172c:	080018e5 	.word	0x080018e5
 8001730:	080018e5 	.word	0x080018e5
 8001734:	08001855 	.word	0x08001855
 8001738:	08001861 	.word	0x08001861
 800173c:	0800186d 	.word	0x0800186d
 8001740:	08001879 	.word	0x08001879
 8001744:	080018e5 	.word	0x080018e5
 8001748:	080018e5 	.word	0x080018e5
 800174c:	080018e5 	.word	0x080018e5
 8001750:	080018e5 	.word	0x080018e5
 8001754:	080018e5 	.word	0x080018e5
 8001758:	080018e5 	.word	0x080018e5
 800175c:	080018e5 	.word	0x080018e5
 8001760:	080018e5 	.word	0x080018e5
 8001764:	080018e5 	.word	0x080018e5
 8001768:	080018e5 	.word	0x080018e5
 800176c:	080018e5 	.word	0x080018e5
 8001770:	080018e5 	.word	0x080018e5
 8001774:	08001885 	.word	0x08001885
 8001778:	080018e5 	.word	0x080018e5
 800177c:	080018e5 	.word	0x080018e5
 8001780:	080018e5 	.word	0x080018e5
 8001784:	080018e5 	.word	0x080018e5
 8001788:	080018e5 	.word	0x080018e5
 800178c:	080018e5 	.word	0x080018e5
 8001790:	080018b9 	.word	0x080018b9
 8001794:	080018e5 	.word	0x080018e5
 8001798:	080018e5 	.word	0x080018e5
 800179c:	080018e5 	.word	0x080018e5
 80017a0:	080018e5 	.word	0x080018e5
 80017a4:	080018b3 	.word	0x080018b3
 80017a8:	080018e5 	.word	0x080018e5
 80017ac:	080018e5 	.word	0x080018e5
 80017b0:	080018e5 	.word	0x080018e5
 80017b4:	080018e5 	.word	0x080018e5
 80017b8:	080018e5 	.word	0x080018e5
 80017bc:	080018bf 	.word	0x080018bf
 80017c0:	080018e5 	.word	0x080018e5
 80017c4:	080018e5 	.word	0x080018e5
 80017c8:	080018e5 	.word	0x080018e5
 80017cc:	080018e5 	.word	0x080018e5
 80017d0:	08001891 	.word	0x08001891
 80017d4:	080018e5 	.word	0x080018e5
 80017d8:	080018e5 	.word	0x080018e5
 80017dc:	080018e5 	.word	0x080018e5
 80017e0:	080018e5 	.word	0x080018e5
 80017e4:	080018e5 	.word	0x080018e5
 80017e8:	080018e5 	.word	0x080018e5
 80017ec:	080018e5 	.word	0x080018e5
 80017f0:	080018e5 	.word	0x080018e5
 80017f4:	08001885 	.word	0x08001885
 80017f8:	080018e5 	.word	0x080018e5
 80017fc:	080018e5 	.word	0x080018e5
 8001800:	080018e5 	.word	0x080018e5
 8001804:	080018e5 	.word	0x080018e5
 8001808:	080018e5 	.word	0x080018e5
 800180c:	080018e5 	.word	0x080018e5
 8001810:	080018b9 	.word	0x080018b9
 8001814:	080018e5 	.word	0x080018e5
 8001818:	080018e5 	.word	0x080018e5
 800181c:	080018e5 	.word	0x080018e5
 8001820:	080018e5 	.word	0x080018e5
 8001824:	080018b3 	.word	0x080018b3
 8001828:	080018e5 	.word	0x080018e5
 800182c:	080018e5 	.word	0x080018e5
 8001830:	080018e5 	.word	0x080018e5
 8001834:	080018e5 	.word	0x080018e5
 8001838:	080018e5 	.word	0x080018e5
 800183c:	080018bf 	.word	0x080018bf
 8001840:	080018e5 	.word	0x080018e5
 8001844:	080018e5 	.word	0x080018e5
 8001848:	080018e5 	.word	0x080018e5
 800184c:	080018e5 	.word	0x080018e5
 8001850:	08001891 	.word	0x08001891
        case '1':
            USART3_SendString((uint8_t *)"\n>>> MANUAL TEST: Practice 1 <<<\n");
 8001854:	482a      	ldr	r0, [pc, #168]	@ (8001900 <ProcessManualCommand+0x294>)
 8001856:	f7ff fd65 	bl	8001324 <USART3_SendString>
            ManualTest_Practice1();
 800185a:	f000 f86b 	bl	8001934 <ManualTest_Practice1>
            break;
 800185e:	e049      	b.n	80018f4 <ProcessManualCommand+0x288>
        case '2':
            USART3_SendString((uint8_t *)"\n>>> MANUAL TEST: Practice 2a (SEED) <<<\n");
 8001860:	4828      	ldr	r0, [pc, #160]	@ (8001904 <ProcessManualCommand+0x298>)
 8001862:	f7ff fd5f 	bl	8001324 <USART3_SendString>
            ManualTest_Practice2_Seed();
 8001866:	f000 f88d 	bl	8001984 <ManualTest_Practice2_Seed>
            break;
 800186a:	e043      	b.n	80018f4 <ProcessManualCommand+0x288>
        case '3':
            USART3_SendString((uint8_t *)"\n>>> MANUAL TEST: Practice 2b (KEY) <<<\n");
 800186c:	4826      	ldr	r0, [pc, #152]	@ (8001908 <ProcessManualCommand+0x29c>)
 800186e:	f7ff fd59 	bl	8001324 <USART3_SendString>
            ManualTest_Practice2_Key();
 8001872:	f000 f8b3 	bl	80019dc <ManualTest_Practice2_Key>
            break;
 8001876:	e03d      	b.n	80018f4 <ProcessManualCommand+0x288>
        case '4':
            USART3_SendString((uint8_t *)"\n>>> MANUAL TEST: Practice 3 <<<\n");
 8001878:	4824      	ldr	r0, [pc, #144]	@ (800190c <ProcessManualCommand+0x2a0>)
 800187a:	f7ff fd53 	bl	8001324 <USART3_SendString>
            ManualTest_Practice3();
 800187e:	f000 f901 	bl	8001a84 <ManualTest_Practice3>
            break;
 8001882:	e037      	b.n	80018f4 <ProcessManualCommand+0x288>
        case 'A':
        case 'a':
            USART3_SendString((uint8_t *)"\n>>> MANUAL TEST: All Practices <<<\n");
 8001884:	4822      	ldr	r0, [pc, #136]	@ (8001910 <ProcessManualCommand+0x2a4>)
 8001886:	f7ff fd4d 	bl	8001324 <USART3_SendString>
            TestPracticeMessages();
 800188a:	f7ff fe25 	bl	80014d8 <TestPracticeMessages>
            break;
 800188e:	e031      	b.n	80018f4 <ProcessManualCommand+0x288>
        case 'X':
        case 'x':
            USART3_SendString((uint8_t *)"\n>>> ENTERING HEX INPUT MODE <<<\n");
 8001890:	4820      	ldr	r0, [pc, #128]	@ (8001914 <ProcessManualCommand+0x2a8>)
 8001892:	f7ff fd47 	bl	8001324 <USART3_SendString>
            HEX_INPUT_MODE = 1;
 8001896:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <ProcessManualCommand+0x290>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
            HEX_INPUT_INDEX = 0;
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <ProcessManualCommand+0x2ac>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
            memset(HEX_INPUT_BUFFER, 0, sizeof(HEX_INPUT_BUFFER));
 80018a2:	2218      	movs	r2, #24
 80018a4:	2100      	movs	r1, #0
 80018a6:	481d      	ldr	r0, [pc, #116]	@ (800191c <ProcessManualCommand+0x2b0>)
 80018a8:	f003 fd28 	bl	80052fc <memset>
            PrintHexInputMode();
 80018ac:	f000 f99c 	bl	8001be8 <PrintHexInputMode>
            break;
 80018b0:	e020      	b.n	80018f4 <ProcessManualCommand+0x288>
        case 'M':
        case 'm':
            ManualTest_ToggleMode();
 80018b2:	f000 f929 	bl	8001b08 <ManualTest_ToggleMode>
            break;
 80018b6:	e01d      	b.n	80018f4 <ProcessManualCommand+0x288>
        case 'H':
        case 'h':
            PrintManualTestMenu();
 80018b8:	f7ff fe78 	bl	80015ac <PrintManualTestMenu>
            break;
 80018bc:	e01a      	b.n	80018f4 <ProcessManualCommand+0x288>
        case 'S':
        case 's':
            USART3_SendString((uint8_t *)"\n>>> SECURITY STATUS <<<\n");
 80018be:	4818      	ldr	r0, [pc, #96]	@ (8001920 <ProcessManualCommand+0x2b4>)
 80018c0:	f7ff fd30 	bl	8001324 <USART3_SendString>
            if (DCM_IsSecurityLevel1Unlocked()) {
 80018c4:	f7fe ff5a 	bl	800077c <DCM_IsSecurityLevel1Unlocked>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <ProcessManualCommand+0x26a>
                USART3_SendString((uint8_t *)"Security Level 1: UNLOCKED (LED ON)\n");
 80018ce:	4815      	ldr	r0, [pc, #84]	@ (8001924 <ProcessManualCommand+0x2b8>)
 80018d0:	f7ff fd28 	bl	8001324 <USART3_SendString>
 80018d4:	e002      	b.n	80018dc <ProcessManualCommand+0x270>
            } else {
                USART3_SendString((uint8_t *)"Security Level 1: LOCKED (LED OFF)\n");
 80018d6:	4814      	ldr	r0, [pc, #80]	@ (8001928 <ProcessManualCommand+0x2bc>)
 80018d8:	f7ff fd24 	bl	8001324 <USART3_SendString>
            }
            USART3_SendString((uint8_t *)"Enter command: ");
 80018dc:	4813      	ldr	r0, [pc, #76]	@ (800192c <ProcessManualCommand+0x2c0>)
 80018de:	f7ff fd21 	bl	8001324 <USART3_SendString>
            break;
 80018e2:	e007      	b.n	80018f4 <ProcessManualCommand+0x288>
        case '\r':
        case '\n':
            // Ignore newline characters
            break;
        default:
            USART3_SendString((uint8_t *)"\nInvalid command! Press 'H' for help.\n");
 80018e4:	4812      	ldr	r0, [pc, #72]	@ (8001930 <ProcessManualCommand+0x2c4>)
 80018e6:	f7ff fd1d 	bl	8001324 <USART3_SendString>
            USART3_SendString((uint8_t *)"Enter command: ");
 80018ea:	4810      	ldr	r0, [pc, #64]	@ (800192c <ProcessManualCommand+0x2c0>)
 80018ec:	f7ff fd1a 	bl	8001324 <USART3_SendString>
            break;
 80018f0:	e000      	b.n	80018f4 <ProcessManualCommand+0x288>
            break;
 80018f2:	bf00      	nop
    }
}
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200012c0 	.word	0x200012c0
 8001900:	08005fd4 	.word	0x08005fd4
 8001904:	08005ff8 	.word	0x08005ff8
 8001908:	08006024 	.word	0x08006024
 800190c:	08006050 	.word	0x08006050
 8001910:	08006074 	.word	0x08006074
 8001914:	0800609c 	.word	0x0800609c
 8001918:	200012b4 	.word	0x200012b4
 800191c:	2000129c 	.word	0x2000129c
 8001920:	080060c0 	.word	0x080060c0
 8001924:	080060dc 	.word	0x080060dc
 8001928:	08006104 	.word	0x08006104
 800192c:	08005fc4 	.word	0x08005fc4
 8001930:	08006128 	.word	0x08006128

08001934 <ManualTest_Practice1>:

/**
 * @brief Manual test for Practice 1 - ReadDataByIdentifier
 */
void ManualTest_Practice1()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
    USART3_SendString((uint8_t *)"Testing ReadDataByIdentifier (SID 0x22, DID 0x0123)\n");
 8001938:	480b      	ldr	r0, [pc, #44]	@ (8001968 <ManualTest_Practice1+0x34>)
 800193a:	f7ff fcf3 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Expected: Returns current CAN ID from tester\n");
 800193e:	480b      	ldr	r0, [pc, #44]	@ (800196c <ManualTest_Practice1+0x38>)
 8001940:	f7ff fcf0 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"--------------------------------------------\n");
 8001944:	480a      	ldr	r0, [pc, #40]	@ (8001970 <ManualTest_Practice1+0x3c>)
 8001946:	f7ff fced 	bl	8001324 <USART3_SendString>
    
    SendTestMessage(TEST_RDBI_MSG, DCM_REQUEST_CAN_ID, "Sending RDBI request");
 800194a:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <ManualTest_Practice1+0x40>)
 800194c:	f240 7112 	movw	r1, #1810	@ 0x712
 8001950:	4809      	ldr	r0, [pc, #36]	@ (8001978 <ManualTest_Practice1+0x44>)
 8001952:	f7ff fe07 	bl	8001564 <SendTestMessage>
    
    USART3_SendString((uint8_t *)"✅ Practice 1 complete.\n");
 8001956:	4809      	ldr	r0, [pc, #36]	@ (800197c <ManualTest_Practice1+0x48>)
 8001958:	f7ff fce4 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Enter command: ");
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <ManualTest_Practice1+0x4c>)
 800195e:	f7ff fce1 	bl	8001324 <USART3_SendString>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	08006150 	.word	0x08006150
 800196c:	08006188 	.word	0x08006188
 8001970:	080061b8 	.word	0x080061b8
 8001974:	080061e8 	.word	0x080061e8
 8001978:	20000024 	.word	0x20000024
 800197c:	08006200 	.word	0x08006200
 8001980:	08005fc4 	.word	0x08005fc4

08001984 <ManualTest_Practice2_Seed>:

/**
 * @brief Manual test for Practice 2a - SecurityAccess SEED Request
 */
void ManualTest_Practice2_Seed()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
    USART3_SendString((uint8_t *)"Testing SecurityAccess SEED Request (SID 0x27, Level 0x01)\n");
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <ManualTest_Practice2_Seed+0x38>)
 800198a:	f7ff fccb 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Expected: Returns 6-byte random SEED\n");
 800198e:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <ManualTest_Practice2_Seed+0x3c>)
 8001990:	f7ff fcc8 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"------------------------------------------------------\n");
 8001994:	480b      	ldr	r0, [pc, #44]	@ (80019c4 <ManualTest_Practice2_Seed+0x40>)
 8001996:	f7ff fcc5 	bl	8001324 <USART3_SendString>
    
    SendTestMessage(TEST_SECA_SEED_REQ, DCM_REQUEST_CAN_ID, "Sending SECA SEED request");
 800199a:	4a0b      	ldr	r2, [pc, #44]	@ (80019c8 <ManualTest_Practice2_Seed+0x44>)
 800199c:	f240 7112 	movw	r1, #1810	@ 0x712
 80019a0:	480a      	ldr	r0, [pc, #40]	@ (80019cc <ManualTest_Practice2_Seed+0x48>)
 80019a2:	f7ff fddf 	bl	8001564 <SendTestMessage>
    
    USART3_SendString((uint8_t *)"ℹ️ Note: Use received SEED to calculate KEY for Practice 2b\n");
 80019a6:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <ManualTest_Practice2_Seed+0x4c>)
 80019a8:	f7ff fcbc 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"✅ Practice 2a complete.\n");
 80019ac:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <ManualTest_Practice2_Seed+0x50>)
 80019ae:	f7ff fcb9 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Enter command: ");
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <ManualTest_Practice2_Seed+0x54>)
 80019b4:	f7ff fcb6 	bl	8001324 <USART3_SendString>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	0800621c 	.word	0x0800621c
 80019c0:	08006258 	.word	0x08006258
 80019c4:	08006280 	.word	0x08006280
 80019c8:	080062b8 	.word	0x080062b8
 80019cc:	2000002c 	.word	0x2000002c
 80019d0:	080062d4 	.word	0x080062d4
 80019d4:	08006318 	.word	0x08006318
 80019d8:	08005fc4 	.word	0x08005fc4

080019dc <ManualTest_Practice2_Key>:

/**
 * @brief Manual test for Practice 2b - SecurityAccess KEY Send
 */
void ManualTest_Practice2_Key()
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
    USART3_SendString((uint8_t *)"Testing SecurityAccess KEY Send (SID 0x27, Level 0x02)\n");
 80019e0:	4818      	ldr	r0, [pc, #96]	@ (8001a44 <ManualTest_Practice2_Key+0x68>)
 80019e2:	f7ff fc9f 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Expected: LED turns ON for 5 seconds if KEY is correct\n");
 80019e6:	4818      	ldr	r0, [pc, #96]	@ (8001a48 <ManualTest_Practice2_Key+0x6c>)
 80019e8:	f7ff fc9c 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"--------------------------------------------------------\n");
 80019ec:	4817      	ldr	r0, [pc, #92]	@ (8001a4c <ManualTest_Practice2_Key+0x70>)
 80019ee:	f7ff fc99 	bl	8001324 <USART3_SendString>
    
    // Show SEED-KEY calculation for reference
    USART3_SendString((uint8_t *)"SEED-KEY Algorithm:\n");
 80019f2:	4817      	ldr	r0, [pc, #92]	@ (8001a50 <ManualTest_Practice2_Key+0x74>)
 80019f4:	f7ff fc96 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"KEY[0] = SEED[0] XOR SEED[1]\n");
 80019f8:	4816      	ldr	r0, [pc, #88]	@ (8001a54 <ManualTest_Practice2_Key+0x78>)
 80019fa:	f7ff fc93 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"KEY[1] = SEED[1] + SEED[2]\n");
 80019fe:	4816      	ldr	r0, [pc, #88]	@ (8001a58 <ManualTest_Practice2_Key+0x7c>)
 8001a00:	f7ff fc90 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"KEY[2] = SEED[2] XOR SEED[3]\n");
 8001a04:	4815      	ldr	r0, [pc, #84]	@ (8001a5c <ManualTest_Practice2_Key+0x80>)
 8001a06:	f7ff fc8d 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"KEY[3] = SEED[3] + SEED[0]\n");
 8001a0a:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <ManualTest_Practice2_Key+0x84>)
 8001a0c:	f7ff fc8a 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"KEY[4] = SEED[4] AND 0xF0\n");
 8001a10:	4814      	ldr	r0, [pc, #80]	@ (8001a64 <ManualTest_Practice2_Key+0x88>)
 8001a12:	f7ff fc87 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"KEY[5] = SEED[5] AND 0x0F\n");
 8001a16:	4814      	ldr	r0, [pc, #80]	@ (8001a68 <ManualTest_Practice2_Key+0x8c>)
 8001a18:	f7ff fc84 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"------------------------\n");
 8001a1c:	4813      	ldr	r0, [pc, #76]	@ (8001a6c <ManualTest_Practice2_Key+0x90>)
 8001a1e:	f7ff fc81 	bl	8001324 <USART3_SendString>
    
    SendTestMessage(TEST_SECA_KEY_SEND, DCM_REQUEST_CAN_ID, "Sending SECA KEY");
 8001a22:	4a13      	ldr	r2, [pc, #76]	@ (8001a70 <ManualTest_Practice2_Key+0x94>)
 8001a24:	f240 7112 	movw	r1, #1810	@ 0x712
 8001a28:	4812      	ldr	r0, [pc, #72]	@ (8001a74 <ManualTest_Practice2_Key+0x98>)
 8001a2a:	f7ff fd9b 	bl	8001564 <SendTestMessage>
    
    USART3_SendString((uint8_t *)"🔍 Check LED status: Should be ON if KEY is correct\n");
 8001a2e:	4812      	ldr	r0, [pc, #72]	@ (8001a78 <ManualTest_Practice2_Key+0x9c>)
 8001a30:	f7ff fc78 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"✅ Practice 2b complete.\n");
 8001a34:	4811      	ldr	r0, [pc, #68]	@ (8001a7c <ManualTest_Practice2_Key+0xa0>)
 8001a36:	f7ff fc75 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Enter command: ");
 8001a3a:	4811      	ldr	r0, [pc, #68]	@ (8001a80 <ManualTest_Practice2_Key+0xa4>)
 8001a3c:	f7ff fc72 	bl	8001324 <USART3_SendString>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	08006334 	.word	0x08006334
 8001a48:	0800636c 	.word	0x0800636c
 8001a4c:	080063a4 	.word	0x080063a4
 8001a50:	080063e0 	.word	0x080063e0
 8001a54:	080063f8 	.word	0x080063f8
 8001a58:	08006418 	.word	0x08006418
 8001a5c:	08006434 	.word	0x08006434
 8001a60:	08006454 	.word	0x08006454
 8001a64:	08006470 	.word	0x08006470
 8001a68:	0800648c 	.word	0x0800648c
 8001a6c:	080064a8 	.word	0x080064a8
 8001a70:	080064c4 	.word	0x080064c4
 8001a74:	20000034 	.word	0x20000034
 8001a78:	080064d8 	.word	0x080064d8
 8001a7c:	08006510 	.word	0x08006510
 8001a80:	08005fc4 	.word	0x08005fc4

08001a84 <ManualTest_Practice3>:

/**
 * @brief Manual test for Practice 3 - WriteDataByIdentifier
 */
void ManualTest_Practice3()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    USART3_SendString((uint8_t *)"Testing WriteDataByIdentifier (SID 0x2E, DID 0x0123)\n");
 8001a88:	4814      	ldr	r0, [pc, #80]	@ (8001adc <ManualTest_Practice3+0x58>)
 8001a8a:	f7ff fc4b 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Expected: Writes new CAN ID (0x0456) - requires security unlock\n");
 8001a8e:	4814      	ldr	r0, [pc, #80]	@ (8001ae0 <ManualTest_Practice3+0x5c>)
 8001a90:	f7ff fc48 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"------------------------------------------------------------------\n");
 8001a94:	4813      	ldr	r0, [pc, #76]	@ (8001ae4 <ManualTest_Practice3+0x60>)
 8001a96:	f7ff fc45 	bl	8001324 <USART3_SendString>
    
    // Check security status first
    if (!DCM_IsSecurityLevel1Unlocked()) {
 8001a9a:	f7fe fe6f 	bl	800077c <DCM_IsSecurityLevel1Unlocked>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <ManualTest_Practice3+0x2e>
        USART3_SendString((uint8_t *)"⚠️ WARNING: Security not unlocked! Run Practice 2 first.\n");
 8001aa4:	4810      	ldr	r0, [pc, #64]	@ (8001ae8 <ManualTest_Practice3+0x64>)
 8001aa6:	f7ff fc3d 	bl	8001324 <USART3_SendString>
        USART3_SendString((uint8_t *)"Expected Response: NRC 0x33 (Security Access Denied)\n");
 8001aaa:	4810      	ldr	r0, [pc, #64]	@ (8001aec <ManualTest_Practice3+0x68>)
 8001aac:	f7ff fc3a 	bl	8001324 <USART3_SendString>
 8001ab0:	e002      	b.n	8001ab8 <ManualTest_Practice3+0x34>
    } else {
        USART3_SendString((uint8_t *)"✅ Security unlocked. Should write successfully.\n");
 8001ab2:	480f      	ldr	r0, [pc, #60]	@ (8001af0 <ManualTest_Practice3+0x6c>)
 8001ab4:	f7ff fc36 	bl	8001324 <USART3_SendString>
    }
    
    SendTestMessage(TEST_WDBI_MSG, DCM_REQUEST_CAN_ID, "Sending WDBI request");
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8001af4 <ManualTest_Practice3+0x70>)
 8001aba:	f240 7112 	movw	r1, #1810	@ 0x712
 8001abe:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <ManualTest_Practice3+0x74>)
 8001ac0:	f7ff fd50 	bl	8001564 <SendTestMessage>
    
    USART3_SendString((uint8_t *)"ℹ️ Note: New CAN ID applied after User Button press (Ignition Cycle)\n");
 8001ac4:	480d      	ldr	r0, [pc, #52]	@ (8001afc <ManualTest_Practice3+0x78>)
 8001ac6:	f7ff fc2d 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"✅ Practice 3 complete.\n");
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <ManualTest_Practice3+0x7c>)
 8001acc:	f7ff fc2a 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Enter command: ");
 8001ad0:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <ManualTest_Practice3+0x80>)
 8001ad2:	f7ff fc27 	bl	8001324 <USART3_SendString>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800652c 	.word	0x0800652c
 8001ae0:	08006564 	.word	0x08006564
 8001ae4:	080065a8 	.word	0x080065a8
 8001ae8:	080065ec 	.word	0x080065ec
 8001aec:	0800662c 	.word	0x0800662c
 8001af0:	08006664 	.word	0x08006664
 8001af4:	08006698 	.word	0x08006698
 8001af8:	2000003c 	.word	0x2000003c
 8001afc:	080066b0 	.word	0x080066b0
 8001b00:	080066fc 	.word	0x080066fc
 8001b04:	08005fc4 	.word	0x08005fc4

08001b08 <ManualTest_ToggleMode>:

/**
 * @brief Toggle between Manual and Auto test modes
 */
void ManualTest_ToggleMode()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
    MANUAL_TEST_MODE = !MANUAL_TEST_MODE;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <ManualTest_ToggleMode+0x68>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <ManualTest_ToggleMode+0x68>)
 8001b1e:	701a      	strb	r2, [r3, #0]
    AUTO_TEST_ENABLED = !AUTO_TEST_ENABLED;
 8001b20:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <ManualTest_ToggleMode+0x6c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <ManualTest_ToggleMode+0x6c>)
 8001b32:	701a      	strb	r2, [r3, #0]
    
    USART3_SendString((uint8_t *)"\n>>> MODE CHANGED <<<\n");
 8001b34:	4810      	ldr	r0, [pc, #64]	@ (8001b78 <ManualTest_ToggleMode+0x70>)
 8001b36:	f7ff fbf5 	bl	8001324 <USART3_SendString>
    if (MANUAL_TEST_MODE) {
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <ManualTest_ToggleMode+0x68>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <ManualTest_ToggleMode+0x4e>
        USART3_SendString((uint8_t *)"Switched to: MANUAL MODE\n");
 8001b42:	480e      	ldr	r0, [pc, #56]	@ (8001b7c <ManualTest_ToggleMode+0x74>)
 8001b44:	f7ff fbee 	bl	8001324 <USART3_SendString>
        USART3_SendString((uint8_t *)"- Auto testing disabled\n");
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <ManualTest_ToggleMode+0x78>)
 8001b4a:	f7ff fbeb 	bl	8001324 <USART3_SendString>
        USART3_SendString((uint8_t *)"- Use commands to test individually\n");
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <ManualTest_ToggleMode+0x7c>)
 8001b50:	f7ff fbe8 	bl	8001324 <USART3_SendString>
 8001b54:	e008      	b.n	8001b68 <ManualTest_ToggleMode+0x60>
    } else {
        USART3_SendString((uint8_t *)"Switched to: AUTO MODE\n");
 8001b56:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <ManualTest_ToggleMode+0x80>)
 8001b58:	f7ff fbe4 	bl	8001324 <USART3_SendString>
        USART3_SendString((uint8_t *)"- Auto testing every 15 seconds\n");
 8001b5c:	480b      	ldr	r0, [pc, #44]	@ (8001b8c <ManualTest_ToggleMode+0x84>)
 8001b5e:	f7ff fbe1 	bl	8001324 <USART3_SendString>
        USART3_SendString((uint8_t *)"- Manual commands still available\n");
 8001b62:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <ManualTest_ToggleMode+0x88>)
 8001b64:	f7ff fbde 	bl	8001324 <USART3_SendString>
    }
    PrintManualTestMenu();
 8001b68:	f7ff fd20 	bl	80015ac <PrintManualTestMenu>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000004a 	.word	0x2000004a
 8001b74:	20001298 	.word	0x20001298
 8001b78:	08006718 	.word	0x08006718
 8001b7c:	08006730 	.word	0x08006730
 8001b80:	0800674c 	.word	0x0800674c
 8001b84:	08006768 	.word	0x08006768
 8001b88:	08006790 	.word	0x08006790
 8001b8c:	080067a8 	.word	0x080067a8
 8001b90:	080067cc 	.word	0x080067cc

08001b94 <ParseHexChar>:

/**
 * @brief Parse single hex character to value
 */
uint8_t ParseHexChar(char c)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ba2:	d906      	bls.n	8001bb2 <ParseHexChar+0x1e>
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b39      	cmp	r3, #57	@ 0x39
 8001ba8:	d803      	bhi.n	8001bb2 <ParseHexChar+0x1e>
        return c - '0';
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	3b30      	subs	r3, #48	@ 0x30
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	e014      	b.n	8001bdc <ParseHexChar+0x48>
    } else if (c >= 'A' && c <= 'F') {
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b40      	cmp	r3, #64	@ 0x40
 8001bb6:	d906      	bls.n	8001bc6 <ParseHexChar+0x32>
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	2b46      	cmp	r3, #70	@ 0x46
 8001bbc:	d803      	bhi.n	8001bc6 <ParseHexChar+0x32>
        return c - 'A' + 10;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	3b37      	subs	r3, #55	@ 0x37
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	e00a      	b.n	8001bdc <ParseHexChar+0x48>
    } else if (c >= 'a' && c <= 'f') {
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b60      	cmp	r3, #96	@ 0x60
 8001bca:	d906      	bls.n	8001bda <ParseHexChar+0x46>
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	2b66      	cmp	r3, #102	@ 0x66
 8001bd0:	d803      	bhi.n	8001bda <ParseHexChar+0x46>
        return c - 'a' + 10;
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	3b57      	subs	r3, #87	@ 0x57
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	e000      	b.n	8001bdc <ParseHexChar+0x48>
    }
    return 0xFF; // Invalid character
 8001bda:	23ff      	movs	r3, #255	@ 0xff
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <PrintHexInputMode>:

/**
 * @brief Print hex input mode instructions
 */
void PrintHexInputMode()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    USART3_SendString((uint8_t *)"========== HEX INPUT MODE ==========\n");
 8001bec:	4815      	ldr	r0, [pc, #84]	@ (8001c44 <PrintHexInputMode+0x5c>)
 8001bee:	f7ff fb99 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Enter CAN message in hex format:\n");
 8001bf2:	4815      	ldr	r0, [pc, #84]	@ (8001c48 <PrintHexInputMode+0x60>)
 8001bf4:	f7ff fb96 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Format: XX XX XX XX XX XX XX XX\n");
 8001bf8:	4814      	ldr	r0, [pc, #80]	@ (8001c4c <PrintHexInputMode+0x64>)
 8001bfa:	f7ff fb93 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Examples:\n");
 8001bfe:	4814      	ldr	r0, [pc, #80]	@ (8001c50 <PrintHexInputMode+0x68>)
 8001c00:	f7ff fb90 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  03 22 01 23 55 55 55 55  (Practice 1)\n");
 8001c04:	4813      	ldr	r0, [pc, #76]	@ (8001c54 <PrintHexInputMode+0x6c>)
 8001c06:	f7ff fb8d 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  02 27 01 55 55 55 55 55  (Practice 2a)\n");
 8001c0a:	4813      	ldr	r0, [pc, #76]	@ (8001c58 <PrintHexInputMode+0x70>)
 8001c0c:	f7ff fb8a 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  08 27 02 XX XX XX XX XX  (Practice 2b)\n");
 8001c10:	4812      	ldr	r0, [pc, #72]	@ (8001c5c <PrintHexInputMode+0x74>)
 8001c12:	f7ff fb87 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  05 2E 01 23 04 56 55 55  (Practice 3)\n");
 8001c16:	4812      	ldr	r0, [pc, #72]	@ (8001c60 <PrintHexInputMode+0x78>)
 8001c18:	f7ff fb84 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"Commands:\n");
 8001c1c:	4811      	ldr	r0, [pc, #68]	@ (8001c64 <PrintHexInputMode+0x7c>)
 8001c1e:	f7ff fb81 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  ENTER - Execute message\n");
 8001c22:	4811      	ldr	r0, [pc, #68]	@ (8001c68 <PrintHexInputMode+0x80>)
 8001c24:	f7ff fb7e 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  ESC   - Exit hex mode\n");
 8001c28:	4810      	ldr	r0, [pc, #64]	@ (8001c6c <PrintHexInputMode+0x84>)
 8001c2a:	f7ff fb7b 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"  SPACE - Separator (optional)\n");
 8001c2e:	4810      	ldr	r0, [pc, #64]	@ (8001c70 <PrintHexInputMode+0x88>)
 8001c30:	f7ff fb78 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"===================================\n");
 8001c34:	480f      	ldr	r0, [pc, #60]	@ (8001c74 <PrintHexInputMode+0x8c>)
 8001c36:	f7ff fb75 	bl	8001324 <USART3_SendString>
    USART3_SendString((uint8_t *)"HEX> ");
 8001c3a:	480f      	ldr	r0, [pc, #60]	@ (8001c78 <PrintHexInputMode+0x90>)
 8001c3c:	f7ff fb72 	bl	8001324 <USART3_SendString>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	080067f0 	.word	0x080067f0
 8001c48:	08006818 	.word	0x08006818
 8001c4c:	0800683c 	.word	0x0800683c
 8001c50:	08006860 	.word	0x08006860
 8001c54:	0800686c 	.word	0x0800686c
 8001c58:	08006898 	.word	0x08006898
 8001c5c:	080068c4 	.word	0x080068c4
 8001c60:	080068f0 	.word	0x080068f0
 8001c64:	08005e1c 	.word	0x08005e1c
 8001c68:	0800691c 	.word	0x0800691c
 8001c6c:	08006938 	.word	0x08006938
 8001c70:	08006954 	.word	0x08006954
 8001c74:	08006974 	.word	0x08006974
 8001c78:	0800699c 	.word	0x0800699c

08001c7c <ProcessHexInput>:

/**
 * @brief Process hex input character by character
 */
void ProcessHexInput(uint8_t input_char)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
    // Handle special commands
    if (input_char == 27) { // ESC key
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b1b      	cmp	r3, #27
 8001c8a:	d110      	bne.n	8001cae <ProcessHexInput+0x32>
        USART3_SendString((uint8_t *)"\n>>> EXITING HEX INPUT MODE <<<\n");
 8001c8c:	4840      	ldr	r0, [pc, #256]	@ (8001d90 <ProcessHexInput+0x114>)
 8001c8e:	f7ff fb49 	bl	8001324 <USART3_SendString>
        HEX_INPUT_MODE = 0;
 8001c92:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <ProcessHexInput+0x118>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
        HEX_INPUT_INDEX = 0;
 8001c98:	4b3f      	ldr	r3, [pc, #252]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
        memset(HEX_INPUT_BUFFER, 0, sizeof(HEX_INPUT_BUFFER));
 8001c9e:	2218      	movs	r2, #24
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	483e      	ldr	r0, [pc, #248]	@ (8001d9c <ProcessHexInput+0x120>)
 8001ca4:	f003 fb2a 	bl	80052fc <memset>
        PrintManualTestMenu();
 8001ca8:	f7ff fc80 	bl	80015ac <PrintManualTestMenu>
        return;
 8001cac:	e06c      	b.n	8001d88 <ProcessHexInput+0x10c>
    }
    
    if (input_char == '\r' || input_char == '\n') { // ENTER key
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b0d      	cmp	r3, #13
 8001cb2:	d002      	beq.n	8001cba <ProcessHexInput+0x3e>
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	2b0a      	cmp	r3, #10
 8001cb8:	d105      	bne.n	8001cc6 <ProcessHexInput+0x4a>
        USART3_SendString((uint8_t *)"\n");
 8001cba:	4839      	ldr	r0, [pc, #228]	@ (8001da0 <ProcessHexInput+0x124>)
 8001cbc:	f7ff fb32 	bl	8001324 <USART3_SendString>
        ExecuteHexMessage();
 8001cc0:	f000 f87a 	bl	8001db8 <ExecuteHexMessage>
        return;
 8001cc4:	e060      	b.n	8001d88 <ProcessHexInput+0x10c>
    }
    
    if (input_char == ' ') { // Space separator - ignore
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d103      	bne.n	8001cd4 <ProcessHexInput+0x58>
        USART3_SendString((uint8_t *)" ");
 8001ccc:	4835      	ldr	r0, [pc, #212]	@ (8001da4 <ProcessHexInput+0x128>)
 8001cce:	f7ff fb29 	bl	8001324 <USART3_SendString>
        return;
 8001cd2:	e059      	b.n	8001d88 <ProcessHexInput+0x10c>
    }
    
    if (input_char == 8 || input_char == 127) { // Backspace
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d002      	beq.n	8001ce0 <ProcessHexInput+0x64>
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cde:	d113      	bne.n	8001d08 <ProcessHexInput+0x8c>
        if (HEX_INPUT_INDEX > 0) {
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d04e      	beq.n	8001d86 <ProcessHexInput+0x10a>
            HEX_INPUT_INDEX--;
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001cf2:	701a      	strb	r2, [r3, #0]
            HEX_INPUT_BUFFER[HEX_INPUT_INDEX] = 0;
 8001cf4:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b28      	ldr	r3, [pc, #160]	@ (8001d9c <ProcessHexInput+0x120>)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]
            USART3_SendString((uint8_t *)"\b \b"); // Backspace, space, backspace
 8001d00:	4829      	ldr	r0, [pc, #164]	@ (8001da8 <ProcessHexInput+0x12c>)
 8001d02:	f7ff fb0f 	bl	8001324 <USART3_SendString>
        }
        return;
 8001d06:	e03e      	b.n	8001d86 <ProcessHexInput+0x10a>
    }
    
    // Check if it's a valid hex character
    uint8_t hex_val = ParseHexChar(input_char);
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff42 	bl	8001b94 <ParseHexChar>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
    if (hex_val == 0xFF) {
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2bff      	cmp	r3, #255	@ 0xff
 8001d18:	d106      	bne.n	8001d28 <ProcessHexInput+0xac>
        USART3_SendString((uint8_t *)"\nInvalid hex character! Use 0-9, A-F\n");
 8001d1a:	4824      	ldr	r0, [pc, #144]	@ (8001dac <ProcessHexInput+0x130>)
 8001d1c:	f7ff fb02 	bl	8001324 <USART3_SendString>
        USART3_SendString((uint8_t *)"HEX> ");
 8001d20:	4823      	ldr	r0, [pc, #140]	@ (8001db0 <ProcessHexInput+0x134>)
 8001d22:	f7ff faff 	bl	8001324 <USART3_SendString>
        return;
 8001d26:	e02f      	b.n	8001d88 <ProcessHexInput+0x10c>
    }
    
    // Add to buffer if not full
    if (HEX_INPUT_INDEX < sizeof(HEX_INPUT_BUFFER) - 1) {
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b16      	cmp	r3, #22
 8001d2e:	d823      	bhi.n	8001d78 <ProcessHexInput+0xfc>
        HEX_INPUT_BUFFER[HEX_INPUT_INDEX] = input_char;
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <ProcessHexInput+0x120>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	5453      	strb	r3, [r2, r1]
        HEX_INPUT_INDEX++;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001d46:	701a      	strb	r2, [r3, #0]
        
        // Echo character
        uint8_t echo[2] = {input_char, 0};
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	733b      	strb	r3, [r7, #12]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	737b      	strb	r3, [r7, #13]
        USART3_SendString(echo);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fae5 	bl	8001324 <USART3_SendString>
        
        // Add space after every 2 characters for readability
        if (HEX_INPUT_INDEX % 2 == 0 && HEX_INPUT_INDEX < sizeof(HEX_INPUT_BUFFER) - 1) {
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10f      	bne.n	8001d88 <ProcessHexInput+0x10c>
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <ProcessHexInput+0x11c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b16      	cmp	r3, #22
 8001d6e:	d80b      	bhi.n	8001d88 <ProcessHexInput+0x10c>
            USART3_SendString((uint8_t *)" ");
 8001d70:	480c      	ldr	r0, [pc, #48]	@ (8001da4 <ProcessHexInput+0x128>)
 8001d72:	f7ff fad7 	bl	8001324 <USART3_SendString>
 8001d76:	e007      	b.n	8001d88 <ProcessHexInput+0x10c>
        }
    } else {
        USART3_SendString((uint8_t *)"\nBuffer full! Press ENTER to execute or ESC to cancel.\n");
 8001d78:	480e      	ldr	r0, [pc, #56]	@ (8001db4 <ProcessHexInput+0x138>)
 8001d7a:	f7ff fad3 	bl	8001324 <USART3_SendString>
        USART3_SendString((uint8_t *)"HEX> ");
 8001d7e:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <ProcessHexInput+0x134>)
 8001d80:	f7ff fad0 	bl	8001324 <USART3_SendString>
 8001d84:	e000      	b.n	8001d88 <ProcessHexInput+0x10c>
        return;
 8001d86:	bf00      	nop
    }
}
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	080069a4 	.word	0x080069a4
 8001d94:	200012c0 	.word	0x200012c0
 8001d98:	200012b4 	.word	0x200012b4
 8001d9c:	2000129c 	.word	0x2000129c
 8001da0:	08005da8 	.word	0x08005da8
 8001da4:	08005cc4 	.word	0x08005cc4
 8001da8:	080069c8 	.word	0x080069c8
 8001dac:	080069cc 	.word	0x080069cc
 8001db0:	0800699c 	.word	0x0800699c
 8001db4:	080069f4 	.word	0x080069f4

08001db8 <ExecuteHexMessage>:

/**
 * @brief Execute the hex message entered by user
 */
void ExecuteHexMessage()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
    // Parse hex string to bytes
    uint8_t byte_count = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    memset(HEX_MESSAGE_BUFFER, 0x55, sizeof(HEX_MESSAGE_BUFFER)); // Default padding
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	2155      	movs	r1, #85	@ 0x55
 8001dc6:	4848      	ldr	r0, [pc, #288]	@ (8001ee8 <ExecuteHexMessage+0x130>)
 8001dc8:	f003 fa98 	bl	80052fc <memset>
    
    for (int i = 0; i < HEX_INPUT_INDEX && byte_count < 8; i += 2) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e02f      	b.n	8001e32 <ExecuteHexMessage+0x7a>
        if (i + 1 < HEX_INPUT_INDEX) {
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	4a45      	ldr	r2, [pc, #276]	@ (8001eec <ExecuteHexMessage+0x134>)
 8001dd8:	7812      	ldrb	r2, [r2, #0]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	da26      	bge.n	8001e2c <ExecuteHexMessage+0x74>
            uint8_t high_nibble = ParseHexChar(HEX_INPUT_BUFFER[i]);
 8001dde:	4a44      	ldr	r2, [pc, #272]	@ (8001ef0 <ExecuteHexMessage+0x138>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fed4 	bl	8001b94 <ParseHexChar>
 8001dec:	4603      	mov	r3, r0
 8001dee:	72bb      	strb	r3, [r7, #10]
            uint8_t low_nibble = ParseHexChar(HEX_INPUT_BUFFER[i + 1]);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	3301      	adds	r3, #1
 8001df4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ef0 <ExecuteHexMessage+0x138>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fecb 	bl	8001b94 <ParseHexChar>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	727b      	strb	r3, [r7, #9]
            
            if (high_nibble != 0xFF && low_nibble != 0xFF) {
 8001e02:	7abb      	ldrb	r3, [r7, #10]
 8001e04:	2bff      	cmp	r3, #255	@ 0xff
 8001e06:	d011      	beq.n	8001e2c <ExecuteHexMessage+0x74>
 8001e08:	7a7b      	ldrb	r3, [r7, #9]
 8001e0a:	2bff      	cmp	r3, #255	@ 0xff
 8001e0c:	d00e      	beq.n	8001e2c <ExecuteHexMessage+0x74>
                HEX_MESSAGE_BUFFER[byte_count] = (high_nibble << 4) | low_nibble;
 8001e0e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	b25a      	sxtb	r2, r3
 8001e16:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b25a      	sxtb	r2, r3
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	b2d1      	uxtb	r1, r2
 8001e22:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <ExecuteHexMessage+0x130>)
 8001e24:	54d1      	strb	r1, [r2, r3]
                byte_count++;
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < HEX_INPUT_INDEX && byte_count < 8; i += 2) {
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	3302      	adds	r3, #2
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <ExecuteHexMessage+0x134>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	da02      	bge.n	8001e44 <ExecuteHexMessage+0x8c>
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	2b07      	cmp	r3, #7
 8001e42:	d9c6      	bls.n	8001dd2 <ExecuteHexMessage+0x1a>
            }
        }
    }
    
    if (byte_count == 0) {
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <ExecuteHexMessage+0xa0>
        USART3_SendString((uint8_t *)"Error: No valid bytes parsed!\n");
 8001e4a:	482a      	ldr	r0, [pc, #168]	@ (8001ef4 <ExecuteHexMessage+0x13c>)
 8001e4c:	f7ff fa6a 	bl	8001324 <USART3_SendString>
        USART3_SendString((uint8_t *)"HEX> ");
 8001e50:	4829      	ldr	r0, [pc, #164]	@ (8001ef8 <ExecuteHexMessage+0x140>)
 8001e52:	f7ff fa67 	bl	8001324 <USART3_SendString>
        return;
 8001e56:	e044      	b.n	8001ee2 <ExecuteHexMessage+0x12a>
    }
    
    // Display what will be executed
    USART3_SendString((uint8_t *)"Executing: ");
 8001e58:	4828      	ldr	r0, [pc, #160]	@ (8001efc <ExecuteHexMessage+0x144>)
 8001e5a:	f7ff fa63 	bl	8001324 <USART3_SendString>
    for (int i = 0; i < 8; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e010      	b.n	8001e86 <ExecuteHexMessage+0xce>
        char hex_str[4];
        sprintf(hex_str, "%02X ", HEX_MESSAGE_BUFFER[i]);
 8001e64:	4a20      	ldr	r2, [pc, #128]	@ (8001ee8 <ExecuteHexMessage+0x130>)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4923      	ldr	r1, [pc, #140]	@ (8001f00 <ExecuteHexMessage+0x148>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fa20 	bl	80052b8 <siprintf>
        USART3_SendString((uint8_t *)hex_str);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fa52 	bl	8001324 <USART3_SendString>
    for (int i = 0; i < 8; i++) {
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3301      	adds	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	ddeb      	ble.n	8001e64 <ExecuteHexMessage+0xac>
    }
    USART3_SendString((uint8_t *)"\n");
 8001e8c:	481d      	ldr	r0, [pc, #116]	@ (8001f04 <ExecuteHexMessage+0x14c>)
 8001e8e:	f7ff fa49 	bl	8001324 <USART3_SendString>
    
    // Execute the message
    USART3_SendString((uint8_t *)"Processing diagnostic request...\n");
 8001e92:	481d      	ldr	r0, [pc, #116]	@ (8001f08 <ExecuteHexMessage+0x150>)
 8001e94:	f7ff fa46 	bl	8001324 <USART3_SendString>
    PrintCANLog(DCM_REQUEST_CAN_ID, HEX_MESSAGE_BUFFER);
 8001e98:	4913      	ldr	r1, [pc, #76]	@ (8001ee8 <ExecuteHexMessage+0x130>)
 8001e9a:	f240 7012 	movw	r0, #1810	@ 0x712
 8001e9e:	f7ff fa5b 	bl	8001358 <PrintCANLog>
    
    // Determine message length from first byte (CAN-TP PCI)
    uint8_t message_length = 8;
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	72fb      	strb	r3, [r7, #11]
    if ((HEX_MESSAGE_BUFFER[0] & 0xF0) == 0x00) { // Single Frame
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <ExecuteHexMessage+0x130>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <ExecuteHexMessage+0x108>
        message_length = (HEX_MESSAGE_BUFFER[0] & 0x0F) + 1; // SF_DL + PCI byte
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <ExecuteHexMessage+0x130>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	72fb      	strb	r3, [r7, #11]
    }
    
    DCM_ProcessRequest(HEX_MESSAGE_BUFFER, message_length);
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4808      	ldr	r0, [pc, #32]	@ (8001ee8 <ExecuteHexMessage+0x130>)
 8001ec8:	f7fe fb68 	bl	800059c <DCM_ProcessRequest>
    
    // Reset for next input
    HEX_INPUT_INDEX = 0;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <ExecuteHexMessage+0x134>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
    memset(HEX_INPUT_BUFFER, 0, sizeof(HEX_INPUT_BUFFER));
 8001ed2:	2218      	movs	r2, #24
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4806      	ldr	r0, [pc, #24]	@ (8001ef0 <ExecuteHexMessage+0x138>)
 8001ed8:	f003 fa10 	bl	80052fc <memset>
    
    USART3_SendString((uint8_t *)"\nHEX> ");
 8001edc:	480b      	ldr	r0, [pc, #44]	@ (8001f0c <ExecuteHexMessage+0x154>)
 8001ede:	f7ff fa21 	bl	8001324 <USART3_SendString>
}
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200012b8 	.word	0x200012b8
 8001eec:	200012b4 	.word	0x200012b4
 8001ef0:	2000129c 	.word	0x2000129c
 8001ef4:	08006a2c 	.word	0x08006a2c
 8001ef8:	0800699c 	.word	0x0800699c
 8001efc:	08006a4c 	.word	0x08006a4c
 8001f00:	08006a58 	.word	0x08006a58
 8001f04:	08005da8 	.word	0x08005da8
 8001f08:	08006a60 	.word	0x08006a60
 8001f0c:	08006a84 	.word	0x08006a84

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <Error_Handler+0x8>

08001f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_MspInit+0x4c>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f68 <HAL_MspInit+0x4c>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <HAL_MspInit+0x4c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_MspInit+0x4c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <HAL_MspInit+0x4c>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_MspInit+0x4c>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	@ 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a4a      	ldr	r2, [pc, #296]	@ (80020b4 <HAL_CAN_MspInit+0x148>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d13e      	bne.n	800200c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_CAN_MspInit+0x14c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a48      	ldr	r2, [pc, #288]	@ (80020b8 <HAL_CAN_MspInit+0x14c>)
 8001f96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f98:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_CAN_MspInit+0x14c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10d      	bne.n	8001fbc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	4b45      	ldr	r3, [pc, #276]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	4a44      	ldr	r2, [pc, #272]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8001faa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb0:	4b42      	ldr	r3, [pc, #264]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	4a3d      	ldr	r2, [pc, #244]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fd8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fea:	2309      	movs	r3, #9
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4832      	ldr	r0, [pc, #200]	@ (80020c0 <HAL_CAN_MspInit+0x154>)
 8001ff6:	f001 fa5d 	bl	80034b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	2014      	movs	r0, #20
 8002000:	f001 f98f 	bl	8003322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002004:	2014      	movs	r0, #20
 8002006:	f001 f9a8 	bl	800335a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800200a:	e04f      	b.n	80020ac <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2c      	ldr	r2, [pc, #176]	@ (80020c4 <HAL_CAN_MspInit+0x158>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d14a      	bne.n	80020ac <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4a27      	ldr	r2, [pc, #156]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8002020:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002024:	6413      	str	r3, [r2, #64]	@ 0x40
 8002026:	4b25      	ldr	r3, [pc, #148]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002032:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <HAL_CAN_MspInit+0x14c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a1f      	ldr	r2, [pc, #124]	@ (80020b8 <HAL_CAN_MspInit+0x14c>)
 800203a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800203c:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <HAL_CAN_MspInit+0x14c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10d      	bne.n	8002060 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 800204e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002052:	6413      	str	r3, [r2, #64]	@ 0x40
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	4a14      	ldr	r2, [pc, #80]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <HAL_CAN_MspInit+0x150>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800207c:	2360      	movs	r3, #96	@ 0x60
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800208c:	2309      	movs	r3, #9
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <HAL_CAN_MspInit+0x15c>)
 8002098:	f001 fa0c 	bl	80034b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2102      	movs	r1, #2
 80020a0:	2040      	movs	r0, #64	@ 0x40
 80020a2:	f001 f93e 	bl	8003322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80020a6:	2040      	movs	r0, #64	@ 0x40
 80020a8:	f001 f957 	bl	800335a <HAL_NVIC_EnableIRQ>
}
 80020ac:	bf00      	nop
 80020ae:	3730      	adds	r7, #48	@ 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40006400 	.word	0x40006400
 80020b8:	200012cc 	.word	0x200012cc
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40006800 	.word	0x40006800
 80020c8:	40020400 	.word	0x40020400

080020cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <HAL_UART_MspInit+0x94>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d134      	bne.n	8002158 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <HAL_UART_MspInit+0x98>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002164 <HAL_UART_MspInit+0x98>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <HAL_UART_MspInit+0x98>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_UART_MspInit+0x98>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <HAL_UART_MspInit+0x98>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_UART_MspInit+0x98>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002126:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002138:	2307      	movs	r3, #7
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4809      	ldr	r0, [pc, #36]	@ (8002168 <HAL_UART_MspInit+0x9c>)
 8002144:	f001 f9b6 	bl	80034b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2101      	movs	r1, #1
 800214c:	2027      	movs	r0, #39	@ 0x27
 800214e:	f001 f8e8 	bl	8003322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002152:	2027      	movs	r0, #39	@ 0x27
 8002154:	f001 f901 	bl	800335a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	@ 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40004800 	.word	0x40004800
 8002164:	40023800 	.word	0x40023800
 8002168:	40020800 	.word	0x40020800

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <NMI_Handler+0x4>

08002174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <MemManage_Handler+0x4>

08002184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <UsageFault_Handler+0x4>

08002194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c4:	f000 f922 	bl	800240c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <SysTick_Handler+0x18>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	4a02      	ldr	r2, [pc, #8]	@ (80021d8 <SysTick_Handler+0x18>)
 80021d0:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20001294 	.word	0x20001294

080021dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021e0:	2001      	movs	r0, #1
 80021e2:	f001 fb35 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021f0:	480f      	ldr	r0, [pc, #60]	@ (8002230 <CAN1_RX0_IRQHandler+0x44>)
 80021f2:	f000 fd82 	bl	8002cfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <CAN1_RX0_IRQHandler+0x48>)
 80021f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002238 <CAN1_RX0_IRQHandler+0x4c>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	480c      	ldr	r0, [pc, #48]	@ (8002230 <CAN1_RX0_IRQHandler+0x44>)
 80021fe:	f000 fc44 	bl	8002a8a <HAL_CAN_GetRxMessage>
  
  // Check if this is a diagnostic request (CAN ID 0x712)
  if (CAN1_pHeaderRx.StdId == DCM_REQUEST_CAN_ID) {
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <CAN1_RX0_IRQHandler+0x4c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f240 7212 	movw	r2, #1810	@ 0x712
 800220a:	4293      	cmp	r3, r2
 800220c:	d10d      	bne.n	800222a <CAN1_RX0_IRQHandler+0x3e>
      // Process diagnostic request
      DCM_ProcessRequest(CAN1_DATA_RX, CAN1_pHeaderRx.DLC);
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <CAN1_RX0_IRQHandler+0x4c>)
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	b29b      	uxth	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	4807      	ldr	r0, [pc, #28]	@ (8002234 <CAN1_RX0_IRQHandler+0x48>)
 8002218:	f7fe f9c0 	bl	800059c <DCM_ProcessRequest>
      
      // Print diagnostic request to UART for debugging
      PrintCANLog(CAN1_pHeaderRx.StdId, CAN1_DATA_RX);
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <CAN1_RX0_IRQHandler+0x4c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	4904      	ldr	r1, [pc, #16]	@ (8002234 <CAN1_RX0_IRQHandler+0x48>)
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f897 	bl	8001358 <PrintCANLog>
  }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000011c 	.word	0x2000011c
 8002234:	2000127c 	.word	0x2000127c
 8002238:	200001c8 	.word	0x200001c8

0800223c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002240:	4804      	ldr	r0, [pc, #16]	@ (8002254 <USART3_IRQHandler+0x18>)
 8002242:	f002 f8d1 	bl	80043e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8002246:	2201      	movs	r2, #1
 8002248:	4903      	ldr	r1, [pc, #12]	@ (8002258 <USART3_IRQHandler+0x1c>)
 800224a:	4802      	ldr	r0, [pc, #8]	@ (8002254 <USART3_IRQHandler+0x18>)
 800224c:	f002 f89b 	bl	8004386 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000016c 	.word	0x2000016c
 8002258:	20001270 	.word	0x20001270

0800225c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	// Removed unused variable: NumByteSend
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <CAN2_RX0_IRQHandler+0x1c>)
 8002262:	f000 fd4a 	bl	8002cfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <CAN2_RX0_IRQHandler+0x20>)
 8002268:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <CAN2_RX0_IRQHandler+0x24>)
 800226a:	2100      	movs	r1, #0
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <CAN2_RX0_IRQHandler+0x1c>)
 800226e:	f000 fc0c 	bl	8002a8a <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000144 	.word	0x20000144
 800227c:	2000128c 	.word	0x2000128c
 8002280:	20000224 	.word	0x20000224

08002284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800228c:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <_sbrk+0x5c>)
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <_sbrk+0x60>)
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <_sbrk+0x64>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <_sbrk+0x68>)
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d207      	bcs.n	80022c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b4:	f003 f82a 	bl	800530c <__errno>
 80022b8:	4603      	mov	r3, r0
 80022ba:	220c      	movs	r2, #12
 80022bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e009      	b.n	80022d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a05      	ldr	r2, [pc, #20]	@ (80022e8 <_sbrk+0x64>)
 80022d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20020000 	.word	0x20020000
 80022e4:	00000400 	.word	0x00000400
 80022e8:	200012d0 	.word	0x200012d0
 80022ec:	20001420 	.word	0x20001420

080022f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <SystemInit+0x20>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <SystemInit+0x20>)
 80022fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002314:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800234c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002318:	480d      	ldr	r0, [pc, #52]	@ (8002350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800231a:	490e      	ldr	r1, [pc, #56]	@ (8002354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800231c:	4a0e      	ldr	r2, [pc, #56]	@ (8002358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0b      	ldr	r2, [pc, #44]	@ (800235c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002330:	4c0b      	ldr	r4, [pc, #44]	@ (8002360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800233e:	f7ff ffd7 	bl	80022f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002342:	f002 ffe9 	bl	8005318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002346:	f7fe fd0b 	bl	8000d60 <main>
  bx  lr    
 800234a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800234c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002358:	08006ae8 	.word	0x08006ae8
  ldr r2, =_sbss
 800235c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002360:	20001420 	.word	0x20001420

08002364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC_IRQHandler>
	...

08002368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800236c:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <HAL_Init+0x40>)
 8002372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <HAL_Init+0x40>)
 800237e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002384:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	@ (80023a8 <HAL_Init+0x40>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002390:	2003      	movs	r0, #3
 8002392:	f000 ffbb 	bl	800330c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002396:	2000      	movs	r0, #0
 8002398:	f000 f808 	bl	80023ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800239c:	f7ff fdbe 	bl	8001f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00

080023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b4:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_InitTick+0x54>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <HAL_InitTick+0x58>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 ffd3 	bl	8003376 <HAL_SYSTICK_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00e      	b.n	80023f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d80a      	bhi.n	80023f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e0:	2200      	movs	r2, #0
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f000 ff9b 	bl	8003322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ec:	4a06      	ldr	r2, [pc, #24]	@ (8002408 <HAL_InitTick+0x5c>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	2000004c 	.word	0x2000004c
 8002404:	20000054 	.word	0x20000054
 8002408:	20000050 	.word	0x20000050

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	@ (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000054 	.word	0x20000054
 8002430:	200012d4 	.word	0x200012d4

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	@ (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200012d4 	.word	0x200012d4

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff ffee 	bl	8002434 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_Delay+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffde 	bl	8002434 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000054 	.word	0x20000054

08002494 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0ed      	b.n	8002682 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fd5a 	bl	8001f6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c8:	f7ff ffb4 	bl	8002434 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ce:	e012      	b.n	80024f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024d0:	f7ff ffb0 	bl	8002434 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b0a      	cmp	r3, #10
 80024dc:	d90b      	bls.n	80024f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2205      	movs	r2, #5
 80024ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0c5      	b.n	8002682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0e5      	beq.n	80024d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0202 	bic.w	r2, r2, #2
 8002512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002514:	f7ff ff8e 	bl	8002434 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800251a:	e012      	b.n	8002542 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800251c:	f7ff ff8a 	bl	8002434 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b0a      	cmp	r3, #10
 8002528:	d90b      	bls.n	8002542 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2205      	movs	r2, #5
 800253a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e09f      	b.n	8002682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e5      	bne.n	800251c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e1b      	ldrb	r3, [r3, #24]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7e5b      	ldrb	r3, [r3, #25]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e007      	b.n	80025a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e9b      	ldrb	r3, [r3, #26]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0220 	orr.w	r2, r2, #32
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e007      	b.n	80025ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0220 	bic.w	r2, r2, #32
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7edb      	ldrb	r3, [r3, #27]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0210 	bic.w	r2, r2, #16
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e007      	b.n	80025f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0210 	orr.w	r2, r2, #16
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7f1b      	ldrb	r3, [r3, #28]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d108      	bne.n	8002612 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0208 	orr.w	r2, r2, #8
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e007      	b.n	8002622 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0208 	bic.w	r2, r2, #8
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7f5b      	ldrb	r3, [r3, #29]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d108      	bne.n	800263c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0204 	orr.w	r2, r2, #4
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e007      	b.n	800264c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	ea42 0103 	orr.w	r1, r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d003      	beq.n	80026b2 <HAL_CAN_ConfigFilter+0x26>
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	f040 80be 	bne.w	800282e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026b2:	4b65      	ldr	r3, [pc, #404]	@ (8002848 <HAL_CAN_ConfigFilter+0x1bc>)
 80026b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026cc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	431a      	orrs	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2201      	movs	r2, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	401a      	ands	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d123      	bne.n	800275c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002736:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3248      	adds	r2, #72	@ 0x48
 800273c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002750:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002752:	6979      	ldr	r1, [r7, #20]
 8002754:	3348      	adds	r3, #72	@ 0x48
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d122      	bne.n	80027aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002784:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3248      	adds	r2, #72	@ 0x48
 800278a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800279e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027a0:	6979      	ldr	r1, [r7, #20]
 80027a2:	3348      	adds	r3, #72	@ 0x48
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	401a      	ands	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80027c4:	e007      	b.n	80027d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80027f0:	e007      	b.n	8002802 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	431a      	orrs	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002820:	f023 0201 	bic.w	r2, r3, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e006      	b.n	800283c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40006400 	.word	0x40006400

0800284c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d12e      	bne.n	80028be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002878:	f7ff fddc 	bl	8002434 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800287e:	e012      	b.n	80028a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002880:	f7ff fdd8 	bl	8002434 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b0a      	cmp	r3, #10
 800288c:	d90b      	bls.n	80028a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2205      	movs	r2, #5
 800289e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e012      	b.n	80028cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e5      	bne.n	8002880 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e006      	b.n	80028cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	@ 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d003      	beq.n	8002900 <HAL_CAN_AddTxMessage+0x2c>
 80028f8:	7ffb      	ldrb	r3, [r7, #31]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f040 80b8 	bne.w	8002a70 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80a0 	beq.w	8002a60 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	0e1b      	lsrs	r3, r3, #24
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d907      	bls.n	8002940 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e09e      	b.n	8002a7e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002940:	2201      	movs	r2, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	409a      	lsls	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	6809      	ldr	r1, [r1, #0]
 8002960:	431a      	orrs	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3318      	adds	r3, #24
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	440b      	add	r3, r1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e00f      	b.n	800298e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002978:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800297e:	68f9      	ldr	r1, [r7, #12]
 8002980:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002982:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3318      	adds	r3, #24
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	440b      	add	r3, r1
 800298c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	3318      	adds	r3, #24
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	440b      	add	r3, r1
 800299e:	3304      	adds	r3, #4
 80029a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	7d1b      	ldrb	r3, [r3, #20]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d111      	bne.n	80029ce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3318      	adds	r3, #24
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	4413      	add	r3, r2
 80029b6:	3304      	adds	r3, #4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	6811      	ldr	r1, [r2, #0]
 80029be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3318      	adds	r3, #24
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	440b      	add	r3, r1
 80029ca:	3304      	adds	r3, #4
 80029cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3307      	adds	r3, #7
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	061a      	lsls	r2, r3, #24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3306      	adds	r3, #6
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3305      	adds	r3, #5
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	4313      	orrs	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	3204      	adds	r2, #4
 80029ee:	7812      	ldrb	r2, [r2, #0]
 80029f0:	4610      	mov	r0, r2
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	6811      	ldr	r1, [r2, #0]
 80029f6:	ea43 0200 	orr.w	r2, r3, r0
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	440b      	add	r3, r1
 8002a00:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3303      	adds	r3, #3
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	061a      	lsls	r2, r3, #24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3302      	adds	r3, #2
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	4313      	orrs	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	4610      	mov	r0, r2
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	6811      	ldr	r1, [r2, #0]
 8002a2c:	ea43 0200 	orr.w	r2, r3, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	440b      	add	r3, r1
 8002a36:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3318      	adds	r3, #24
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	4413      	add	r3, r2
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	6811      	ldr	r1, [r2, #0]
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3318      	adds	r3, #24
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	440b      	add	r3, r1
 8002a5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e00e      	b.n	8002a7e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e006      	b.n	8002a7e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
  }
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	@ 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d003      	beq.n	8002aae <HAL_CAN_GetRxMessage+0x24>
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	f040 80f3 	bne.w	8002c94 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d116      	bne.n	8002af0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0e7      	b.n	8002ca2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0d8      	b.n	8002ca2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	331b      	adds	r3, #27
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	4413      	add	r3, r2
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0204 	and.w	r2, r3, #4
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10c      	bne.n	8002b28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	331b      	adds	r3, #27
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	4413      	add	r3, r2
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0d5b      	lsrs	r3, r3, #21
 8002b1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	331b      	adds	r3, #27
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	331b      	adds	r3, #27
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	4413      	add	r3, r2
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0202 	and.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	331b      	adds	r3, #27
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	331b      	adds	r3, #27
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	4413      	add	r3, r2
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	331b      	adds	r3, #27
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	0c1b      	lsrs	r3, r3, #16
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0a1a      	lsrs	r2, r3, #8
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0c1a      	lsrs	r2, r3, #16
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	3302      	adds	r3, #2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0e1a      	lsrs	r2, r3, #24
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	3303      	adds	r3, #3
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	3304      	adds	r3, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0a1a      	lsrs	r2, r3, #8
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3305      	adds	r3, #5
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0c1a      	lsrs	r2, r3, #16
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3306      	adds	r3, #6
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0e1a      	lsrs	r2, r3, #24
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3307      	adds	r3, #7
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d108      	bne.n	8002c80 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	e007      	b.n	8002c90 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0220 	orr.w	r2, r2, #32
 8002c8e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e006      	b.n	8002ca2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cbe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d002      	beq.n	8002ccc <HAL_CAN_ActivateNotification+0x1e>
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d109      	bne.n	8002ce0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6959      	ldr	r1, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e006      	b.n	8002cee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b08a      	sub	sp, #40	@ 0x28
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d07c      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d023      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f983 	bl	8003068 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d62:	e016      	b.n	8002d92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d76:	e00c      	b.n	8002d92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8a:	e002      	b.n	8002d92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f989 	bl	80030a4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d024      	beq.n	8002de6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002da4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f963 	bl	800307c <HAL_CAN_TxMailbox1CompleteCallback>
 8002db6:	e016      	b.n	8002de6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dca:	e00c      	b.n	8002de6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dde:	e002      	b.n	8002de6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f969 	bl	80030b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d024      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002df8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f943 	bl	8003090 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e0a:	e016      	b.n	8002e3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1e:	e00c      	b.n	8002e3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e32:	e002      	b.n	8002e3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f949 	bl	80030cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2208      	movs	r2, #8
 8002e78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f93a 	bl	80030f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f921 	bl	80030e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2208      	movs	r2, #8
 8002edc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f91c 	bl	800311c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f903 	bl	8003108 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f906 	bl	8003130 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d006      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f8ff 	bl	8003144 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d07b      	beq.n	8003048 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d072      	beq.n	8003040 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d043      	beq.n	8003040 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d03e      	beq.n	8003040 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc8:	2b60      	cmp	r3, #96	@ 0x60
 8002fca:	d02b      	beq.n	8003024 <HAL_CAN_IRQHandler+0x32a>
 8002fcc:	2b60      	cmp	r3, #96	@ 0x60
 8002fce:	d82e      	bhi.n	800302e <HAL_CAN_IRQHandler+0x334>
 8002fd0:	2b50      	cmp	r3, #80	@ 0x50
 8002fd2:	d022      	beq.n	800301a <HAL_CAN_IRQHandler+0x320>
 8002fd4:	2b50      	cmp	r3, #80	@ 0x50
 8002fd6:	d82a      	bhi.n	800302e <HAL_CAN_IRQHandler+0x334>
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	d019      	beq.n	8003010 <HAL_CAN_IRQHandler+0x316>
 8002fdc:	2b40      	cmp	r3, #64	@ 0x40
 8002fde:	d826      	bhi.n	800302e <HAL_CAN_IRQHandler+0x334>
 8002fe0:	2b30      	cmp	r3, #48	@ 0x30
 8002fe2:	d010      	beq.n	8003006 <HAL_CAN_IRQHandler+0x30c>
 8002fe4:	2b30      	cmp	r3, #48	@ 0x30
 8002fe6:	d822      	bhi.n	800302e <HAL_CAN_IRQHandler+0x334>
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d002      	beq.n	8002ff2 <HAL_CAN_IRQHandler+0x2f8>
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d005      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ff0:	e01d      	b.n	800302e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ffa:	e019      	b.n	8003030 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	f043 0310 	orr.w	r3, r3, #16
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003004:	e014      	b.n	8003030 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	f043 0320 	orr.w	r3, r3, #32
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800300e:	e00f      	b.n	8003030 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003018:	e00a      	b.n	8003030 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003022:	e005      	b.n	8003030 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800302c:	e000      	b.n	8003030 <HAL_CAN_IRQHandler+0x336>
            break;
 800302e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800303e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2204      	movs	r2, #4
 8003046:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f87c 	bl	8003158 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	@ 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db0b      	blt.n	80031fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4907      	ldr	r1, [pc, #28]	@ (8003208 <__NVIC_EnableIRQ+0x38>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2001      	movs	r0, #1
 80031f2:	fa00 f202 	lsl.w	r2, r0, r2
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000e100 	.word	0xe000e100

0800320c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db0a      	blt.n	8003236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	490c      	ldr	r1, [pc, #48]	@ (8003258 <__NVIC_SetPriority+0x4c>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	440b      	add	r3, r1
 8003230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003234:	e00a      	b.n	800324c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4908      	ldr	r1, [pc, #32]	@ (800325c <__NVIC_SetPriority+0x50>)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	3b04      	subs	r3, #4
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	440b      	add	r3, r1
 800324a:	761a      	strb	r2, [r3, #24]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000e100 	.word	0xe000e100
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f1c3 0307 	rsb	r3, r3, #7
 800327a:	2b04      	cmp	r3, #4
 800327c:	bf28      	it	cs
 800327e:	2304      	movcs	r3, #4
 8003280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3304      	adds	r3, #4
 8003286:	2b06      	cmp	r3, #6
 8003288:	d902      	bls.n	8003290 <NVIC_EncodePriority+0x30>
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3b03      	subs	r3, #3
 800328e:	e000      	b.n	8003292 <NVIC_EncodePriority+0x32>
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	401a      	ands	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	43d9      	mvns	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	4313      	orrs	r3, r2
         );
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3724      	adds	r7, #36	@ 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d8:	d301      	bcc.n	80032de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032da:	2301      	movs	r3, #1
 80032dc:	e00f      	b.n	80032fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <SysTick_Config+0x40>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e6:	210f      	movs	r1, #15
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	f7ff ff8e 	bl	800320c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <SysTick_Config+0x40>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f6:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <SysTick_Config+0x40>)
 80032f8:	2207      	movs	r2, #7
 80032fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000e010 	.word	0xe000e010

0800330c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff29 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003334:	f7ff ff3e 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 8003338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff ff8e 	bl	8003260 <NVIC_EncodePriority>
 8003344:	4602      	mov	r2, r0
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff5d 	bl	800320c <__NVIC_SetPriority>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff31 	bl	80031d0 <__NVIC_EnableIRQ>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ffa2 	bl	80032c8 <SysTick_Config>
 8003384:	4603      	mov	r3, r0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff f84a 	bl	8002434 <HAL_GetTick>
 80033a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d008      	beq.n	80033c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2280      	movs	r2, #128	@ 0x80
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e052      	b.n	8003466 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0216 	bic.w	r2, r2, #22
 80033ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d103      	bne.n	80033f0 <HAL_DMA_Abort+0x62>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0208 	bic.w	r2, r2, #8
 80033fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003410:	e013      	b.n	800343a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003412:	f7ff f80f 	bl	8002434 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b05      	cmp	r3, #5
 800341e:	d90c      	bls.n	800343a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e015      	b.n	8003466 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e4      	bne.n	8003412 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	223f      	movs	r2, #63	@ 0x3f
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d004      	beq.n	800348c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2280      	movs	r2, #128	@ 0x80
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e00c      	b.n	80034a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2205      	movs	r2, #5
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	@ 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	e16b      	b.n	80037a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034d0:	2201      	movs	r2, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	f040 815a 	bne.w	80037a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d005      	beq.n	8003506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003502:	2b02      	cmp	r3, #2
 8003504:	d130      	bne.n	8003568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	2203      	movs	r2, #3
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800353c:	2201      	movs	r2, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 0201 	and.w	r2, r3, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b03      	cmp	r3, #3
 8003572:	d017      	beq.n	80035a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d123      	bne.n	80035f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	08da      	lsrs	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3208      	adds	r2, #8
 80035b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	220f      	movs	r2, #15
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	08da      	lsrs	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3208      	adds	r2, #8
 80035f2:	69b9      	ldr	r1, [r7, #24]
 80035f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0203 	and.w	r2, r3, #3
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80b4 	beq.w	80037a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b60      	ldr	r3, [pc, #384]	@ (80037c0 <HAL_GPIO_Init+0x30c>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	4a5f      	ldr	r2, [pc, #380]	@ (80037c0 <HAL_GPIO_Init+0x30c>)
 8003644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003648:	6453      	str	r3, [r2, #68]	@ 0x44
 800364a:	4b5d      	ldr	r3, [pc, #372]	@ (80037c0 <HAL_GPIO_Init+0x30c>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003656:	4a5b      	ldr	r2, [pc, #364]	@ (80037c4 <HAL_GPIO_Init+0x310>)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3302      	adds	r3, #2
 800365e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	220f      	movs	r2, #15
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a52      	ldr	r2, [pc, #328]	@ (80037c8 <HAL_GPIO_Init+0x314>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d02b      	beq.n	80036da <HAL_GPIO_Init+0x226>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a51      	ldr	r2, [pc, #324]	@ (80037cc <HAL_GPIO_Init+0x318>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d025      	beq.n	80036d6 <HAL_GPIO_Init+0x222>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a50      	ldr	r2, [pc, #320]	@ (80037d0 <HAL_GPIO_Init+0x31c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01f      	beq.n	80036d2 <HAL_GPIO_Init+0x21e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4f      	ldr	r2, [pc, #316]	@ (80037d4 <HAL_GPIO_Init+0x320>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d019      	beq.n	80036ce <HAL_GPIO_Init+0x21a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4e      	ldr	r2, [pc, #312]	@ (80037d8 <HAL_GPIO_Init+0x324>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_GPIO_Init+0x216>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4d      	ldr	r2, [pc, #308]	@ (80037dc <HAL_GPIO_Init+0x328>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00d      	beq.n	80036c6 <HAL_GPIO_Init+0x212>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4c      	ldr	r2, [pc, #304]	@ (80037e0 <HAL_GPIO_Init+0x32c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <HAL_GPIO_Init+0x20e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4b      	ldr	r2, [pc, #300]	@ (80037e4 <HAL_GPIO_Init+0x330>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_GPIO_Init+0x20a>
 80036ba:	2307      	movs	r3, #7
 80036bc:	e00e      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036be:	2308      	movs	r3, #8
 80036c0:	e00c      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036c2:	2306      	movs	r3, #6
 80036c4:	e00a      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036c6:	2305      	movs	r3, #5
 80036c8:	e008      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036ca:	2304      	movs	r3, #4
 80036cc:	e006      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036ce:	2303      	movs	r3, #3
 80036d0:	e004      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e002      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036da:	2300      	movs	r3, #0
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	f002 0203 	and.w	r2, r2, #3
 80036e2:	0092      	lsls	r2, r2, #2
 80036e4:	4093      	lsls	r3, r2
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ec:	4935      	ldr	r1, [pc, #212]	@ (80037c4 <HAL_GPIO_Init+0x310>)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fa:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371e:	4a32      	ldr	r2, [pc, #200]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003724:	4b30      	ldr	r3, [pc, #192]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003748:	4a27      	ldr	r2, [pc, #156]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800374e:	4b26      	ldr	r3, [pc, #152]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003772:	4a1d      	ldr	r2, [pc, #116]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800379c:	4a12      	ldr	r2, [pc, #72]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3301      	adds	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b0f      	cmp	r3, #15
 80037ac:	f67f ae90 	bls.w	80034d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3724      	adds	r7, #36	@ 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40013800 	.word	0x40013800
 80037c8:	40020000 	.word	0x40020000
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40020800 	.word	0x40020800
 80037d4:	40020c00 	.word	0x40020c00
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40021400 	.word	0x40021400
 80037e0:	40021800 	.word	0x40021800
 80037e4:	40021c00 	.word	0x40021c00
 80037e8:	40013c00 	.word	0x40013c00

080037ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e001      	b.n	800380e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003838:	e003      	b.n	8003842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	041a      	lsls	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800385a:	4b08      	ldr	r3, [pc, #32]	@ (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003866:	4a05      	ldr	r2, [pc, #20]	@ (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f806 	bl	8003880 <HAL_GPIO_EXTI_Callback>
  }
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e267      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d075      	beq.n	80039a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038b6:	4b88      	ldr	r3, [pc, #544]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d00c      	beq.n	80038dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c2:	4b85      	ldr	r3, [pc, #532]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d112      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ce:	4b82      	ldr	r3, [pc, #520]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038da:	d10b      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05b      	beq.n	80039a0 <HAL_RCC_OscConfig+0x108>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d157      	bne.n	80039a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e242      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d106      	bne.n	800390c <HAL_RCC_OscConfig+0x74>
 80038fe:	4b76      	ldr	r3, [pc, #472]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a75      	ldr	r2, [pc, #468]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e01d      	b.n	8003948 <HAL_RCC_OscConfig+0xb0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x98>
 8003916:	4b70      	ldr	r3, [pc, #448]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800391c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6c      	ldr	r2, [pc, #432]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0xb0>
 8003930:	4b69      	ldr	r3, [pc, #420]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a68      	ldr	r2, [pc, #416]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b66      	ldr	r3, [pc, #408]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a65      	ldr	r2, [pc, #404]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe fd70 	bl	8002434 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe fd6c 	bl	8002434 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e207      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0xc0>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fe fd5c 	bl	8002434 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe fd58 	bl	8002434 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1f3      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	4b51      	ldr	r3, [pc, #324]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0xe8>
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d063      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ae:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ba:	4b47      	ldr	r3, [pc, #284]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d11c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b44      	ldr	r3, [pc, #272]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d116      	bne.n	8003a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d2:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x152>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e1c7      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4937      	ldr	r1, [pc, #220]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	e03a      	b.n	8003a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a08:	4b34      	ldr	r3, [pc, #208]	@ (8003adc <HAL_RCC_OscConfig+0x244>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fe fd11 	bl	8002434 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a16:	f7fe fd0d 	bl	8002434 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e1a8      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	4b28      	ldr	r3, [pc, #160]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4925      	ldr	r1, [pc, #148]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]
 8003a48:	e015      	b.n	8003a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a4a:	4b24      	ldr	r3, [pc, #144]	@ (8003adc <HAL_RCC_OscConfig+0x244>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe fcf0 	bl	8002434 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fe fcec 	bl	8002434 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e187      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d036      	beq.n	8003af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d016      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ae0 <HAL_RCC_OscConfig+0x248>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe fcd0 	bl	8002434 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fe fccc 	bl	8002434 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e167      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x200>
 8003ab6:	e01b      	b.n	8003af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <HAL_RCC_OscConfig+0x248>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fe fcb9 	bl	8002434 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac4:	e00e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac6:	f7fe fcb5 	bl	8002434 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d907      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e150      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	42470000 	.word	0x42470000
 8003ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	4b88      	ldr	r3, [pc, #544]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ea      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8097 	beq.w	8003c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b81      	ldr	r3, [pc, #516]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	4b7d      	ldr	r3, [pc, #500]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	4a7c      	ldr	r2, [pc, #496]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	4b77      	ldr	r3, [pc, #476]	@ (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d118      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b3a:	4b74      	ldr	r3, [pc, #464]	@ (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a73      	ldr	r2, [pc, #460]	@ (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b46:	f7fe fc75 	bl	8002434 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4e:	f7fe fc71 	bl	8002434 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e10c      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	4b6a      	ldr	r3, [pc, #424]	@ (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x2ea>
 8003b74:	4b64      	ldr	r3, [pc, #400]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	4a63      	ldr	r2, [pc, #396]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b80:	e01c      	b.n	8003bbc <HAL_RCC_OscConfig+0x324>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x30c>
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b96:	4b5c      	ldr	r3, [pc, #368]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0x324>
 8003ba4:	4b58      	ldr	r3, [pc, #352]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	4a57      	ldr	r2, [pc, #348]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb0:	4b55      	ldr	r3, [pc, #340]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	4a54      	ldr	r2, [pc, #336]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 0304 	bic.w	r3, r3, #4
 8003bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d015      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fe fc36 	bl	8002434 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fc32 	bl	8002434 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e0cb      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be2:	4b49      	ldr	r3, [pc, #292]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0ee      	beq.n	8003bcc <HAL_RCC_OscConfig+0x334>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fc20 	bl	8002434 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fc1c 	bl	8002434 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0b5      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1ee      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c20:	4b39      	ldr	r3, [pc, #228]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	4a38      	ldr	r2, [pc, #224]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80a1 	beq.w	8003d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c36:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d05c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d141      	bne.n	8003cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b31      	ldr	r3, [pc, #196]	@ (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fbf0 	bl	8002434 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fbec 	bl	8002434 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e087      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	019b      	lsls	r3, r3, #6
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	491b      	ldr	r1, [pc, #108]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7fe fbc5 	bl	8002434 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cae:	f7fe fbc1 	bl	8002434 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e05c      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc0:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x416>
 8003ccc:	e054      	b.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fbae 	bl	8002434 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe fbaa 	bl	8002434 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e045      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x444>
 8003cfa:	e03d      	b.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e038      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x4ec>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d028      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d121      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d11a      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d44:	4013      	ands	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d111      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0cc      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b68      	ldr	r3, [pc, #416]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d90c      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b65      	ldr	r3, [pc, #404]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b63      	ldr	r3, [pc, #396]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0b8      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ddc:	4b59      	ldr	r3, [pc, #356]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a58      	ldr	r2, [pc, #352]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df4:	4b53      	ldr	r3, [pc, #332]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a52      	ldr	r2, [pc, #328]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e00:	4b50      	ldr	r3, [pc, #320]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	494d      	ldr	r1, [pc, #308]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d044      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b47      	ldr	r3, [pc, #284]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d119      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e07f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d003      	beq.n	8003e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b3f      	ldr	r3, [pc, #252]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e56:	4b3b      	ldr	r3, [pc, #236]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e067      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e66:	4b37      	ldr	r3, [pc, #220]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4934      	ldr	r1, [pc, #208]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e78:	f7fe fadc 	bl	8002434 <HAL_GetTick>
 8003e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e80:	f7fe fad8 	bl	8002434 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e04f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	4b2b      	ldr	r3, [pc, #172]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 020c 	and.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d1eb      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d20c      	bcs.n	8003ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b22      	ldr	r3, [pc, #136]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e032      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003edc:	4b19      	ldr	r3, [pc, #100]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4916      	ldr	r1, [pc, #88]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003efa:	4b12      	ldr	r3, [pc, #72]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	490e      	ldr	r1, [pc, #56]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f0e:	f000 f821 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003f12:	4602      	mov	r2, r0
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	490a      	ldr	r1, [pc, #40]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003f20:	5ccb      	ldrb	r3, [r1, r3]
 8003f22:	fa22 f303 	lsr.w	r3, r2, r3
 8003f26:	4a09      	ldr	r2, [pc, #36]	@ (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f2a:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fa3c 	bl	80023ac <HAL_InitTick>

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023c00 	.word	0x40023c00
 8003f44:	40023800 	.word	0x40023800
 8003f48:	08006a8c 	.word	0x08006a8c
 8003f4c:	2000004c 	.word	0x2000004c
 8003f50:	20000050 	.word	0x20000050

08003f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f58:	b094      	sub	sp, #80	@ 0x50
 8003f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f60:	2300      	movs	r3, #0
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f64:	2300      	movs	r3, #0
 8003f66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f6c:	4b79      	ldr	r3, [pc, #484]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d00d      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x40>
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	f200 80e1 	bhi.w	8004140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x34>
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d003      	beq.n	8003f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f86:	e0db      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4b73      	ldr	r3, [pc, #460]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003f8c:	e0db      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f8e:	4b73      	ldr	r3, [pc, #460]	@ (800415c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f92:	e0d8      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f94:	4b6f      	ldr	r3, [pc, #444]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d063      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003faa:	4b6a      	ldr	r3, [pc, #424]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	099b      	lsrs	r3, r3, #6
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	462b      	mov	r3, r5
 8003fca:	f04f 0000 	mov.w	r0, #0
 8003fce:	f04f 0100 	mov.w	r1, #0
 8003fd2:	0159      	lsls	r1, r3, #5
 8003fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd8:	0150      	lsls	r0, r2, #5
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4621      	mov	r1, r4
 8003fe0:	1a51      	subs	r1, r2, r1
 8003fe2:	6139      	str	r1, [r7, #16]
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff8:	4659      	mov	r1, fp
 8003ffa:	018b      	lsls	r3, r1, #6
 8003ffc:	4651      	mov	r1, sl
 8003ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004002:	4651      	mov	r1, sl
 8004004:	018a      	lsls	r2, r1, #6
 8004006:	4651      	mov	r1, sl
 8004008:	ebb2 0801 	subs.w	r8, r2, r1
 800400c:	4659      	mov	r1, fp
 800400e:	eb63 0901 	sbc.w	r9, r3, r1
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800401e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004026:	4690      	mov	r8, r2
 8004028:	4699      	mov	r9, r3
 800402a:	4623      	mov	r3, r4
 800402c:	eb18 0303 	adds.w	r3, r8, r3
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	462b      	mov	r3, r5
 8004034:	eb49 0303 	adc.w	r3, r9, r3
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004046:	4629      	mov	r1, r5
 8004048:	024b      	lsls	r3, r1, #9
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004050:	4621      	mov	r1, r4
 8004052:	024a      	lsls	r2, r1, #9
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405a:	2200      	movs	r2, #0
 800405c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800405e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004064:	f7fc f904 	bl	8000270 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4613      	mov	r3, r2
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004070:	e058      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b38      	ldr	r3, [pc, #224]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	2200      	movs	r2, #0
 800407a:	4618      	mov	r0, r3
 800407c:	4611      	mov	r1, r2
 800407e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	2300      	movs	r3, #0
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24
 8004088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	f04f 0000 	mov.w	r0, #0
 8004094:	f04f 0100 	mov.w	r1, #0
 8004098:	0159      	lsls	r1, r3, #5
 800409a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800409e:	0150      	lsls	r0, r2, #5
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4641      	mov	r1, r8
 80040a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040aa:	4649      	mov	r1, r9
 80040ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040c4:	ebb2 040a 	subs.w	r4, r2, sl
 80040c8:	eb63 050b 	sbc.w	r5, r3, fp
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	00eb      	lsls	r3, r5, #3
 80040d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040da:	00e2      	lsls	r2, r4, #3
 80040dc:	4614      	mov	r4, r2
 80040de:	461d      	mov	r5, r3
 80040e0:	4643      	mov	r3, r8
 80040e2:	18e3      	adds	r3, r4, r3
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	464b      	mov	r3, r9
 80040e8:	eb45 0303 	adc.w	r3, r5, r3
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fa:	4629      	mov	r1, r5
 80040fc:	028b      	lsls	r3, r1, #10
 80040fe:	4621      	mov	r1, r4
 8004100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004104:	4621      	mov	r1, r4
 8004106:	028a      	lsls	r2, r1, #10
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410e:	2200      	movs	r2, #0
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	61fa      	str	r2, [r7, #28]
 8004114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004118:	f7fc f8aa 	bl	8000270 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004124:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	3301      	adds	r3, #1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800413e:	e002      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x204>)
 8004142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004148:	4618      	mov	r0, r3
 800414a:	3750      	adds	r7, #80	@ 0x50
 800414c:	46bd      	mov	sp, r7
 800414e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	00f42400 	.word	0x00f42400
 800415c:	007a1200 	.word	0x007a1200

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <HAL_RCC_GetHCLKFreq+0x14>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	2000004c 	.word	0x2000004c

08004178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800417c:	f7ff fff0 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0a9b      	lsrs	r3, r3, #10
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4903      	ldr	r1, [pc, #12]	@ (800419c <HAL_RCC_GetPCLK1Freq+0x24>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	08006a9c 	.word	0x08006a9c

080041a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a4:	f7ff ffdc 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	0b5b      	lsrs	r3, r3, #13
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4903      	ldr	r1, [pc, #12]	@ (80041c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b6:	5ccb      	ldrb	r3, [r1, r3]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40023800 	.word	0x40023800
 80041c4:	08006a9c 	.word	0x08006a9c

080041c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e03f      	b.n	800425a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd ff6c 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	@ 0x24
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800420a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fddf 	bl	8004dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b08a      	sub	sp, #40	@ 0x28
 8004266:	af02      	add	r7, sp, #8
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b20      	cmp	r3, #32
 8004280:	d17c      	bne.n	800437c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_UART_Transmit+0x2c>
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e075      	b.n	800437e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Transmit+0x3e>
 800429c:	2302      	movs	r3, #2
 800429e:	e06e      	b.n	800437e <HAL_UART_Transmit+0x11c>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2221      	movs	r2, #33	@ 0x21
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b6:	f7fe f8bd 	bl	8002434 <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d0:	d108      	bne.n	80042e4 <HAL_UART_Transmit+0x82>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d104      	bne.n	80042e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	e003      	b.n	80042ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80042f4:	e02a      	b.n	800434c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	@ 0x80
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fb1f 	bl	8004944 <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e036      	b.n	800437e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3302      	adds	r3, #2
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	e007      	b.n	800433e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1cf      	bne.n	80042f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2140      	movs	r1, #64	@ 0x40
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 faef 	bl	8004944 <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e006      	b.n	800437e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	4613      	mov	r3, r2
 8004392:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b20      	cmp	r3, #32
 800439e:	d11d      	bne.n	80043dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_UART_Receive_IT+0x26>
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e016      	b.n	80043de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_UART_Receive_IT+0x38>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e00f      	b.n	80043de <HAL_UART_Receive_IT+0x58>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fb24 	bl	8004a20 <UART_Start_Receive_IT>
 80043d8:	4603      	mov	r3, r0
 80043da:	e000      	b.n	80043de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b0ba      	sub	sp, #232	@ 0xe8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_UART_IRQHandler+0x66>
 800443a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fc07 	bl	8004c5a <UART_Receive_IT>
      return;
 800444c:	e256      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800444e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80de 	beq.w	8004614 <HAL_UART_IRQHandler+0x22c>
 8004458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004468:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80d1 	beq.w	8004614 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_UART_IRQHandler+0xae>
 800447e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <HAL_UART_IRQHandler+0xd2>
 80044a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	f043 0202 	orr.w	r2, r3, #2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_UART_IRQHandler+0xf6>
 80044c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d011      	beq.n	800450e <HAL_UART_IRQHandler+0x126>
 80044ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f043 0208 	orr.w	r2, r3, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 81ed 	beq.w	80048f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_UART_IRQHandler+0x14e>
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fb92 	bl	8004c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b40      	cmp	r3, #64	@ 0x40
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_UART_IRQHandler+0x17a>
 800455a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04f      	beq.n	8004602 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa9a 	bl	8004a9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004572:	2b40      	cmp	r3, #64	@ 0x40
 8004574:	d141      	bne.n	80045fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800458c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80045ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1d9      	bne.n	8004576 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d013      	beq.n	80045f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	4a7d      	ldr	r2, [pc, #500]	@ (80047c4 <HAL_UART_IRQHandler+0x3dc>)
 80045d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe ff49 	bl	800346e <HAL_DMA_Abort_IT>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045ec:	4610      	mov	r0, r2
 80045ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f0:	e00e      	b.n	8004610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f990 	bl	8004918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	e00a      	b.n	8004610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f98c 	bl	8004918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004600:	e006      	b.n	8004610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f988 	bl	8004918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800460e:	e170      	b.n	80048f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	bf00      	nop
    return;
 8004612:	e16e      	b.n	80048f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004618:	2b01      	cmp	r3, #1
 800461a:	f040 814a 	bne.w	80048b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8143 	beq.w	80048b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 813c 	beq.w	80048b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465a:	2b40      	cmp	r3, #64	@ 0x40
 800465c:	f040 80b4 	bne.w	80047c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800466c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8140 	beq.w	80048f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800467a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800467e:	429a      	cmp	r2, r3
 8004680:	f080 8139 	bcs.w	80048f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800468a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004696:	f000 8088 	beq.w	80047aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80046c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1d9      	bne.n	800469a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3314      	adds	r3, #20
 8004706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800470a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800470e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004712:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800471c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e1      	bne.n	80046e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3314      	adds	r3, #20
 8004728:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004748:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800474c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e3      	bne.n	8004722 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800478c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800478e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004792:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800479a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e3      	bne.n	8004768 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fdf2 	bl	800338e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8b6 	bl	800492c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047c0:	e099      	b.n	80048f6 <HAL_UART_IRQHandler+0x50e>
 80047c2:	bf00      	nop
 80047c4:	08004b63 	.word	0x08004b63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 808b 	beq.w	80048fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8086 	beq.w	80048fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004804:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004812:	647a      	str	r2, [r7, #68]	@ 0x44
 8004814:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e3      	bne.n	80047ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	623b      	str	r3, [r7, #32]
   return(result);
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800484a:	633a      	str	r2, [r7, #48]	@ 0x30
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e3      	bne.n	8004826 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	60fb      	str	r3, [r7, #12]
   return(result);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0310 	bic.w	r3, r3, #16
 8004882:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004890:	61fa      	str	r2, [r7, #28]
 8004892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	617b      	str	r3, [r7, #20]
   return(result);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e3      	bne.n	800486c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f83e 	bl	800492c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048b0:	e023      	b.n	80048fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_UART_IRQHandler+0x4ea>
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f95d 	bl	8004b8a <UART_Transmit_IT>
    return;
 80048d0:	e014      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00e      	beq.n	80048fc <HAL_UART_IRQHandler+0x514>
 80048de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f99d 	bl	8004c2a <UART_EndTransmit_IT>
    return;
 80048f0:	e004      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
    return;
 80048f2:	bf00      	nop
 80048f4:	e002      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
      return;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
      return;
 80048fa:	bf00      	nop
  }
}
 80048fc:	37e8      	adds	r7, #232	@ 0xe8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop

08004904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b090      	sub	sp, #64	@ 0x40
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004954:	e050      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d04c      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800495e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x30>
 8004964:	f7fd fd66 	bl	8002434 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004970:	429a      	cmp	r2, r3
 8004972:	d241      	bcs.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004994:	637a      	str	r2, [r7, #52]	@ 0x34
 8004996:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800499a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80049a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e5      	bne.n	8004974 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	613b      	str	r3, [r7, #16]
   return(result);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049c8:	623a      	str	r2, [r7, #32]
 80049ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	69f9      	ldr	r1, [r7, #28]
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e00f      	b.n	8004a18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d09f      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3740      	adds	r7, #64	@ 0x40
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2222      	movs	r2, #34	@ 0x22
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0220 	orr.w	r2, r2, #32
 8004a8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b095      	sub	sp, #84	@ 0x54
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ac4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3314      	adds	r3, #20
 8004ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e5      	bne.n	8004ad8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d119      	bne.n	8004b48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b34:	61ba      	str	r2, [r7, #24]
 8004b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6979      	ldr	r1, [r7, #20]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	613b      	str	r3, [r7, #16]
   return(result);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b56:	bf00      	nop
 8004b58:	3754      	adds	r7, #84	@ 0x54
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff fecb 	bl	8004918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b21      	cmp	r3, #33	@ 0x21
 8004b9c:	d13e      	bne.n	8004c1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba6:	d114      	bne.n	8004bd2 <UART_Transmit_IT+0x48>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d110      	bne.n	8004bd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	621a      	str	r2, [r3, #32]
 8004bd0:	e008      	b.n	8004be4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6211      	str	r1, [r2, #32]
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fe5a 	bl	8004904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b08c      	sub	sp, #48	@ 0x30
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b22      	cmp	r3, #34	@ 0x22
 8004c6c:	f040 80ab 	bne.w	8004dc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c78:	d117      	bne.n	8004caa <UART_Receive_IT+0x50>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d113      	bne.n	8004caa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca2:	1c9a      	adds	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ca8:	e026      	b.n	8004cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbc:	d007      	beq.n	8004cce <UART_Receive_IT+0x74>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <UART_Receive_IT+0x82>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e008      	b.n	8004cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	4619      	mov	r1, r3
 8004d06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d15a      	bne.n	8004dc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0220 	bic.w	r2, r2, #32
 8004d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d135      	bne.n	8004db8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	613b      	str	r3, [r7, #16]
   return(result);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f023 0310 	bic.w	r3, r3, #16
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d72:	623a      	str	r2, [r7, #32]
 8004d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	69f9      	ldr	r1, [r7, #28]
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d10a      	bne.n	8004daa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fdbb 	bl	800492c <HAL_UARTEx_RxEventCallback>
 8004db6:	e002      	b.n	8004dbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fc fb5d 	bl	8001478 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e002      	b.n	8004dc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e000      	b.n	8004dc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
  }
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3730      	adds	r7, #48	@ 0x30
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b0c0      	sub	sp, #256	@ 0x100
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	68d9      	ldr	r1, [r3, #12]
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	ea40 0301 	orr.w	r3, r0, r1
 8004df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e28:	f021 010c 	bic.w	r1, r1, #12
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e36:	430b      	orrs	r3, r1
 8004e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	6999      	ldr	r1, [r3, #24]
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	ea40 0301 	orr.w	r3, r0, r1
 8004e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800509c <UART_SetConfig+0x2cc>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d005      	beq.n	8004e70 <UART_SetConfig+0xa0>
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80050a0 <UART_SetConfig+0x2d0>)
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d104      	bne.n	8004e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7ff f996 	bl	80041a0 <HAL_RCC_GetPCLK2Freq>
 8004e74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e78:	e003      	b.n	8004e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e7a:	f7ff f97d 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 8004e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e8c:	f040 810c 	bne.w	80050a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	1891      	adds	r1, r2, r2
 8004ea8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004eaa:	415b      	adcs	r3, r3
 8004eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	eb12 0801 	adds.w	r8, r2, r1
 8004eb8:	4629      	mov	r1, r5
 8004eba:	eb43 0901 	adc.w	r9, r3, r1
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ed2:	4690      	mov	r8, r2
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	eb18 0303 	adds.w	r3, r8, r3
 8004edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	eb49 0303 	adc.w	r3, r9, r3
 8004ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004efe:	460b      	mov	r3, r1
 8004f00:	18db      	adds	r3, r3, r3
 8004f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f04:	4613      	mov	r3, r2
 8004f06:	eb42 0303 	adc.w	r3, r2, r3
 8004f0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f14:	f7fb f9ac 	bl	8000270 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4b61      	ldr	r3, [pc, #388]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8004f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	011c      	lsls	r4, r3, #4
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	1891      	adds	r1, r2, r2
 8004f3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f40:	415b      	adcs	r3, r3
 8004f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f48:	4641      	mov	r1, r8
 8004f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f4e:	4649      	mov	r1, r9
 8004f50:	eb43 0b01 	adc.w	fp, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f68:	4692      	mov	sl, r2
 8004f6a:	469b      	mov	fp, r3
 8004f6c:	4643      	mov	r3, r8
 8004f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f76:	464b      	mov	r3, r9
 8004f78:	eb4b 0303 	adc.w	r3, fp, r3
 8004f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f94:	460b      	mov	r3, r1
 8004f96:	18db      	adds	r3, r3, r3
 8004f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	eb42 0303 	adc.w	r3, r2, r3
 8004fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004faa:	f7fb f961 	bl	8000270 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8004fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2264      	movs	r2, #100	@ 0x64
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	1acb      	subs	r3, r1, r3
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fca:	4b36      	ldr	r3, [pc, #216]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8004fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fd8:	441c      	add	r4, r3
 8004fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	1851      	adds	r1, r2, r1
 8005000:	6339      	str	r1, [r7, #48]	@ 0x30
 8005002:	4649      	mov	r1, r9
 8005004:	414b      	adcs	r3, r1
 8005006:	637b      	str	r3, [r7, #52]	@ 0x34
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005014:	4659      	mov	r1, fp
 8005016:	00cb      	lsls	r3, r1, #3
 8005018:	4651      	mov	r1, sl
 800501a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501e:	4651      	mov	r1, sl
 8005020:	00ca      	lsls	r2, r1, #3
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
 8005026:	4603      	mov	r3, r0
 8005028:	4642      	mov	r2, r8
 800502a:	189b      	adds	r3, r3, r2
 800502c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005030:	464b      	mov	r3, r9
 8005032:	460a      	mov	r2, r1
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005048:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800504c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005050:	460b      	mov	r3, r1
 8005052:	18db      	adds	r3, r3, r3
 8005054:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005056:	4613      	mov	r3, r2
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800505e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005066:	f7fb f903 	bl	8000270 <__aeabi_uldivmod>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8005070:	fba3 1302 	umull	r1, r3, r3, r2
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	2164      	movs	r1, #100	@ 0x64
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	3332      	adds	r3, #50	@ 0x32
 8005082:	4a08      	ldr	r2, [pc, #32]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	f003 0207 	and.w	r2, r3, #7
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4422      	add	r2, r4
 8005096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005098:	e106      	b.n	80052a8 <UART_SetConfig+0x4d8>
 800509a:	bf00      	nop
 800509c:	40011000 	.word	0x40011000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050ba:	4642      	mov	r2, r8
 80050bc:	464b      	mov	r3, r9
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	6239      	str	r1, [r7, #32]
 80050c2:	415b      	adcs	r3, r3
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ca:	4641      	mov	r1, r8
 80050cc:	1854      	adds	r4, r2, r1
 80050ce:	4649      	mov	r1, r9
 80050d0:	eb43 0501 	adc.w	r5, r3, r1
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	00eb      	lsls	r3, r5, #3
 80050de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e2:	00e2      	lsls	r2, r4, #3
 80050e4:	4614      	mov	r4, r2
 80050e6:	461d      	mov	r5, r3
 80050e8:	4643      	mov	r3, r8
 80050ea:	18e3      	adds	r3, r4, r3
 80050ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050f0:	464b      	mov	r3, r9
 80050f2:	eb45 0303 	adc.w	r3, r5, r3
 80050f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005106:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005116:	4629      	mov	r1, r5
 8005118:	008b      	lsls	r3, r1, #2
 800511a:	4621      	mov	r1, r4
 800511c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005120:	4621      	mov	r1, r4
 8005122:	008a      	lsls	r2, r1, #2
 8005124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005128:	f7fb f8a2 	bl	8000270 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4b60      	ldr	r3, [pc, #384]	@ (80052b4 <UART_SetConfig+0x4e4>)
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	011c      	lsls	r4, r3, #4
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005144:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	61b9      	str	r1, [r7, #24]
 8005154:	415b      	adcs	r3, r3
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800515c:	4641      	mov	r1, r8
 800515e:	1851      	adds	r1, r2, r1
 8005160:	6139      	str	r1, [r7, #16]
 8005162:	4649      	mov	r1, r9
 8005164:	414b      	adcs	r3, r1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005174:	4659      	mov	r1, fp
 8005176:	00cb      	lsls	r3, r1, #3
 8005178:	4651      	mov	r1, sl
 800517a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517e:	4651      	mov	r1, sl
 8005180:	00ca      	lsls	r2, r1, #3
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	4603      	mov	r3, r0
 8005188:	4642      	mov	r2, r8
 800518a:	189b      	adds	r3, r3, r2
 800518c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005190:	464b      	mov	r3, r9
 8005192:	460a      	mov	r2, r1
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051b4:	4649      	mov	r1, r9
 80051b6:	008b      	lsls	r3, r1, #2
 80051b8:	4641      	mov	r1, r8
 80051ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051be:	4641      	mov	r1, r8
 80051c0:	008a      	lsls	r2, r1, #2
 80051c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051c6:	f7fb f853 	bl	8000270 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4611      	mov	r1, r2
 80051d0:	4b38      	ldr	r3, [pc, #224]	@ (80052b4 <UART_SetConfig+0x4e4>)
 80051d2:	fba3 2301 	umull	r2, r3, r3, r1
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2264      	movs	r2, #100	@ 0x64
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	1acb      	subs	r3, r1, r3
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	3332      	adds	r3, #50	@ 0x32
 80051e4:	4a33      	ldr	r2, [pc, #204]	@ (80052b4 <UART_SetConfig+0x4e4>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051f0:	441c      	add	r4, r3
 80051f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f6:	2200      	movs	r2, #0
 80051f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80051fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80051fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	415b      	adcs	r3, r3
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005210:	4641      	mov	r1, r8
 8005212:	1851      	adds	r1, r2, r1
 8005214:	6039      	str	r1, [r7, #0]
 8005216:	4649      	mov	r1, r9
 8005218:	414b      	adcs	r3, r1
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005228:	4659      	mov	r1, fp
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	4651      	mov	r1, sl
 800522e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005232:	4651      	mov	r1, sl
 8005234:	00ca      	lsls	r2, r1, #3
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	4603      	mov	r3, r0
 800523c:	4642      	mov	r2, r8
 800523e:	189b      	adds	r3, r3, r2
 8005240:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005242:	464b      	mov	r3, r9
 8005244:	460a      	mov	r2, r1
 8005246:	eb42 0303 	adc.w	r3, r2, r3
 800524a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	663b      	str	r3, [r7, #96]	@ 0x60
 8005256:	667a      	str	r2, [r7, #100]	@ 0x64
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005264:	4649      	mov	r1, r9
 8005266:	008b      	lsls	r3, r1, #2
 8005268:	4641      	mov	r1, r8
 800526a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526e:	4641      	mov	r1, r8
 8005270:	008a      	lsls	r2, r1, #2
 8005272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005276:	f7fa fffb 	bl	8000270 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <UART_SetConfig+0x4e4>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	@ 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	3332      	adds	r3, #50	@ 0x32
 8005292:	4a08      	ldr	r2, [pc, #32]	@ (80052b4 <UART_SetConfig+0x4e4>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 020f 	and.w	r2, r3, #15
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4422      	add	r2, r4
 80052a6:	609a      	str	r2, [r3, #8]
}
 80052a8:	bf00      	nop
 80052aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052ae:	46bd      	mov	sp, r7
 80052b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b4:	51eb851f 	.word	0x51eb851f

080052b8 <siprintf>:
 80052b8:	b40e      	push	{r1, r2, r3}
 80052ba:	b510      	push	{r4, lr}
 80052bc:	b09d      	sub	sp, #116	@ 0x74
 80052be:	ab1f      	add	r3, sp, #124	@ 0x7c
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	9006      	str	r0, [sp, #24]
 80052c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052c8:	480a      	ldr	r0, [pc, #40]	@ (80052f4 <siprintf+0x3c>)
 80052ca:	9107      	str	r1, [sp, #28]
 80052cc:	9104      	str	r1, [sp, #16]
 80052ce:	490a      	ldr	r1, [pc, #40]	@ (80052f8 <siprintf+0x40>)
 80052d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d4:	9105      	str	r1, [sp, #20]
 80052d6:	2400      	movs	r4, #0
 80052d8:	a902      	add	r1, sp, #8
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80052e0:	f000 f994 	bl	800560c <_svfiprintf_r>
 80052e4:	9b02      	ldr	r3, [sp, #8]
 80052e6:	701c      	strb	r4, [r3, #0]
 80052e8:	b01d      	add	sp, #116	@ 0x74
 80052ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ee:	b003      	add	sp, #12
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000058 	.word	0x20000058
 80052f8:	ffff0208 	.word	0xffff0208

080052fc <memset>:
 80052fc:	4402      	add	r2, r0
 80052fe:	4603      	mov	r3, r0
 8005300:	4293      	cmp	r3, r2
 8005302:	d100      	bne.n	8005306 <memset+0xa>
 8005304:	4770      	bx	lr
 8005306:	f803 1b01 	strb.w	r1, [r3], #1
 800530a:	e7f9      	b.n	8005300 <memset+0x4>

0800530c <__errno>:
 800530c:	4b01      	ldr	r3, [pc, #4]	@ (8005314 <__errno+0x8>)
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000058 	.word	0x20000058

08005318 <__libc_init_array>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4d0d      	ldr	r5, [pc, #52]	@ (8005350 <__libc_init_array+0x38>)
 800531c:	4c0d      	ldr	r4, [pc, #52]	@ (8005354 <__libc_init_array+0x3c>)
 800531e:	1b64      	subs	r4, r4, r5
 8005320:	10a4      	asrs	r4, r4, #2
 8005322:	2600      	movs	r6, #0
 8005324:	42a6      	cmp	r6, r4
 8005326:	d109      	bne.n	800533c <__libc_init_array+0x24>
 8005328:	4d0b      	ldr	r5, [pc, #44]	@ (8005358 <__libc_init_array+0x40>)
 800532a:	4c0c      	ldr	r4, [pc, #48]	@ (800535c <__libc_init_array+0x44>)
 800532c:	f000 fc64 	bl	8005bf8 <_init>
 8005330:	1b64      	subs	r4, r4, r5
 8005332:	10a4      	asrs	r4, r4, #2
 8005334:	2600      	movs	r6, #0
 8005336:	42a6      	cmp	r6, r4
 8005338:	d105      	bne.n	8005346 <__libc_init_array+0x2e>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005340:	4798      	blx	r3
 8005342:	3601      	adds	r6, #1
 8005344:	e7ee      	b.n	8005324 <__libc_init_array+0xc>
 8005346:	f855 3b04 	ldr.w	r3, [r5], #4
 800534a:	4798      	blx	r3
 800534c:	3601      	adds	r6, #1
 800534e:	e7f2      	b.n	8005336 <__libc_init_array+0x1e>
 8005350:	08006ae0 	.word	0x08006ae0
 8005354:	08006ae0 	.word	0x08006ae0
 8005358:	08006ae0 	.word	0x08006ae0
 800535c:	08006ae4 	.word	0x08006ae4

08005360 <__retarget_lock_acquire_recursive>:
 8005360:	4770      	bx	lr

08005362 <__retarget_lock_release_recursive>:
 8005362:	4770      	bx	lr

08005364 <_free_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4605      	mov	r5, r0
 8005368:	2900      	cmp	r1, #0
 800536a:	d041      	beq.n	80053f0 <_free_r+0x8c>
 800536c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005370:	1f0c      	subs	r4, r1, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	bfb8      	it	lt
 8005376:	18e4      	addlt	r4, r4, r3
 8005378:	f000 f8e0 	bl	800553c <__malloc_lock>
 800537c:	4a1d      	ldr	r2, [pc, #116]	@ (80053f4 <_free_r+0x90>)
 800537e:	6813      	ldr	r3, [r2, #0]
 8005380:	b933      	cbnz	r3, 8005390 <_free_r+0x2c>
 8005382:	6063      	str	r3, [r4, #4]
 8005384:	6014      	str	r4, [r2, #0]
 8005386:	4628      	mov	r0, r5
 8005388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800538c:	f000 b8dc 	b.w	8005548 <__malloc_unlock>
 8005390:	42a3      	cmp	r3, r4
 8005392:	d908      	bls.n	80053a6 <_free_r+0x42>
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	1821      	adds	r1, r4, r0
 8005398:	428b      	cmp	r3, r1
 800539a:	bf01      	itttt	eq
 800539c:	6819      	ldreq	r1, [r3, #0]
 800539e:	685b      	ldreq	r3, [r3, #4]
 80053a0:	1809      	addeq	r1, r1, r0
 80053a2:	6021      	streq	r1, [r4, #0]
 80053a4:	e7ed      	b.n	8005382 <_free_r+0x1e>
 80053a6:	461a      	mov	r2, r3
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	b10b      	cbz	r3, 80053b0 <_free_r+0x4c>
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	d9fa      	bls.n	80053a6 <_free_r+0x42>
 80053b0:	6811      	ldr	r1, [r2, #0]
 80053b2:	1850      	adds	r0, r2, r1
 80053b4:	42a0      	cmp	r0, r4
 80053b6:	d10b      	bne.n	80053d0 <_free_r+0x6c>
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	4401      	add	r1, r0
 80053bc:	1850      	adds	r0, r2, r1
 80053be:	4283      	cmp	r3, r0
 80053c0:	6011      	str	r1, [r2, #0]
 80053c2:	d1e0      	bne.n	8005386 <_free_r+0x22>
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	6053      	str	r3, [r2, #4]
 80053ca:	4408      	add	r0, r1
 80053cc:	6010      	str	r0, [r2, #0]
 80053ce:	e7da      	b.n	8005386 <_free_r+0x22>
 80053d0:	d902      	bls.n	80053d8 <_free_r+0x74>
 80053d2:	230c      	movs	r3, #12
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	e7d6      	b.n	8005386 <_free_r+0x22>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	1821      	adds	r1, r4, r0
 80053dc:	428b      	cmp	r3, r1
 80053de:	bf04      	itt	eq
 80053e0:	6819      	ldreq	r1, [r3, #0]
 80053e2:	685b      	ldreq	r3, [r3, #4]
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	bf04      	itt	eq
 80053e8:	1809      	addeq	r1, r1, r0
 80053ea:	6021      	streq	r1, [r4, #0]
 80053ec:	6054      	str	r4, [r2, #4]
 80053ee:	e7ca      	b.n	8005386 <_free_r+0x22>
 80053f0:	bd38      	pop	{r3, r4, r5, pc}
 80053f2:	bf00      	nop
 80053f4:	2000141c 	.word	0x2000141c

080053f8 <sbrk_aligned>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005438 <sbrk_aligned+0x40>)
 80053fc:	460c      	mov	r4, r1
 80053fe:	6831      	ldr	r1, [r6, #0]
 8005400:	4605      	mov	r5, r0
 8005402:	b911      	cbnz	r1, 800540a <sbrk_aligned+0x12>
 8005404:	f000 fba4 	bl	8005b50 <_sbrk_r>
 8005408:	6030      	str	r0, [r6, #0]
 800540a:	4621      	mov	r1, r4
 800540c:	4628      	mov	r0, r5
 800540e:	f000 fb9f 	bl	8005b50 <_sbrk_r>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d103      	bne.n	800541e <sbrk_aligned+0x26>
 8005416:	f04f 34ff 	mov.w	r4, #4294967295
 800541a:	4620      	mov	r0, r4
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	1cc4      	adds	r4, r0, #3
 8005420:	f024 0403 	bic.w	r4, r4, #3
 8005424:	42a0      	cmp	r0, r4
 8005426:	d0f8      	beq.n	800541a <sbrk_aligned+0x22>
 8005428:	1a21      	subs	r1, r4, r0
 800542a:	4628      	mov	r0, r5
 800542c:	f000 fb90 	bl	8005b50 <_sbrk_r>
 8005430:	3001      	adds	r0, #1
 8005432:	d1f2      	bne.n	800541a <sbrk_aligned+0x22>
 8005434:	e7ef      	b.n	8005416 <sbrk_aligned+0x1e>
 8005436:	bf00      	nop
 8005438:	20001418 	.word	0x20001418

0800543c <_malloc_r>:
 800543c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005440:	1ccd      	adds	r5, r1, #3
 8005442:	f025 0503 	bic.w	r5, r5, #3
 8005446:	3508      	adds	r5, #8
 8005448:	2d0c      	cmp	r5, #12
 800544a:	bf38      	it	cc
 800544c:	250c      	movcc	r5, #12
 800544e:	2d00      	cmp	r5, #0
 8005450:	4606      	mov	r6, r0
 8005452:	db01      	blt.n	8005458 <_malloc_r+0x1c>
 8005454:	42a9      	cmp	r1, r5
 8005456:	d904      	bls.n	8005462 <_malloc_r+0x26>
 8005458:	230c      	movs	r3, #12
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	2000      	movs	r0, #0
 800545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005538 <_malloc_r+0xfc>
 8005466:	f000 f869 	bl	800553c <__malloc_lock>
 800546a:	f8d8 3000 	ldr.w	r3, [r8]
 800546e:	461c      	mov	r4, r3
 8005470:	bb44      	cbnz	r4, 80054c4 <_malloc_r+0x88>
 8005472:	4629      	mov	r1, r5
 8005474:	4630      	mov	r0, r6
 8005476:	f7ff ffbf 	bl	80053f8 <sbrk_aligned>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	4604      	mov	r4, r0
 800547e:	d158      	bne.n	8005532 <_malloc_r+0xf6>
 8005480:	f8d8 4000 	ldr.w	r4, [r8]
 8005484:	4627      	mov	r7, r4
 8005486:	2f00      	cmp	r7, #0
 8005488:	d143      	bne.n	8005512 <_malloc_r+0xd6>
 800548a:	2c00      	cmp	r4, #0
 800548c:	d04b      	beq.n	8005526 <_malloc_r+0xea>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	4639      	mov	r1, r7
 8005492:	4630      	mov	r0, r6
 8005494:	eb04 0903 	add.w	r9, r4, r3
 8005498:	f000 fb5a 	bl	8005b50 <_sbrk_r>
 800549c:	4581      	cmp	r9, r0
 800549e:	d142      	bne.n	8005526 <_malloc_r+0xea>
 80054a0:	6821      	ldr	r1, [r4, #0]
 80054a2:	1a6d      	subs	r5, r5, r1
 80054a4:	4629      	mov	r1, r5
 80054a6:	4630      	mov	r0, r6
 80054a8:	f7ff ffa6 	bl	80053f8 <sbrk_aligned>
 80054ac:	3001      	adds	r0, #1
 80054ae:	d03a      	beq.n	8005526 <_malloc_r+0xea>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	442b      	add	r3, r5
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	f8d8 3000 	ldr.w	r3, [r8]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	bb62      	cbnz	r2, 8005518 <_malloc_r+0xdc>
 80054be:	f8c8 7000 	str.w	r7, [r8]
 80054c2:	e00f      	b.n	80054e4 <_malloc_r+0xa8>
 80054c4:	6822      	ldr	r2, [r4, #0]
 80054c6:	1b52      	subs	r2, r2, r5
 80054c8:	d420      	bmi.n	800550c <_malloc_r+0xd0>
 80054ca:	2a0b      	cmp	r2, #11
 80054cc:	d917      	bls.n	80054fe <_malloc_r+0xc2>
 80054ce:	1961      	adds	r1, r4, r5
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	6025      	str	r5, [r4, #0]
 80054d4:	bf18      	it	ne
 80054d6:	6059      	strne	r1, [r3, #4]
 80054d8:	6863      	ldr	r3, [r4, #4]
 80054da:	bf08      	it	eq
 80054dc:	f8c8 1000 	streq.w	r1, [r8]
 80054e0:	5162      	str	r2, [r4, r5]
 80054e2:	604b      	str	r3, [r1, #4]
 80054e4:	4630      	mov	r0, r6
 80054e6:	f000 f82f 	bl	8005548 <__malloc_unlock>
 80054ea:	f104 000b 	add.w	r0, r4, #11
 80054ee:	1d23      	adds	r3, r4, #4
 80054f0:	f020 0007 	bic.w	r0, r0, #7
 80054f4:	1ac2      	subs	r2, r0, r3
 80054f6:	bf1c      	itt	ne
 80054f8:	1a1b      	subne	r3, r3, r0
 80054fa:	50a3      	strne	r3, [r4, r2]
 80054fc:	e7af      	b.n	800545e <_malloc_r+0x22>
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	42a3      	cmp	r3, r4
 8005502:	bf0c      	ite	eq
 8005504:	f8c8 2000 	streq.w	r2, [r8]
 8005508:	605a      	strne	r2, [r3, #4]
 800550a:	e7eb      	b.n	80054e4 <_malloc_r+0xa8>
 800550c:	4623      	mov	r3, r4
 800550e:	6864      	ldr	r4, [r4, #4]
 8005510:	e7ae      	b.n	8005470 <_malloc_r+0x34>
 8005512:	463c      	mov	r4, r7
 8005514:	687f      	ldr	r7, [r7, #4]
 8005516:	e7b6      	b.n	8005486 <_malloc_r+0x4a>
 8005518:	461a      	mov	r2, r3
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	42a3      	cmp	r3, r4
 800551e:	d1fb      	bne.n	8005518 <_malloc_r+0xdc>
 8005520:	2300      	movs	r3, #0
 8005522:	6053      	str	r3, [r2, #4]
 8005524:	e7de      	b.n	80054e4 <_malloc_r+0xa8>
 8005526:	230c      	movs	r3, #12
 8005528:	6033      	str	r3, [r6, #0]
 800552a:	4630      	mov	r0, r6
 800552c:	f000 f80c 	bl	8005548 <__malloc_unlock>
 8005530:	e794      	b.n	800545c <_malloc_r+0x20>
 8005532:	6005      	str	r5, [r0, #0]
 8005534:	e7d6      	b.n	80054e4 <_malloc_r+0xa8>
 8005536:	bf00      	nop
 8005538:	2000141c 	.word	0x2000141c

0800553c <__malloc_lock>:
 800553c:	4801      	ldr	r0, [pc, #4]	@ (8005544 <__malloc_lock+0x8>)
 800553e:	f7ff bf0f 	b.w	8005360 <__retarget_lock_acquire_recursive>
 8005542:	bf00      	nop
 8005544:	20001414 	.word	0x20001414

08005548 <__malloc_unlock>:
 8005548:	4801      	ldr	r0, [pc, #4]	@ (8005550 <__malloc_unlock+0x8>)
 800554a:	f7ff bf0a 	b.w	8005362 <__retarget_lock_release_recursive>
 800554e:	bf00      	nop
 8005550:	20001414 	.word	0x20001414

08005554 <__ssputs_r>:
 8005554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	688e      	ldr	r6, [r1, #8]
 800555a:	461f      	mov	r7, r3
 800555c:	42be      	cmp	r6, r7
 800555e:	680b      	ldr	r3, [r1, #0]
 8005560:	4682      	mov	sl, r0
 8005562:	460c      	mov	r4, r1
 8005564:	4690      	mov	r8, r2
 8005566:	d82d      	bhi.n	80055c4 <__ssputs_r+0x70>
 8005568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800556c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005570:	d026      	beq.n	80055c0 <__ssputs_r+0x6c>
 8005572:	6965      	ldr	r5, [r4, #20]
 8005574:	6909      	ldr	r1, [r1, #16]
 8005576:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800557a:	eba3 0901 	sub.w	r9, r3, r1
 800557e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005582:	1c7b      	adds	r3, r7, #1
 8005584:	444b      	add	r3, r9
 8005586:	106d      	asrs	r5, r5, #1
 8005588:	429d      	cmp	r5, r3
 800558a:	bf38      	it	cc
 800558c:	461d      	movcc	r5, r3
 800558e:	0553      	lsls	r3, r2, #21
 8005590:	d527      	bpl.n	80055e2 <__ssputs_r+0x8e>
 8005592:	4629      	mov	r1, r5
 8005594:	f7ff ff52 	bl	800543c <_malloc_r>
 8005598:	4606      	mov	r6, r0
 800559a:	b360      	cbz	r0, 80055f6 <__ssputs_r+0xa2>
 800559c:	6921      	ldr	r1, [r4, #16]
 800559e:	464a      	mov	r2, r9
 80055a0:	f000 fae6 	bl	8005b70 <memcpy>
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	6126      	str	r6, [r4, #16]
 80055b2:	6165      	str	r5, [r4, #20]
 80055b4:	444e      	add	r6, r9
 80055b6:	eba5 0509 	sub.w	r5, r5, r9
 80055ba:	6026      	str	r6, [r4, #0]
 80055bc:	60a5      	str	r5, [r4, #8]
 80055be:	463e      	mov	r6, r7
 80055c0:	42be      	cmp	r6, r7
 80055c2:	d900      	bls.n	80055c6 <__ssputs_r+0x72>
 80055c4:	463e      	mov	r6, r7
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	4632      	mov	r2, r6
 80055ca:	4641      	mov	r1, r8
 80055cc:	f000 faa6 	bl	8005b1c <memmove>
 80055d0:	68a3      	ldr	r3, [r4, #8]
 80055d2:	1b9b      	subs	r3, r3, r6
 80055d4:	60a3      	str	r3, [r4, #8]
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	4433      	add	r3, r6
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	2000      	movs	r0, #0
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e2:	462a      	mov	r2, r5
 80055e4:	f000 fad2 	bl	8005b8c <_realloc_r>
 80055e8:	4606      	mov	r6, r0
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d1e0      	bne.n	80055b0 <__ssputs_r+0x5c>
 80055ee:	6921      	ldr	r1, [r4, #16]
 80055f0:	4650      	mov	r0, sl
 80055f2:	f7ff feb7 	bl	8005364 <_free_r>
 80055f6:	230c      	movs	r3, #12
 80055f8:	f8ca 3000 	str.w	r3, [sl]
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005602:	81a3      	strh	r3, [r4, #12]
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	e7e9      	b.n	80055de <__ssputs_r+0x8a>
	...

0800560c <_svfiprintf_r>:
 800560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	4698      	mov	r8, r3
 8005612:	898b      	ldrh	r3, [r1, #12]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	b09d      	sub	sp, #116	@ 0x74
 8005618:	4607      	mov	r7, r0
 800561a:	460d      	mov	r5, r1
 800561c:	4614      	mov	r4, r2
 800561e:	d510      	bpl.n	8005642 <_svfiprintf_r+0x36>
 8005620:	690b      	ldr	r3, [r1, #16]
 8005622:	b973      	cbnz	r3, 8005642 <_svfiprintf_r+0x36>
 8005624:	2140      	movs	r1, #64	@ 0x40
 8005626:	f7ff ff09 	bl	800543c <_malloc_r>
 800562a:	6028      	str	r0, [r5, #0]
 800562c:	6128      	str	r0, [r5, #16]
 800562e:	b930      	cbnz	r0, 800563e <_svfiprintf_r+0x32>
 8005630:	230c      	movs	r3, #12
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	b01d      	add	sp, #116	@ 0x74
 800563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563e:	2340      	movs	r3, #64	@ 0x40
 8005640:	616b      	str	r3, [r5, #20]
 8005642:	2300      	movs	r3, #0
 8005644:	9309      	str	r3, [sp, #36]	@ 0x24
 8005646:	2320      	movs	r3, #32
 8005648:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800564c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005650:	2330      	movs	r3, #48	@ 0x30
 8005652:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80057f0 <_svfiprintf_r+0x1e4>
 8005656:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800565a:	f04f 0901 	mov.w	r9, #1
 800565e:	4623      	mov	r3, r4
 8005660:	469a      	mov	sl, r3
 8005662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005666:	b10a      	cbz	r2, 800566c <_svfiprintf_r+0x60>
 8005668:	2a25      	cmp	r2, #37	@ 0x25
 800566a:	d1f9      	bne.n	8005660 <_svfiprintf_r+0x54>
 800566c:	ebba 0b04 	subs.w	fp, sl, r4
 8005670:	d00b      	beq.n	800568a <_svfiprintf_r+0x7e>
 8005672:	465b      	mov	r3, fp
 8005674:	4622      	mov	r2, r4
 8005676:	4629      	mov	r1, r5
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff ff6b 	bl	8005554 <__ssputs_r>
 800567e:	3001      	adds	r0, #1
 8005680:	f000 80a7 	beq.w	80057d2 <_svfiprintf_r+0x1c6>
 8005684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005686:	445a      	add	r2, fp
 8005688:	9209      	str	r2, [sp, #36]	@ 0x24
 800568a:	f89a 3000 	ldrb.w	r3, [sl]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 809f 	beq.w	80057d2 <_svfiprintf_r+0x1c6>
 8005694:	2300      	movs	r3, #0
 8005696:	f04f 32ff 	mov.w	r2, #4294967295
 800569a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569e:	f10a 0a01 	add.w	sl, sl, #1
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	9307      	str	r3, [sp, #28]
 80056a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80056ac:	4654      	mov	r4, sl
 80056ae:	2205      	movs	r2, #5
 80056b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b4:	484e      	ldr	r0, [pc, #312]	@ (80057f0 <_svfiprintf_r+0x1e4>)
 80056b6:	f7fa fd8b 	bl	80001d0 <memchr>
 80056ba:	9a04      	ldr	r2, [sp, #16]
 80056bc:	b9d8      	cbnz	r0, 80056f6 <_svfiprintf_r+0xea>
 80056be:	06d0      	lsls	r0, r2, #27
 80056c0:	bf44      	itt	mi
 80056c2:	2320      	movmi	r3, #32
 80056c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056c8:	0711      	lsls	r1, r2, #28
 80056ca:	bf44      	itt	mi
 80056cc:	232b      	movmi	r3, #43	@ 0x2b
 80056ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056d2:	f89a 3000 	ldrb.w	r3, [sl]
 80056d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056d8:	d015      	beq.n	8005706 <_svfiprintf_r+0xfa>
 80056da:	9a07      	ldr	r2, [sp, #28]
 80056dc:	4654      	mov	r4, sl
 80056de:	2000      	movs	r0, #0
 80056e0:	f04f 0c0a 	mov.w	ip, #10
 80056e4:	4621      	mov	r1, r4
 80056e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ea:	3b30      	subs	r3, #48	@ 0x30
 80056ec:	2b09      	cmp	r3, #9
 80056ee:	d94b      	bls.n	8005788 <_svfiprintf_r+0x17c>
 80056f0:	b1b0      	cbz	r0, 8005720 <_svfiprintf_r+0x114>
 80056f2:	9207      	str	r2, [sp, #28]
 80056f4:	e014      	b.n	8005720 <_svfiprintf_r+0x114>
 80056f6:	eba0 0308 	sub.w	r3, r0, r8
 80056fa:	fa09 f303 	lsl.w	r3, r9, r3
 80056fe:	4313      	orrs	r3, r2
 8005700:	9304      	str	r3, [sp, #16]
 8005702:	46a2      	mov	sl, r4
 8005704:	e7d2      	b.n	80056ac <_svfiprintf_r+0xa0>
 8005706:	9b03      	ldr	r3, [sp, #12]
 8005708:	1d19      	adds	r1, r3, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	9103      	str	r1, [sp, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	bfbb      	ittet	lt
 8005712:	425b      	neglt	r3, r3
 8005714:	f042 0202 	orrlt.w	r2, r2, #2
 8005718:	9307      	strge	r3, [sp, #28]
 800571a:	9307      	strlt	r3, [sp, #28]
 800571c:	bfb8      	it	lt
 800571e:	9204      	strlt	r2, [sp, #16]
 8005720:	7823      	ldrb	r3, [r4, #0]
 8005722:	2b2e      	cmp	r3, #46	@ 0x2e
 8005724:	d10a      	bne.n	800573c <_svfiprintf_r+0x130>
 8005726:	7863      	ldrb	r3, [r4, #1]
 8005728:	2b2a      	cmp	r3, #42	@ 0x2a
 800572a:	d132      	bne.n	8005792 <_svfiprintf_r+0x186>
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	1d1a      	adds	r2, r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	9203      	str	r2, [sp, #12]
 8005734:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005738:	3402      	adds	r4, #2
 800573a:	9305      	str	r3, [sp, #20]
 800573c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005800 <_svfiprintf_r+0x1f4>
 8005740:	7821      	ldrb	r1, [r4, #0]
 8005742:	2203      	movs	r2, #3
 8005744:	4650      	mov	r0, sl
 8005746:	f7fa fd43 	bl	80001d0 <memchr>
 800574a:	b138      	cbz	r0, 800575c <_svfiprintf_r+0x150>
 800574c:	9b04      	ldr	r3, [sp, #16]
 800574e:	eba0 000a 	sub.w	r0, r0, sl
 8005752:	2240      	movs	r2, #64	@ 0x40
 8005754:	4082      	lsls	r2, r0
 8005756:	4313      	orrs	r3, r2
 8005758:	3401      	adds	r4, #1
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005760:	4824      	ldr	r0, [pc, #144]	@ (80057f4 <_svfiprintf_r+0x1e8>)
 8005762:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005766:	2206      	movs	r2, #6
 8005768:	f7fa fd32 	bl	80001d0 <memchr>
 800576c:	2800      	cmp	r0, #0
 800576e:	d036      	beq.n	80057de <_svfiprintf_r+0x1d2>
 8005770:	4b21      	ldr	r3, [pc, #132]	@ (80057f8 <_svfiprintf_r+0x1ec>)
 8005772:	bb1b      	cbnz	r3, 80057bc <_svfiprintf_r+0x1b0>
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	3307      	adds	r3, #7
 8005778:	f023 0307 	bic.w	r3, r3, #7
 800577c:	3308      	adds	r3, #8
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005782:	4433      	add	r3, r6
 8005784:	9309      	str	r3, [sp, #36]	@ 0x24
 8005786:	e76a      	b.n	800565e <_svfiprintf_r+0x52>
 8005788:	fb0c 3202 	mla	r2, ip, r2, r3
 800578c:	460c      	mov	r4, r1
 800578e:	2001      	movs	r0, #1
 8005790:	e7a8      	b.n	80056e4 <_svfiprintf_r+0xd8>
 8005792:	2300      	movs	r3, #0
 8005794:	3401      	adds	r4, #1
 8005796:	9305      	str	r3, [sp, #20]
 8005798:	4619      	mov	r1, r3
 800579a:	f04f 0c0a 	mov.w	ip, #10
 800579e:	4620      	mov	r0, r4
 80057a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a4:	3a30      	subs	r2, #48	@ 0x30
 80057a6:	2a09      	cmp	r2, #9
 80057a8:	d903      	bls.n	80057b2 <_svfiprintf_r+0x1a6>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0c6      	beq.n	800573c <_svfiprintf_r+0x130>
 80057ae:	9105      	str	r1, [sp, #20]
 80057b0:	e7c4      	b.n	800573c <_svfiprintf_r+0x130>
 80057b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80057b6:	4604      	mov	r4, r0
 80057b8:	2301      	movs	r3, #1
 80057ba:	e7f0      	b.n	800579e <_svfiprintf_r+0x192>
 80057bc:	ab03      	add	r3, sp, #12
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	462a      	mov	r2, r5
 80057c2:	4b0e      	ldr	r3, [pc, #56]	@ (80057fc <_svfiprintf_r+0x1f0>)
 80057c4:	a904      	add	r1, sp, #16
 80057c6:	4638      	mov	r0, r7
 80057c8:	f3af 8000 	nop.w
 80057cc:	1c42      	adds	r2, r0, #1
 80057ce:	4606      	mov	r6, r0
 80057d0:	d1d6      	bne.n	8005780 <_svfiprintf_r+0x174>
 80057d2:	89ab      	ldrh	r3, [r5, #12]
 80057d4:	065b      	lsls	r3, r3, #25
 80057d6:	f53f af2d 	bmi.w	8005634 <_svfiprintf_r+0x28>
 80057da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057dc:	e72c      	b.n	8005638 <_svfiprintf_r+0x2c>
 80057de:	ab03      	add	r3, sp, #12
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	462a      	mov	r2, r5
 80057e4:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <_svfiprintf_r+0x1f0>)
 80057e6:	a904      	add	r1, sp, #16
 80057e8:	4638      	mov	r0, r7
 80057ea:	f000 f879 	bl	80058e0 <_printf_i>
 80057ee:	e7ed      	b.n	80057cc <_svfiprintf_r+0x1c0>
 80057f0:	08006aa4 	.word	0x08006aa4
 80057f4:	08006aae 	.word	0x08006aae
 80057f8:	00000000 	.word	0x00000000
 80057fc:	08005555 	.word	0x08005555
 8005800:	08006aaa 	.word	0x08006aaa

08005804 <_printf_common>:
 8005804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	4616      	mov	r6, r2
 800580a:	4698      	mov	r8, r3
 800580c:	688a      	ldr	r2, [r1, #8]
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005814:	4293      	cmp	r3, r2
 8005816:	bfb8      	it	lt
 8005818:	4613      	movlt	r3, r2
 800581a:	6033      	str	r3, [r6, #0]
 800581c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005820:	4607      	mov	r7, r0
 8005822:	460c      	mov	r4, r1
 8005824:	b10a      	cbz	r2, 800582a <_printf_common+0x26>
 8005826:	3301      	adds	r3, #1
 8005828:	6033      	str	r3, [r6, #0]
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	0699      	lsls	r1, r3, #26
 800582e:	bf42      	ittt	mi
 8005830:	6833      	ldrmi	r3, [r6, #0]
 8005832:	3302      	addmi	r3, #2
 8005834:	6033      	strmi	r3, [r6, #0]
 8005836:	6825      	ldr	r5, [r4, #0]
 8005838:	f015 0506 	ands.w	r5, r5, #6
 800583c:	d106      	bne.n	800584c <_printf_common+0x48>
 800583e:	f104 0a19 	add.w	sl, r4, #25
 8005842:	68e3      	ldr	r3, [r4, #12]
 8005844:	6832      	ldr	r2, [r6, #0]
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	42ab      	cmp	r3, r5
 800584a:	dc26      	bgt.n	800589a <_printf_common+0x96>
 800584c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005850:	6822      	ldr	r2, [r4, #0]
 8005852:	3b00      	subs	r3, #0
 8005854:	bf18      	it	ne
 8005856:	2301      	movne	r3, #1
 8005858:	0692      	lsls	r2, r2, #26
 800585a:	d42b      	bmi.n	80058b4 <_printf_common+0xb0>
 800585c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005860:	4641      	mov	r1, r8
 8005862:	4638      	mov	r0, r7
 8005864:	47c8      	blx	r9
 8005866:	3001      	adds	r0, #1
 8005868:	d01e      	beq.n	80058a8 <_printf_common+0xa4>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	f003 0306 	and.w	r3, r3, #6
 8005872:	2b04      	cmp	r3, #4
 8005874:	bf02      	ittt	eq
 8005876:	68e5      	ldreq	r5, [r4, #12]
 8005878:	6833      	ldreq	r3, [r6, #0]
 800587a:	1aed      	subeq	r5, r5, r3
 800587c:	68a3      	ldr	r3, [r4, #8]
 800587e:	bf0c      	ite	eq
 8005880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005884:	2500      	movne	r5, #0
 8005886:	4293      	cmp	r3, r2
 8005888:	bfc4      	itt	gt
 800588a:	1a9b      	subgt	r3, r3, r2
 800588c:	18ed      	addgt	r5, r5, r3
 800588e:	2600      	movs	r6, #0
 8005890:	341a      	adds	r4, #26
 8005892:	42b5      	cmp	r5, r6
 8005894:	d11a      	bne.n	80058cc <_printf_common+0xc8>
 8005896:	2000      	movs	r0, #0
 8005898:	e008      	b.n	80058ac <_printf_common+0xa8>
 800589a:	2301      	movs	r3, #1
 800589c:	4652      	mov	r2, sl
 800589e:	4641      	mov	r1, r8
 80058a0:	4638      	mov	r0, r7
 80058a2:	47c8      	blx	r9
 80058a4:	3001      	adds	r0, #1
 80058a6:	d103      	bne.n	80058b0 <_printf_common+0xac>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b0:	3501      	adds	r5, #1
 80058b2:	e7c6      	b.n	8005842 <_printf_common+0x3e>
 80058b4:	18e1      	adds	r1, r4, r3
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	2030      	movs	r0, #48	@ 0x30
 80058ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058be:	4422      	add	r2, r4
 80058c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058c8:	3302      	adds	r3, #2
 80058ca:	e7c7      	b.n	800585c <_printf_common+0x58>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4622      	mov	r2, r4
 80058d0:	4641      	mov	r1, r8
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c8      	blx	r9
 80058d6:	3001      	adds	r0, #1
 80058d8:	d0e6      	beq.n	80058a8 <_printf_common+0xa4>
 80058da:	3601      	adds	r6, #1
 80058dc:	e7d9      	b.n	8005892 <_printf_common+0x8e>
	...

080058e0 <_printf_i>:
 80058e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	7e0f      	ldrb	r7, [r1, #24]
 80058e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058e8:	2f78      	cmp	r7, #120	@ 0x78
 80058ea:	4691      	mov	r9, r2
 80058ec:	4680      	mov	r8, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	469a      	mov	sl, r3
 80058f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058f6:	d807      	bhi.n	8005908 <_printf_i+0x28>
 80058f8:	2f62      	cmp	r7, #98	@ 0x62
 80058fa:	d80a      	bhi.n	8005912 <_printf_i+0x32>
 80058fc:	2f00      	cmp	r7, #0
 80058fe:	f000 80d1 	beq.w	8005aa4 <_printf_i+0x1c4>
 8005902:	2f58      	cmp	r7, #88	@ 0x58
 8005904:	f000 80b8 	beq.w	8005a78 <_printf_i+0x198>
 8005908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800590c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005910:	e03a      	b.n	8005988 <_printf_i+0xa8>
 8005912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005916:	2b15      	cmp	r3, #21
 8005918:	d8f6      	bhi.n	8005908 <_printf_i+0x28>
 800591a:	a101      	add	r1, pc, #4	@ (adr r1, 8005920 <_printf_i+0x40>)
 800591c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005920:	08005979 	.word	0x08005979
 8005924:	0800598d 	.word	0x0800598d
 8005928:	08005909 	.word	0x08005909
 800592c:	08005909 	.word	0x08005909
 8005930:	08005909 	.word	0x08005909
 8005934:	08005909 	.word	0x08005909
 8005938:	0800598d 	.word	0x0800598d
 800593c:	08005909 	.word	0x08005909
 8005940:	08005909 	.word	0x08005909
 8005944:	08005909 	.word	0x08005909
 8005948:	08005909 	.word	0x08005909
 800594c:	08005a8b 	.word	0x08005a8b
 8005950:	080059b7 	.word	0x080059b7
 8005954:	08005a45 	.word	0x08005a45
 8005958:	08005909 	.word	0x08005909
 800595c:	08005909 	.word	0x08005909
 8005960:	08005aad 	.word	0x08005aad
 8005964:	08005909 	.word	0x08005909
 8005968:	080059b7 	.word	0x080059b7
 800596c:	08005909 	.word	0x08005909
 8005970:	08005909 	.word	0x08005909
 8005974:	08005a4d 	.word	0x08005a4d
 8005978:	6833      	ldr	r3, [r6, #0]
 800597a:	1d1a      	adds	r2, r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6032      	str	r2, [r6, #0]
 8005980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005988:	2301      	movs	r3, #1
 800598a:	e09c      	b.n	8005ac6 <_printf_i+0x1e6>
 800598c:	6833      	ldr	r3, [r6, #0]
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	1d19      	adds	r1, r3, #4
 8005992:	6031      	str	r1, [r6, #0]
 8005994:	0606      	lsls	r6, r0, #24
 8005996:	d501      	bpl.n	800599c <_printf_i+0xbc>
 8005998:	681d      	ldr	r5, [r3, #0]
 800599a:	e003      	b.n	80059a4 <_printf_i+0xc4>
 800599c:	0645      	lsls	r5, r0, #25
 800599e:	d5fb      	bpl.n	8005998 <_printf_i+0xb8>
 80059a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	da03      	bge.n	80059b0 <_printf_i+0xd0>
 80059a8:	232d      	movs	r3, #45	@ 0x2d
 80059aa:	426d      	negs	r5, r5
 80059ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059b0:	4858      	ldr	r0, [pc, #352]	@ (8005b14 <_printf_i+0x234>)
 80059b2:	230a      	movs	r3, #10
 80059b4:	e011      	b.n	80059da <_printf_i+0xfa>
 80059b6:	6821      	ldr	r1, [r4, #0]
 80059b8:	6833      	ldr	r3, [r6, #0]
 80059ba:	0608      	lsls	r0, r1, #24
 80059bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80059c0:	d402      	bmi.n	80059c8 <_printf_i+0xe8>
 80059c2:	0649      	lsls	r1, r1, #25
 80059c4:	bf48      	it	mi
 80059c6:	b2ad      	uxthmi	r5, r5
 80059c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80059ca:	4852      	ldr	r0, [pc, #328]	@ (8005b14 <_printf_i+0x234>)
 80059cc:	6033      	str	r3, [r6, #0]
 80059ce:	bf14      	ite	ne
 80059d0:	230a      	movne	r3, #10
 80059d2:	2308      	moveq	r3, #8
 80059d4:	2100      	movs	r1, #0
 80059d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059da:	6866      	ldr	r6, [r4, #4]
 80059dc:	60a6      	str	r6, [r4, #8]
 80059de:	2e00      	cmp	r6, #0
 80059e0:	db05      	blt.n	80059ee <_printf_i+0x10e>
 80059e2:	6821      	ldr	r1, [r4, #0]
 80059e4:	432e      	orrs	r6, r5
 80059e6:	f021 0104 	bic.w	r1, r1, #4
 80059ea:	6021      	str	r1, [r4, #0]
 80059ec:	d04b      	beq.n	8005a86 <_printf_i+0x1a6>
 80059ee:	4616      	mov	r6, r2
 80059f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80059f4:	fb03 5711 	mls	r7, r3, r1, r5
 80059f8:	5dc7      	ldrb	r7, [r0, r7]
 80059fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059fe:	462f      	mov	r7, r5
 8005a00:	42bb      	cmp	r3, r7
 8005a02:	460d      	mov	r5, r1
 8005a04:	d9f4      	bls.n	80059f0 <_printf_i+0x110>
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d10b      	bne.n	8005a22 <_printf_i+0x142>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	07df      	lsls	r7, r3, #31
 8005a0e:	d508      	bpl.n	8005a22 <_printf_i+0x142>
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	6861      	ldr	r1, [r4, #4]
 8005a14:	4299      	cmp	r1, r3
 8005a16:	bfde      	ittt	le
 8005a18:	2330      	movle	r3, #48	@ 0x30
 8005a1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a22:	1b92      	subs	r2, r2, r6
 8005a24:	6122      	str	r2, [r4, #16]
 8005a26:	f8cd a000 	str.w	sl, [sp]
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	aa03      	add	r2, sp, #12
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4640      	mov	r0, r8
 8005a32:	f7ff fee7 	bl	8005804 <_printf_common>
 8005a36:	3001      	adds	r0, #1
 8005a38:	d14a      	bne.n	8005ad0 <_printf_i+0x1f0>
 8005a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3e:	b004      	add	sp, #16
 8005a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	f043 0320 	orr.w	r3, r3, #32
 8005a4a:	6023      	str	r3, [r4, #0]
 8005a4c:	4832      	ldr	r0, [pc, #200]	@ (8005b18 <_printf_i+0x238>)
 8005a4e:	2778      	movs	r7, #120	@ 0x78
 8005a50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	6831      	ldr	r1, [r6, #0]
 8005a58:	061f      	lsls	r7, r3, #24
 8005a5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a5e:	d402      	bmi.n	8005a66 <_printf_i+0x186>
 8005a60:	065f      	lsls	r7, r3, #25
 8005a62:	bf48      	it	mi
 8005a64:	b2ad      	uxthmi	r5, r5
 8005a66:	6031      	str	r1, [r6, #0]
 8005a68:	07d9      	lsls	r1, r3, #31
 8005a6a:	bf44      	itt	mi
 8005a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a70:	6023      	strmi	r3, [r4, #0]
 8005a72:	b11d      	cbz	r5, 8005a7c <_printf_i+0x19c>
 8005a74:	2310      	movs	r3, #16
 8005a76:	e7ad      	b.n	80059d4 <_printf_i+0xf4>
 8005a78:	4826      	ldr	r0, [pc, #152]	@ (8005b14 <_printf_i+0x234>)
 8005a7a:	e7e9      	b.n	8005a50 <_printf_i+0x170>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	f023 0320 	bic.w	r3, r3, #32
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	e7f6      	b.n	8005a74 <_printf_i+0x194>
 8005a86:	4616      	mov	r6, r2
 8005a88:	e7bd      	b.n	8005a06 <_printf_i+0x126>
 8005a8a:	6833      	ldr	r3, [r6, #0]
 8005a8c:	6825      	ldr	r5, [r4, #0]
 8005a8e:	6961      	ldr	r1, [r4, #20]
 8005a90:	1d18      	adds	r0, r3, #4
 8005a92:	6030      	str	r0, [r6, #0]
 8005a94:	062e      	lsls	r6, r5, #24
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	d501      	bpl.n	8005a9e <_printf_i+0x1be>
 8005a9a:	6019      	str	r1, [r3, #0]
 8005a9c:	e002      	b.n	8005aa4 <_printf_i+0x1c4>
 8005a9e:	0668      	lsls	r0, r5, #25
 8005aa0:	d5fb      	bpl.n	8005a9a <_printf_i+0x1ba>
 8005aa2:	8019      	strh	r1, [r3, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6123      	str	r3, [r4, #16]
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	e7bc      	b.n	8005a26 <_printf_i+0x146>
 8005aac:	6833      	ldr	r3, [r6, #0]
 8005aae:	1d1a      	adds	r2, r3, #4
 8005ab0:	6032      	str	r2, [r6, #0]
 8005ab2:	681e      	ldr	r6, [r3, #0]
 8005ab4:	6862      	ldr	r2, [r4, #4]
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f7fa fb89 	bl	80001d0 <memchr>
 8005abe:	b108      	cbz	r0, 8005ac4 <_printf_i+0x1e4>
 8005ac0:	1b80      	subs	r0, r0, r6
 8005ac2:	6060      	str	r0, [r4, #4]
 8005ac4:	6863      	ldr	r3, [r4, #4]
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ace:	e7aa      	b.n	8005a26 <_printf_i+0x146>
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	4632      	mov	r2, r6
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	47d0      	blx	sl
 8005ada:	3001      	adds	r0, #1
 8005adc:	d0ad      	beq.n	8005a3a <_printf_i+0x15a>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	079b      	lsls	r3, r3, #30
 8005ae2:	d413      	bmi.n	8005b0c <_printf_i+0x22c>
 8005ae4:	68e0      	ldr	r0, [r4, #12]
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	4298      	cmp	r0, r3
 8005aea:	bfb8      	it	lt
 8005aec:	4618      	movlt	r0, r3
 8005aee:	e7a6      	b.n	8005a3e <_printf_i+0x15e>
 8005af0:	2301      	movs	r3, #1
 8005af2:	4632      	mov	r2, r6
 8005af4:	4649      	mov	r1, r9
 8005af6:	4640      	mov	r0, r8
 8005af8:	47d0      	blx	sl
 8005afa:	3001      	adds	r0, #1
 8005afc:	d09d      	beq.n	8005a3a <_printf_i+0x15a>
 8005afe:	3501      	adds	r5, #1
 8005b00:	68e3      	ldr	r3, [r4, #12]
 8005b02:	9903      	ldr	r1, [sp, #12]
 8005b04:	1a5b      	subs	r3, r3, r1
 8005b06:	42ab      	cmp	r3, r5
 8005b08:	dcf2      	bgt.n	8005af0 <_printf_i+0x210>
 8005b0a:	e7eb      	b.n	8005ae4 <_printf_i+0x204>
 8005b0c:	2500      	movs	r5, #0
 8005b0e:	f104 0619 	add.w	r6, r4, #25
 8005b12:	e7f5      	b.n	8005b00 <_printf_i+0x220>
 8005b14:	08006ab5 	.word	0x08006ab5
 8005b18:	08006ac6 	.word	0x08006ac6

08005b1c <memmove>:
 8005b1c:	4288      	cmp	r0, r1
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	eb01 0402 	add.w	r4, r1, r2
 8005b24:	d902      	bls.n	8005b2c <memmove+0x10>
 8005b26:	4284      	cmp	r4, r0
 8005b28:	4623      	mov	r3, r4
 8005b2a:	d807      	bhi.n	8005b3c <memmove+0x20>
 8005b2c:	1e43      	subs	r3, r0, #1
 8005b2e:	42a1      	cmp	r1, r4
 8005b30:	d008      	beq.n	8005b44 <memmove+0x28>
 8005b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b3a:	e7f8      	b.n	8005b2e <memmove+0x12>
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4601      	mov	r1, r0
 8005b40:	428a      	cmp	r2, r1
 8005b42:	d100      	bne.n	8005b46 <memmove+0x2a>
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b4e:	e7f7      	b.n	8005b40 <memmove+0x24>

08005b50 <_sbrk_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d06      	ldr	r5, [pc, #24]	@ (8005b6c <_sbrk_r+0x1c>)
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	f7fc fb92 	bl	8002284 <_sbrk>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_sbrk_r+0x1a>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_sbrk_r+0x1a>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	20001410 	.word	0x20001410

08005b70 <memcpy>:
 8005b70:	440a      	add	r2, r1
 8005b72:	4291      	cmp	r1, r2
 8005b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	4770      	bx	lr
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b86:	4291      	cmp	r1, r2
 8005b88:	d1f9      	bne.n	8005b7e <memcpy+0xe>
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <_realloc_r>:
 8005b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b90:	4607      	mov	r7, r0
 8005b92:	4614      	mov	r4, r2
 8005b94:	460d      	mov	r5, r1
 8005b96:	b921      	cbnz	r1, 8005ba2 <_realloc_r+0x16>
 8005b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	f7ff bc4d 	b.w	800543c <_malloc_r>
 8005ba2:	b92a      	cbnz	r2, 8005bb0 <_realloc_r+0x24>
 8005ba4:	f7ff fbde 	bl	8005364 <_free_r>
 8005ba8:	4625      	mov	r5, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb0:	f000 f81a 	bl	8005be8 <_malloc_usable_size_r>
 8005bb4:	4284      	cmp	r4, r0
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	d802      	bhi.n	8005bc0 <_realloc_r+0x34>
 8005bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bbe:	d8f4      	bhi.n	8005baa <_realloc_r+0x1e>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f7ff fc3a 	bl	800543c <_malloc_r>
 8005bc8:	4680      	mov	r8, r0
 8005bca:	b908      	cbnz	r0, 8005bd0 <_realloc_r+0x44>
 8005bcc:	4645      	mov	r5, r8
 8005bce:	e7ec      	b.n	8005baa <_realloc_r+0x1e>
 8005bd0:	42b4      	cmp	r4, r6
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	bf28      	it	cs
 8005bd8:	4632      	movcs	r2, r6
 8005bda:	f7ff ffc9 	bl	8005b70 <memcpy>
 8005bde:	4629      	mov	r1, r5
 8005be0:	4638      	mov	r0, r7
 8005be2:	f7ff fbbf 	bl	8005364 <_free_r>
 8005be6:	e7f1      	b.n	8005bcc <_realloc_r+0x40>

08005be8 <_malloc_usable_size_r>:
 8005be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bec:	1f18      	subs	r0, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfbc      	itt	lt
 8005bf2:	580b      	ldrlt	r3, [r1, r0]
 8005bf4:	18c0      	addlt	r0, r0, r3
 8005bf6:	4770      	bx	lr

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
